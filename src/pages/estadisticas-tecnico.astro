---
/**
 * P√°gina "Mis estad√≠sticas (t√©cnico)"
 *
 * üéØ Objetivo:
 * - Mostrarle a un t√©cnico SOLO sus propios tickets y m√©tricas.
 * - Listar, en forma de tabla:
 *    ‚Ä¢ ID y cliente
 *    ‚Ä¢ Modelo / m√°quina
 *    ‚Ä¢ Estado del ticket
 *    ‚Ä¢ Fechas clave (presupuesto y lista)
 *    ‚Ä¢ Tardanza en d√≠as
 *    ‚Ä¢ Si est√° marcada como reparada ‚úÖ
 *
 * - Mostrar un contador de cu√°ntas impresoras repar√≥ ese t√©cnico.
 *
 * üîê Seguridad / visibilidad:
 * - Tomamos el email del usuario logueado desde Astro.locals.
 * - Extraemos el "local-part" del email (antes de @), ej "juan" de "juan@..."
 *   porque √©sa es la convenci√≥n que usa el backend para identificar t√©cnicos.
 * - Si no hay email => redirect a /no-autorizado
 *   (esto evita que cualquiera abra esta ruta sin login).
 *
 * ‚è± Filtro temporal:
 * - El UI tiene un <input type="month"> y un bot√≥n "Actualizar".
 *   PERO (IMPORTANTE): hoy el JS ignora ese mes y llama siempre
 *   `/api/estadisticas-tecnico?tecnico=...&all=true`
 *   o sea: pide TODO el hist√≥rico. El input ya est√° listo para cuando
 *   el endpoint soporte filtro por mes.
 *
 * üß† Flujo de datos en el frontend:
 * - Al cargar la p√°gina (DOMContentLoaded) o al clickear "Actualizar":
 *   1. Hace fetch a /api/estadisticas-tecnico
 *   2. Espera JSON con forma algo tipo:
 *        {
 *          items: [
 *            {
 *              id,
 *              cliente,
 *              modelo,
 *              estado,
 *              fecha_presupuesto,
 *              fecha_lista,
 *              tardanza_dias,
 *              reparada: boolean
 *            },
 *            ...
 *          ],
 *          totalImpresorasReparadas: N
 *        }
 *   3. Renderiza filas <tr> din√°micamente dentro de <tbody id="tbody">
 *   4. Actualiza el badge verde y el footer con la cantidad reparada.
 *
 * üñº Presentaci√≥n:
 * - Card con header ("T√©cnico: nombreLocal") y una badge con el total reparado.
 * - Tabla responsive con columnas que se ocultan en pantallas chicas
 *   (por ejemplo fechas se ocultan en mobile usando d-none d-md-table-cell).
 *
 * üìÖ defaultMonth:
 * - Calculamos el mes actual en formato "YYYY-MM" para setear el <input type="month">
 *   y que el selector arranque en el mes vigente.
 */

import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// Perfil disponible en locals (inyectado por tu middleware de auth).
// Hacemos fallback a locals.user.email por si viene de otra parte.
//
const perfil = (Astro.locals as any)?.perfil || {};
const email: string | undefined =
  perfil?.email || (Astro.locals as any)?.user?.email;

// Si NO hay email => no podemos inferir el t√©cnico => bloqueo
if (!email) {
  return Astro.redirect('/no-autorizado');
}

// "t√©cnico local" = parte antes del @, en min√∫sculas.
// Este mismo identificador se usa en el backend como clave de t√©cnico.
// Ej: "juan.perez@empresa.com" ‚Üí "juan.perez"
const tecnicoLocal = String(email).split('@')[0].toLowerCase();

// Mes actual para precargar el <input type="month">
const now = new Date();
const yyyy = now.getFullYear();
const mm = String(now.getMonth() + 1).padStart(2, '0');
const defaultMonth = `${yyyy}-${mm}`;
---

<BasePrivateLayout>
  <div class="container mt-4" style="max-width: 1200px;"> {/* ancho un poco m√°s grande para tabla c√≥moda */}

    {/* ================= HEADER SUPERIOR =================
        - T√≠tulo "Mis estad√≠sticas"
        - Selector de mes (todav√≠a no se usa en el fetch real)
        - Bot√≥n Actualizar que fuerza recarga de datos v√≠a JS
    */}
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3 mb-4">
      <h1 class="h5 m-0">Mis estad√≠sticas (t√©cnico)</h1>

      <div class="d-flex align-items-center gap-2 flex-wrap">
        <label for="mes" class="form-label m-0">Mes</label>

        {/* type="month" ya viene con el mes actual.
            Futuro: este valor deber√≠a mandarse como ?period=YYYY-MM al endpoint,
            pero hoy el script lo ignora. */}
        <input
          id="mes"
          type="month"
          class="form-control"
          style="min-width: 200px;"
          value={defaultMonth}
        />

        <button id="btn-actualizar" class="btn btn-primary">Actualizar</button>
      </div>
    </div>

    {/* ================= CARD PRINCIPAL =================
        Contiene:
        - Header con badge "X reparadas"
        - Tabla din√°mica
        - Footer con total reparadas
    */}
    <div class="card shadow-sm">
      <div class="card-body">

        {/* Header de la card:
           - Muestra el identificador del t√©cnico (local-part)
           - Badge verde que se actualizar√° con el total reparadas */}
        <div class="d-flex align-items-center justify-content-between mb-3">
          <h2 class="h6 text-muted m-0">
            T√©cnico: <code>{tecnicoLocal}</code>
          </h2>

          {/* Este badge se reemplaza en runtime:
              "Cargando..." ‚Üí "5 reparadas" */}
          <div
            id="badge-reparadas"
            class="badge bg-success-subtle text-success border border-success-subtle px-3 py-2"
            style="font-size:.9rem;"
          >
            Cargando‚Ä¶
          </div>
        </div>

        {/* Mensaje cuando no hay datos:
            Por defecto est√° oculto con d-none,
            el script lo muestra si la API devuelve vac√≠o */}
        <div id="sin-datos" class="alert alert-warning d-none">
          No hay datos para mostrar.
        </div>

        {/* ================= TABLA =================
            Columnas:
            - ID / Cliente:
                Muestra un "chip" clickeable con el ID que lleva a /detalle/:id
                y un badge con el nombre del cliente.
            - Modelo:
                Nombre de la impresora/modelo atendido.
            - Estado:
                Estado actual del ticket (columna oculta en xs).
            - Fecha presupuesto:
                Cu√°ndo se gener√≥ presupuesto (oculta en pantallas chicas).
            - Fecha lista:
                Fecha en la que se marc√≥ "Lista" (oculta en pantallas chicas).
            - Tardanza (d√≠as):
                Diferencia entre inicio y listo en d√≠as (tabular-nums para alinear).
            - ¬øReparada?:
                ‚úÖ si est√° lista / reparada, o "‚Äî".
         */}
        <div class="table-responsive">
          <table class="table table-sm table-striped table-hover table-compact align-middle mb-0">
            <thead class="table-light">
              <tr>
                <th class="col-id">ID / Cliente</th>
                <th style="width: 20%;">Modelo</th>
                <th class="d-none d-sm-table-cell" style="width:12%;">Estado</th>
                <th class="col-date d-none d-md-table-cell" style="width:12%;">Fecha presupuesto</th>
                <th class="col-date d-none d-md-table-cell" style="width:12%;">Fecha lista</th>
                <th class="col-num text-end" style="width:10%;">Tardanza (d√≠as)</th>
                <th class="col-check text-center" style="width:8%;">¬øReparada?</th>
              </tr>
            </thead>

            {/* <tbody> vac√≠o al render SSR.
                El script JS va a generar <tr> din√°micos despu√©s del fetch. */}
            <tbody id="tbody"></tbody>
          </table>
        </div>

        {/* ================= FOOTER =================
            Pie con el total global reparado por este t√©cnico.
            Se actualiza una vez que llega la data.
        */}
        <footer id="footer" class="mt-3 pt-3 border-top small">
          <strong>Pie de p√°gina:</strong>
          &nbsp;Total de <em>impresoras</em> reparadas por <code>{tecnicoLocal}</code>:
          <strong id="total-reparadas"> 0</strong>
        </footer>
      </div>
    </div>
  </div>

  {/* ================= ESTILOS LOCALES =================
      - Ajustes visuales de tabla compacta
      - Chips de ID/cliente
      - Columnas tabulares (alineaci√≥n num√©rica prolija)
  */}
  <style is:inline>
    /* C√≥digo en gris clarito tipo monoespaciado para el alias del t√©cnico */
    code {
      background:#f6f8fa;
      padding:.1rem .35rem;
      border-radius:.25rem;
    }

    .badge {
      padding:.35rem .6rem;
    }

    /* Tabla m√°s apretada visualmente */
    .table-compact :is(th,td) {
      padding:.55rem .7rem;
      vertical-align: middle;
    }

    .table thead th {
      font-weight:600;
      white-space: nowrap;
    }

    .col-id   { white-space:nowrap; width:1%; }
    .col-date { font-variant-numeric: tabular-nums; white-space:nowrap; }
    .col-num  { font-variant-numeric: tabular-nums; }
    .col-check{ width:6rem; text-align:center; }

    /* Celda ID / Cliente: mostramos ID del ticket + badge con cliente */
    .id-cell { white-space: nowrap; }

    .id-chip {
      font-variant-numeric: tabular-nums;
      margin-right: .35rem;
    }

    .cliente-badge {
      font-size: .75rem;
      border: 1px solid rgba(0,0,0,.08);
      background:#f8f9fa;
      color:#333;
    }

    /* Contenedor flexible que en desktop va horizontal,
       y en mobile (max-width:768px) se apila vertical */
    .id-wrap {
      gap:.35rem;
      display:inline-flex;
      align-items:center;
    }

    @media (max-width: 768px) {
      .id-wrap {
        flex-direction: column;
        align-items: flex-start;
        gap:.25rem;
      }
    }
  </style>

  {/* ================= SCRIPT CLIENTE =================
      Este script:
      - Lee el "tecnicoLocal" embeddeado en data-tecnico (para no exponer el email entero).
      - Define funci√≥n cargar():
          ‚Üí hace fetch a /api/estadisticas-tecnico?tecnico=<alias>&all=true
          ‚Üí parsea JSON
          ‚Üí rellena la tabla y badges
      - Conecta cargar() a:
          ‚Ä¢ DOMContentLoaded
          ‚Ä¢ bot√≥n "Actualizar"
          ‚Ä¢ cambio del <input type="month">
        (Aunque hoy el mes todav√≠a no se manda al backend, esto ya queda listo.)
  */}
  <script is:inline data-tecnico={tecnicoLocal}>
    (function () {
      // Alias del t√©cnico (ej. "juan.perez"), para pasarlo al endpoint
      const tecnico = (document.currentScript?.dataset?.tecnico || '').toString();

      // Funci√≥n principal: pide datos al backend y repinta la UI
      async function cargar() {
        try {
          // Endpoint de backend:
          // /api/estadisticas-tecnico
          //
          // Par√°metros:
          //   tecnico=<alias>   ‚Üí qui√©n soy
          //   all=true          ‚Üí pedir todo (no filtra por mes todav√≠a)
          //
          // FUTURO:
          // se podr√≠a mandar tambi√©n period=YYYY-MM obtenido del <input type="month">
          const url = `/api/estadisticas-tecnico?tecnico=${encodeURIComponent(tecnico)}&all=true`;

          const res = await fetch(url);
          if (!res.ok) throw new Error('Error consultando estad√≠sticas del t√©cnico');

          const data = await res.json();

          // Referencias a nodos que vamos a actualizar
          const $tbody = document.getElementById('tbody');
          const $sin = document.getElementById('sin-datos');
          const $badge = document.getElementById('badge-reparadas');
          const $totalFooter = document.getElementById('total-reparadas');

          // Limpiamos tbody antes de repintar
          $tbody.innerHTML = '';

          // Si no hay items, mostramos alerta y seteamos contadores en 0
          if (!data.items || !data.items.length) {
            $sin.classList.remove('d-none');
            $badge.textContent = '0 reparadas';
            $totalFooter.textContent = ' 0';
            return;
          } else {
            $sin.classList.add('d-none');
          }

          // Por cada ticket del t√©cnico, creamos una fila <tr>
          data.items.forEach((r) => {
            const tr = document.createElement('tr');

            // Info defensiva y formateo m√≠nimo:
            const cliente = (r.cliente || '‚Äî').toString();
            // Si tardanza_dias no viene num√©rico, mostramos '‚Äî'
            const tardanza = (typeof r.tardanza_dias === 'number') ? r.tardanza_dias : '‚Äî';

            tr.innerHTML = `
              <td class="id-cell">
                <div class="id-wrap">
                  <a
                    class="id-chip fw-semibold text-decoration-none"
                    href="/detalle/${r.id}"
                    title="Ver ticket ${r.id}"
                  >
                    ${r.id}
                  </a>
                  <span
                    class="badge bg-light text-dark cliente-badge"
                    title="Cliente"
                  >
                    ${cliente}
                  </span>
                </div>
              </td>

              <td>${r.modelo}</td>
              <td class="d-none d-sm-table-cell">${r.estado}</td>
              <td class="d-none d-md-table-cell">${r.fecha_presupuesto || '‚Äî'}</td>
              <td class="d-none d-md-table-cell">${r.fecha_lista || '‚Äî'}</td>
              <td class="text-end">${tardanza}</td>
              <td class="text-center">${r.reparada ? '‚úÖ' : '‚Äî'}</td>
            `;

            $tbody.appendChild(tr);
          });

          // Actualizamos contador global de reparadas
          const totalRep = data.totalImpresorasReparadas || 0;
          $badge.textContent = totalRep + ' reparada' + (totalRep === 1 ? '' : 's');
          $totalFooter.textContent = ' ' + totalRep;
        } catch (e) {
          console.error(e);
          // En caso de error inesperado en fetch/parsing,
          // mostramos el alert "sin datos".
          document.getElementById('sin-datos').classList.remove('d-none');
        }
      }

      // Eventos de UI que disparan recarga:
      // - Bot√≥n "Actualizar"
      document.getElementById('btn-actualizar')?.addEventListener('click', cargar);

      // - Cambio de mes. (Hoy no se usa el valor, pero lo dejamos listo.)
      document.getElementById('mes')?.addEventListener('change', cargar);

      // - Primera carga al abrir la p√°gina
      window.addEventListener('DOMContentLoaded', cargar);
    })();
  </script>
</BasePrivateLayout>
