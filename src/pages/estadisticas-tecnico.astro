---
/**
 * Página: estadisticas-tecnico.astro
 * Muestra las estadísticas del técnico logueado (basadas en /api/estadisticas-tecnico).
 * - Requiere sesión: si no hay email en locals → redirige a /no-autorizado.
 * - Toma el local-part del email (antes de @) como identificador del técnico.
 * - Renderiza tabla con items (id, modelo, estado, fecha, reparada).
 * - Badge y pie indican total de impresoras reparadas.
 * - Selector de mes visible (UI), aunque el fetch usa all=true (histórico).
 */
import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// ⚠️ Requiere sesión (si no hay email, redirige)
const perfil = (Astro.locals as any)?.perfil || {};
const email: string | undefined = perfil?.email || (Astro.locals as any)?.user?.email;
if (!email) {
  return Astro.redirect('/no-autorizado');
}
// local-part del email en minúsculas → técnico
const tecnicoLocal = String(email).split('@')[0].toLowerCase();

// Valor inicial para el <input type="month"> (solo visual)
const now = new Date();
const yyyy = now.getFullYear();
const mm = String(now.getMonth() + 1).padStart(2, '0');
const defaultMonth = `${yyyy}-${mm}`;
---

<BasePrivateLayout>
  <div class="container mt-4" style="max-width: 980px;">
    <!-- Encabezado con selector de mes y botón actualizar -->
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3 mb-3">
      <h1 class="h5 m-0">Mis estadísticas (técnico)</h1>

      <div class="d-flex align-items-center gap-2 flex-wrap">
        <label for="mes" class="form-label m-0">Mes</label>
        <input id="mes" type="month" class="form-control" style="min-width: 180px;" value={defaultMonth} />
        <button id="btn-actualizar" class="btn btn-primary">Actualizar</button>
      </div>
    </div>

    <!-- Tarjeta contenedora de la tabla/estado -->
    <div class="card shadow-sm">
      <div class="card-body">
        <div class="d-flex align-items-center justify-content-between">
          <h2 class="h6 text-muted mb-3">Técnico: <code>{tecnicoLocal}</code></h2>
          <!-- Badge total reparadas (se actualiza por JS) -->
          <div id="badge-reparadas" class="badge bg-success-subtle text-success border border-success-subtle" style="font-size:.9rem;">
            Cargando…
          </div>
        </div>

        <!-- Mensaje sin datos (lo muestra JS si la API responde vacío) -->
        <div id="sin-datos" class="alert alert-warning d-none">
          No hay datos para mostrar.
        </div>

        <!-- Tabla de resultados -->
        <div class="table-responsive">
          <table class="table table-sm align-middle">
            <thead>
              <tr>
                <th>ID</th>
                <th>Modelo</th>
                <th>Estado</th>
                <th>Fecha</th>
                <th class="text-center">¿Reparada?</th>
              </tr>
            </thead>
            <tbody id="tbody"></tbody>
          </table>
        </div>

        <!-- Pie con total de impresoras reparadas -->
        <footer id="footer" class="mt-3 pt-3 border-top small">
          <strong>Pie de página:</strong>
          &nbsp;Total de <em>impresoras</em> reparadas por <code>{tecnicoLocal}</code>:
          <strong id="total-reparadas"> 0</strong>
        </footer>
      </div>
    </div>
  </div>

  <!-- Estilos mínimos para código/badges -->
  <style is:inline>
    code { background:#f6f8fa; padding:.1rem .35rem; border-radius:.25rem; }
    .badge { padding:.4rem .6rem; }
  </style>

  <!--
    Script inline:
    - Lee el técnico desde data-atributo (evita problemas de TS con variables del scope).
    - Llama a /api/estadisticas-tecnico?tecnico=:localPart&all=true
    - Pinta filas en la tabla, actualiza badge y pie.
    - El selector de mes/botón “Actualizar” simplemente re-dispara la carga (hoy no filtra por mes).
  -->
  <script
    is:inline
    data-tecnico={tecnicoLocal}
  >
    (function () {
      // Técnico recibido desde el atributo data-tecnico
      const tecnico = (document.currentScript?.dataset?.tecnico || '').toString();

      async function cargar() {
        try {
          // Histórico completo (all=true). Si querés filtrar por mes, podés extender la API.
          const url = `/api/estadisticas-tecnico?tecnico=${encodeURIComponent(tecnico)}&all=true`;
          const res = await fetch(url);
          if (!res.ok) throw new Error('Error consultando estadísticas del técnico');
          const data = await res.json();

          const $tbody = document.getElementById('tbody');
          const $sin = document.getElementById('sin-datos');
          const $badge = document.getElementById('badge-reparadas');
          const $totalFooter = document.getElementById('total-reparadas');

          $tbody.innerHTML = '';

          // Sin datos → mostrar alerta y resetear contadores
          if (!data.items || !data.items.length) {
            $sin.classList.remove('d-none');
            $badge.textContent = '0 reparadas';
            $totalFooter.textContent = ' 0';
            return;
          } else {
            $sin.classList.add('d-none');
          }

          // Render de filas
          data.items.forEach((r) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><a href="/detalle/${r.id}" title="Ver ticket ${r.id}">${r.id}</a></td>
              <td>${r.modelo}</td>
              <td>${r.estado}</td>
              <td>${r.fecha || '—'}</td>
              <td class="text-center">${r.reparada ? '✅' : '—'}</td>
            `;
            $tbody.appendChild(tr);
          });

          // Totales / badge
          const totalRep = data.totalImpresorasReparadas || 0;
          $badge.textContent = totalRep + ' reparada' + (totalRep === 1 ? '' : 's');
          $totalFooter.textContent = ' ' + totalRep;
        } catch (e) {
          console.error(e);
          document.getElementById('sin-datos').classList.remove('d-none');
        }
      }

      // Controles: hoy actúan como “refrescar”
      document.getElementById('btn-actualizar')?.addEventListener('click', cargar);
      document.getElementById('mes')?.addEventListener('change', cargar);
      window.addEventListener('DOMContentLoaded', cargar);
    })();
  </script>
</BasePrivateLayout>
