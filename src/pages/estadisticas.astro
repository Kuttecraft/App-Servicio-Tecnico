---
/**
 * P√°gina de estad√≠sticas generales (solo ADMIN)
 *
 * üß† ¬øQu√© hace esta vista?
 * - Dashboard "macro" para administradores.
 * - Permite ver un resumen de tickets ingresados en un mes dado,
 *   agrupados por:
 *     ‚Ä¢ Modelo (qu√© impresoras entran m√°s),
 *     ‚Ä¢ Estado (en qu√© etapa est√°n),
 *     ‚Ä¢ T√©cnico (qui√©n toc√≥ m√°s equipos).
 *
 * - Para cada agrupaci√≥n:
 *   ‚ñ∏ Muestra un gr√°fico de torta (Chart.js).
 *   ‚ñ∏ Muestra una tabla con TOP categor√≠as (label, cantidad, %).
 *   ‚ñ∏ Muestra listas clickeables de IDs (links a /detalle/:id),
 *     agrupadas por ese mismo criterio, con el nombre del cliente.
 *
 * üìÖ Filtro de fecha:
 * - El admin elige el mes con un <input type="month"> (YYYY-MM).
 * - Separamos a√±o y mes y hacemos fetch a /api/estadisticas?year=YYYY&month=M&group=...
 *   (IMPORTANTE: el backend espera month num√©rico sin cero a la izquierda en la query actual).
 *
 * üß© Filtro "Agrupar por":
 * - Control <select id="group"> con valores "modelo" | "estado" | "tecnico".
 * - Eso impacta:
 *    ‚Ä¢ texto del t√≠tulo,
 *    ‚Ä¢ colores de las porciones de la torta,
 *    ‚Ä¢ tabla (nombre de la primera columna),
 *    ‚Ä¢ qu√© bloque de IDs se muestra al final.
 *
 * üîê Seguridad:
 * - Antes de renderizar, chequeamos Astro.locals.perfil.
 * - Si el usuario NO es admin => redirigimos a /no-autorizado.
 *   Esto evita que t√©cnicos o gente sin rol entren manualmente a /estadisticas.
 *
 * üé® UI:
 * - Card centrada (max-width ~980px).
 * - Gr√°fico en formato 1x1 responsive.
 * - Tabla y paneles de IDs con chips estilizados.
 * - Paleta de colores definida en el cliente para estados y un fallback
 *   circular para otros grupos.
 *
 * üì¶ Datos esperados del backend (/api/estadisticas):
 * {
 *   total: number, // total de tickets del mes
 *   items: [
 *     {
 *       label: "PK3 MK8" | "Lista" | "juan", // depende de group
 *       count: 7,
 *       porcentaje: 43.75
 *     },
 *     ...
 *   ],
 *
 *   // Mapas para renderizar los paneles de IDs:
 *   // { [estado]: [{id, cliente}, ...] }
 *   idsByEstado?:  Record<string, Array<{id:number, cliente:string}>>,
 *   // { [modelo]: [{id, cliente}, ...] }
 *   idsByModelo?:  Record<string, Array<{id:number, cliente:string}>>,
 *   // { [tecnico]: [{id, cliente}, ...] }
 *   idsByTecnico?: Record<string, Array<{id:number, cliente:string}>>
 * }
 *
 * üìù Nota de mantenimiento:
 * - Si el backend cambia el nombre de campos o agrega m√°s metadata (ej.
 *   tiempos promedio, montos, etc.), basta con extender la tabla y/o
 *   los paneles de IDs. El resto de la estructura ya es modular.
 */

import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// üîí S√≥lo admin: validamos rol desde Astro.locals.perfil
const perfil = (Astro.locals as any).perfil;
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);

// Si NO es admin => sacamos de ac√° directamente
if (!isAdmin) {
  return Astro.redirect('/no-autorizado');
}

// üìÖ Mes por defecto para el input[type=month] en el header
const now = new Date();
const yyyy = now.getFullYear();
const mm = String(now.getMonth() + 1).padStart(2, '0');
const defaultMonth = `${yyyy}-${mm}`;
---

<BasePrivateLayout>
  <div class="container mt-4" style="max-width: 980px;">
    {/* ================= HEADER / CONTROLES =================
        - T√≠tulo "Estad√≠sticas"
        - Selector de mes (YYYY-MM)
        - Selector "agrupar por"
        - Bot√≥n Actualizar que dispara el fetch
    */}
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3 mb-3">
      <h1 class="h4 m-0">Estad√≠sticas</h1>

      <div class="d-flex align-items-center gap-2 flex-wrap">
        <label for="mes" class="form-label m-0">Mes</label>
        <input
          id="mes"
          type="month"
          class="form-control"
          style="min-width: 180px;"
          value={defaultMonth}
        />

        <label for="group" class="form-label m-0">Agrupar por</label>
        <select id="group" class="form-select" style="min-width: 180px;">
          <option value="modelo" selected>Modelo</option>
          <option value="estado">Estado</option>
          <option value="tecnico">T√©cnico</option>
        </select>

        <button id="btn-actualizar" class="btn btn-primary">Actualizar</button>
      </div>
    </div>

    {/* ================= CARD PRINCIPAL =================
        Toda la informaci√≥n entra en esta card:
        - T√≠tulo contextual del gr√°fico
        - Gr√°fico (torta)
        - Panel resumen + tabla TOP
        - Mensaje "sin datos"
        - Listas de IDs agrupadas por categor√≠a
    */}
    <div class="card shadow-sm">
      <div class="card-body">
        {/* T√≠tulo arriba del gr√°fico.
           Ej: "Distribuci√≥n por modelo (%)" */}
        <h2 class="h6 text-muted mb-3">
          Distribuci√≥n por <span id="chartTitle">modelo</span> (%)
        </h2>

        {/* Lienzo del gr√°fico (Chart.js lo va a pintar sobre #chartModelos)
           ratio 1x1 para que escale de forma cuadrada y linda */}
        <div class="ratio ratio-1x1" style="max-width: 560px; margin: 0 auto;">
          <canvas id="chartModelos"></canvas>
        </div>

        {/* PANEL INFO: resumen del total y tabla de desglose
           - #resumen ‚Üí "Total de ingresos del mes: X"
           - #tabla ‚Üí tabla TOP N (se oculta si no hay datos)
        */}
        <div id="panel-info" class="mt-4">
          <div id="resumen" class="small text-muted"></div>

          <div
            id="tabla"
            class="table-responsive mt-2"
            style="display:none;"
          >
            <table class="table table-sm">
              <thead>
                <tr>
                  {/* El texto de esta cabecera cambia:
                      "Modelo" | "Estado" | "T√©cnico"
                      seg√∫n lo elegido en el <select> */}
                  <th id="thLabel">Modelo</th>

                  <th class="text-end">Cantidad</th>
                  <th class="text-end">Porcentaje</th>
                </tr>
              </thead>
              <tbody id="tbody"></tbody>
            </table>
          </div>
        </div>

        {/* Aviso amarillo si no hay resultados para el filtro elegido */}
        <div id="sin-datos" class="alert alert-warning mt-3 d-none">
          No hay datos para el mes seleccionado.
        </div>

        {/* BLOQUES DE IDs:
           Mostramos listas de chips con (ID + cliente)
           agrupadas por estado / modelo / t√©cnico.
           S√≥lo se muestra el bloque relacionado con el "group"
           activo en ese momento.

           Cada chip es un <a> que te lleva directo al detalle de ese ticket.
        */}

        {/* IDs agrupados por ESTADO
            (ej. "Prueba": [#12 Cliente X] [#31 Cliente Y] ... ) */}
        <div id="ids-estado-wrap" class="mt-4 d-none">
          <h3 class="h6 mb-2">ID de las m√°quinas seg√∫n estado</h3>
          <div id="ids-estado-list" class="small"></div>
        </div>

        {/* IDs agrupados por MODELO */}
        <div id="ids-modelo-wrap" class="mt-4 d-none">
          <h3 class="h6 mb-2">ID de las m√°quinas seg√∫n modelo</h3>
          <div id="ids-modelo-list" class="small"></div>
        </div>

        {/* IDs agrupados por T√âCNICO */}
        <div id="ids-tecnico-wrap" class="mt-4 d-none">
          <h3 class="h6 mb-2">ID de las m√°quinas seg√∫n t√©cnico</h3>
          <div id="ids-tecnico-list" class="small"></div>
        </div>
      </div>
    </div>
  </div>

  {/* ================= ESTILOS LOCALES =================
      - Chips/links clickeables de IDs con cliente al costado.
      - Badge del cliente al lado del ID.
      - Puntito de color (.dot) para estados en la tabla y en las listas.
  */}
  <style is:inline>
    /* Chips de ID (aparecen en los paneles de IDs al final) */
    #ids-estado-list .id-chip,
    #ids-modelo-list .id-chip,
    #ids-tecnico-list .id-chip {
      text-decoration: none;
      border: 1px solid rgba(0,0,0,.08);
      padding: 0 .35rem;
      border-radius: .35rem;
      margin-right: .35rem;
      display: inline-flex;
      align-items: center;
      gap: .35rem;
      white-space: nowrap;
    }
    #ids-estado-list .id-chip:hover,
    #ids-modelo-list .id-chip:hover,
    #ids-tecnico-list .id-chip:hover {
      background: rgba(13,110,253,.08);
    }

    /* Badge chiquita con el nombre del cliente
       que se pega al lado del ID */
    .cliente-badge {
      font-size: .72rem;
      border: 1px solid rgba(0,0,0,.08);
      background: #f8f9fa;
      color: #333;
      padding: .05rem .35rem;
      border-radius: .35rem;
    }

    /* Puntito de color delante del label del estado
       (en tabla y en bloques de IDs agrupados por estado).
       El color se setea con style.background en JS. */
    .dot {
      display: inline-block;
      width: .75rem;
      height: .75rem;
      border-radius: 50%;
      margin-right: .35rem;
      vertical-align: middle;
      border: 1px solid rgba(0,0,0,.08);
    }
  </style>

  {/* ================= DEPENDENCIA EXTERNA =================
      Chart.js (UMD) se carga en <script defer>,
      y luego abajo lo usamos v√≠a window.Chart
  */}
  <script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"
    defer
  ></script>

  {/* ================= L√ìGICA DEL DASHBOARD (CLIENT-SIDE) =================
      Este IIFE controla toda la interacci√≥n:
      - Lee mes y tipo de agrupaci√≥n del DOM.
      - Construye la URL /api/estadisticas?year=YYYY&month=M&group=... .
      - Pinta el gr√°fico de torta con Chart.js.
      - Llena la tabla con cantidades y porcentajes.
      - Muestra/oculta "sin datos".
      - Renderiza las listas de IDs agrupadas (estado/modelo/t√©cnico).
      - Est√° pensado para ser idempotente: si cambi√°s de agrupaci√≥n,
        destruye el gr√°fico anterior y crea uno nuevo.
  */}
  <script is:inline>
    (function () {
      // üé® Mapa de colores por ESTADO espec√≠fico.
      //    Esto permite que "Lista", "Prueba", etc. mantengan siempre el mismo color.
      //    Si un estado no est√° en este objeto => fallback gris.
      var ESTADO_COLORS = {
        "Nuevo": "#E2FFF6",
        "Retirar": "#FFE9CC",
        "Presupuestar": "#FFD9D9",
        "Enviar presupuesto": "#E9FCEC",
        "P. Enviado": "#D9EBFF",
        "Reparaci√≥n": "#FFFDE1",
        "Prueba": "#E3DBFF",
        "Lista": "#FFE3DC",
        "Entregada": "#E6F6FF",
        "Feedback Enviado": "#FAE4F6",
        "Archivada": "#EDEDED",
        "No realizada": "#FFF1D9"
      };

      // üé® Paleta fallback para "modelo" y "t√©cnico".
      //    Vamos ciclando estos colores cuando no hay color fijo (p. ej. 10 modelos distintos).
      var FALLBACK = [
        "#cfe8ff","#ffe0cc","#e4ffd6","#f8d5ff","#ffefbf",
        "#d7f3ff","#ffd7e0","#e0f7f1","#e6e6e6","#dcd0ff",
        "#ffdcdc","#d0ffd0"
      ];

      // Dado un array de labels y el tipo de agrupaci√≥n,
      // devolvemos un array de colores de fondo para el gr√°fico/tags.
      function colorsFor(labels, group) {
        if (group === 'estado') {
          return labels.map(function (l) {
            return ESTADO_COLORS[l] || '#e9ecef';
          });
        }
        return labels.map(function (_l, i) {
          return FALLBACK[i % FALLBACK.length];
        });
      }

      // ----- Referencias a nodos del DOM -----
      var chart; // instancia Chart.js actual

      var $mes = document.getElementById('mes');
      var $group = document.getElementById('group');
      var $btn = document.getElementById('btn-actualizar');

      var $resumen = document.getElementById('resumen');
      var $tbody = document.getElementById('tbody');
      var $tabla = document.getElementById('tabla');
      var $sinDatos = document.getElementById('sin-datos');

      var $chartTitle = document.getElementById('chartTitle');
      var $thLabel = document.getElementById('thLabel');

      // contenedores de IDs por categor√≠a
      var $idsEstadoWrap = document.getElementById('ids-estado-wrap');
      var $idsEstadoList = document.getElementById('ids-estado-list');

      var $idsModeloWrap = document.getElementById('ids-modelo-wrap');
      var $idsModeloList = document.getElementById('ids-modelo-list');

      var $idsTecnicoWrap = document.getElementById('ids-tecnico-wrap');
      var $idsTecnicoList = document.getElementById('ids-tecnico-list');

      // Llama al endpoint de backend con (a√±o, mes, group)
      function fetchDatos(year, month, group) {
        // IMPORTANTE:
        // month se manda como n√∫mero "crudo" (sin padding),
        // ej. octubre => "10", enero => "1"
        // y el backend /api/estadisticas lo interpreta as√≠.
        var url =
          '/api/estadisticas?year=' + year +
          '&month=' + month +
          '&group=' + encodeURIComponent(group);

        return fetch(url).then(function (res) {
          if (!res.ok) throw new Error('Error consultando estad√≠sticas');
          return res.json();
        });
      }

      // Renderiza la tabla (TOP categor√≠as del mes)
      // - items: array [{label,count,porcentaje}, ...]
      // - total: cantidad total de equipos ese mes
      // - campoLabel: texto para la 1er col ("Estado"|"Modelo"|"T√©cnico")
      // - group: el tipo de agrupaci√≥n actual (para aplicar colorcito .dot en caso de estado)
      function renderTabla(items, total, campoLabel, group) {
        $tbody.innerHTML = '';
        $thLabel.textContent = campoLabel;

        var labels = items.map(function (i) { return i.label; });
        var bg = colorsFor(labels, group);

        items.forEach(function (row, idx) {
          var tr = document.createElement('tr');

          // Columna de la etiqueta (estado/modelo/t√©cnico)
          var tdLabel = document.createElement('td');

          // Si estamos agrupando por estado, le ponemos un puntito de color a la izquierda.
          if (group === 'estado') {
            var dot = document.createElement('span');
            dot.className = 'dot';
            dot.style.background = bg[idx];
            tdLabel.appendChild(dot);
          }

          tdLabel.appendChild(document.createTextNode(row.label));

          // Cantidad absoluta
          var tdCount = document.createElement('td');
          tdCount.className = 'text-end';
          tdCount.textContent = String(row.count);

          // Porcentaje dentro del total
          var tdPct = document.createElement('td');
          tdPct.className = 'text-end';
          var pct = (row.porcentaje || 0).toFixed(1) + '%';
          tdPct.textContent = pct;

          tr.appendChild(tdLabel);
          tr.appendChild(tdCount);
          tr.appendChild(tdPct);
          $tbody.appendChild(tr);
        });

        $resumen.textContent = 'Total de ingresos del mes: ' + total;
        $tabla.style.display = items.length ? '' : 'none';
      }

      // Crea o actualiza el gr√°fico de torta
      function renderChart(labels, data, group) {
        var ctx = document.getElementById('chartModelos');

        // Si ya hab√≠a un gr√°fico de una corrida anterior, lo destruimos
        if (chart) chart.destroy();

        var bg = colorsFor(labels, group);

        chart = new window.Chart(ctx, {
          type: 'pie',
          data: {
            labels: labels,
            datasets: [{
              data: data,
              backgroundColor: bg,
              borderColor: '#ffffff',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'bottom' },
              tooltip: {
                callbacks: {
                  // Tooltip custom:
                  // "Modelo X: 4 (16.7%)"
                  label: function (context) {
                    var label = context.label || '';
                    var value = context.parsed || 0;
                    var sum = context.dataset.data.reduce(function (a, b) { return a + b; }, 0);
                    var pct = sum ? (value / sum) * 100 : 0;
                    return label + ': ' + value + ' (' + pct.toFixed(1) + '%)';
                  }
                }
              }
            }
          }
        });
      }

      // Limpia los bloques de IDs (estado/modelo/t√©cnico) antes de renderizar de nuevo
      function clearIdsPanels() {
        $idsEstadoWrap.classList.add('d-none');
        $idsEstadoList.innerHTML = '';
        $idsModeloWrap.classList.add('d-none');
        $idsModeloList.innerHTML = '';
        $idsTecnicoWrap.classList.add('d-none');
        $idsTecnicoList.innerHTML = '';
      }

      /**
       * Renderiza una lista de IDs agrupados.
       *
       * @param $wrap   Contenedor del bloque (se le quita d-none si hay contenido)
       * @param $list   Nodo interno donde metemos el HTML
       * @param data    Objeto tipo { clave: [ {id,cliente}, ... ], ... }
       * @param withDotsByEstado boolean ‚Üí si true, antepone un .dot con color del estado
       *
       * Estructura generada:
       *  <div class="mb-1">
       *    <span class="dot" style="background:#..."></span>
       *    <strong>Estado XYZ:</strong>
       *    <a class="id-chip" href="/detalle/123">
       *      123 <span class="cliente-badge">Cliente A</span>
       *    </a>
       *    <a class="id-chip" href="/detalle/456">456 ...</a>
       *    ...
       *  </div>
       */
      function renderIdsList($wrap, $list, data, withDotsByEstado) {
        if (!data || Object.keys(data).length === 0) {
          $wrap.classList.add('d-none');
          $list.innerHTML = '';
          return;
        }

        // Ordenamos las claves alfab√©ticamente para mantener consistencia visual
        var keys = Object.keys(data).sort(function (a, b) {
          return a.localeCompare(b, 'es', { sensitivity: 'base' });
        });

        $list.innerHTML = '';

        keys.forEach(function (k) {
          var arr = data[k] || [];
          var line = document.createElement('div');
          line.className = 'mb-1';

          // Si estamos agrupando por estado y queremos color,
          // metemos el puntito pintado con ESTADO_COLORS[k]
          if (withDotsByEstado) {
            var dot = document.createElement('span');
            dot.className = 'dot';
            dot.style.background = (ESTADO_COLORS[k] || '#e9ecef');
            line.appendChild(dot);
          }

          var strong = document.createElement('strong');
          strong.textContent = k + ': ';
          line.appendChild(strong);

          if (!arr.length) {
            // Sin tickets en esa categor√≠a
            line.appendChild(document.createTextNode('‚Äî'));
          } else {
            arr.forEach(function (obj, idx) {
              // El backend nos puede mandar:
              //  {id, cliente} o directamente un n√∫mero.
              var id = (typeof obj === 'number') ? obj : obj.id;
              var cli = (typeof obj === 'number') ? '' : (obj.cliente || '');

              var a = document.createElement('a');
              a.href = '/detalle/' + id;
              a.className = 'id-chip';
              a.title = 'Ver ticket ' + id;
              a.textContent = String(id);

              // Badge con cliente (si viene)
              if (cli) {
                var badge = document.createElement('span');
                badge.className = 'cliente-badge';
                badge.textContent = cli;
                a.appendChild(badge);
              }

              line.appendChild(a);

              // Separador visual m√≠nimo entre chips
              if (idx < arr.length - 1) {
                line.appendChild(document.createTextNode(' '));
              }
            });
          }

          $list.appendChild(line);
        });

        $wrap.classList.remove('d-none');
      }

      // Funci√≥n principal: lee filtros actuales, trae data y refresca todo
      async function cargar() {
        try {
          // Ej. "2025-10" ‚Üí ["2025","10"]
          var val = $mes.value;
          var parts = val.split('-');
          var year = parseInt(parts[0], 10);
          var month = parseInt(parts[1], 10); // ‚ö† sin pad, tal como espera la API

          // "modelo" | "estado" | "tecnico"
          var group = $group.value;

          // Texto din√°mico para headers/labels
          var campoLabel = (
            group === 'estado'
              ? 'Estado'
              : (group === 'tecnico' ? 'T√©cnico' : 'Modelo')
          );
          $chartTitle.textContent = group;
          $thLabel.textContent = campoLabel;

          // Llamamos al backend
          var resp = await fetchDatos(year, month, group);
          var total = resp.total || 0;
          var items = resp.items || [];

          // Listas de IDs (cada una puede venir nula si el backend no la mand√≥)
          var idsByEstado = resp.idsByEstado || null;
          var idsByModelo = resp.idsByModelo || null;
          var idsByTecnico = resp.idsByTecnico || null;

          // Caso sin datos: mostramos alerta amarilla, apagamos tabla/gr√°fico/paneles
          if (!total) {
            $sinDatos.classList.remove('d-none');
            renderTabla([], 0, campoLabel, group);
            if (chart) chart.destroy();
            clearIdsPanels();
            return;
          } else {
            $sinDatos.classList.add('d-none');
          }

          // Ordenamos √≠tems descendente por cantidad para el TOP
          items.sort(function (a, b) { return b.count - a.count; });

          var labels = items.map(function (i) { return i.label; });
          var data = items.map(function (i) { return i.count; });

          // Refrescamos tabla + gr√°fico
          renderTabla(items, total, campoLabel, group);
          renderChart(labels, data, group);

          // Refrescamos paneles de IDs. S√≥lo se muestra el que corresponde al group activo.
          clearIdsPanels();

          if (group === 'estado') {
            renderIdsList($idsEstadoWrap, $idsEstadoList, idsByEstado, true);
          } else if (group === 'modelo') {
            renderIdsList($idsModeloWrap, $idsModeloList, idsByModelo, false);
          } else {
            renderIdsList($idsTecnicoWrap, $idsTecnicoList, idsByTecnico, false);
          }
        } catch (e) {
          console.error(e);
          // Error duro (fetch fall√≥, JSON inv√°lido, etc.)
          $sinDatos.classList.remove('d-none');
          clearIdsPanels();
        }
      }

      // Eventos de UI:
      // - Bot√≥n "Actualizar"
      document.getElementById('btn-actualizar').addEventListener('click', cargar);

      // - Cambiar mes relanza "cargar"
      document.getElementById('mes').addEventListener('change', cargar);

      // - Cambiar agrupaci√≥n relanza "cargar"
      document.getElementById('group').addEventListener('change', cargar);

      // Primera carga al entrar a la p√°gina
      window.addEventListener('DOMContentLoaded', cargar);
    })();
  </script>
</BasePrivateLayout>
