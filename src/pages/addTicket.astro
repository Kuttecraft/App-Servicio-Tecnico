---
/**
 * Pantalla para crear un nuevo ticket.
 *
 * üß© ¬øQu√© resuelve esta vista?
 * - Renderiza un formulario completo para dar de alta un ticket (cliente, equipo, estado, etc.)
 * - Sube im√°genes (principal / ticket / extra) con previews
 * - Calcula autom√°ticamente el pr√≥ximo n√∫mero de ticket disponible
 * - Permite prefijar campos v√≠a querystring (para crear desde un link pre-rellenado)
 *
 * üü¢ Flujo normal:
 *   1. Entr√°s a /addTicket (posiblemente con query params como cliente=..., modelo=..., etc.)
 *   2. Complet√°s el form.
 *   3. Al enviar, hace POST a /api/crearTicket (con multipart/form-data).
 *   4. /api/crearTicket redirige de vuelta ac√° con ?ok=1 si sali√≥ bien.
 *
 * üîÑ ¬øQu√© hace ok=1?
 *   - Si ok=1, significa "ticket creado con √©xito".
 *   - Mostramos una badge verde "Ticket creado ‚úÖ".
 *   - Limpiamos los campos iniciales para que puedas cargar OTRO ticket
 *     r√°pido sin tener que borrar a mano.
 *
 * ‚è≠ N√∫mero de ticket sugerido:
 *   - Antes de renderizar la p√°gina en el server llamamos a /api/proximoTicket
 *   - Ese endpoint consulta la DB, busca el ticket m√°s alto y propone el siguiente.
 *   - Usamos eso como valor por defecto del input "Ticket".
 *
 * üñ® Selecci√≥n de impresora:
 *   - Hay un <select> con modelos predefinidos y una opci√≥n "OTRA__ESPECIFICAR".
 *   - Si el usuario elige "OTRA__ESPECIFICAR" o escribe algo en el campo de texto,
 *     se muestra un input libre (modeloOtro).
 *   - Antes de enviar el formulario nos aseguramos de que si complet√≥ un modelo libre,
 *     el <select> quede en "OTRA__ESPECIFICAR", para que el backend entienda bien.
 *
 * üñº Im√°genes:
 *   - Hay 3 slots posibles:
 *        - Principal (obligatoria en la pr√°ctica visualmente)
 *        - Ticket (foto en proceso / fallas)
 *        - Extra (finish / m√°quina lista)
 *   - Cada tile tiene preview con <img> + bot√≥n "Subir imagen".
 *   - Los tiles "ticket" y "extra" aparecen reci√©n cuando el usuario los habilita,
 *     manejado despu√©s por /scripts/form-crear-ticket-multi.js.
 *
 * üîê Seguridad:
 *   - Esta vista asume que ya est√°s dentro de layout privado (<BasePrivateLayout />)
 *     y que el middleware ya valid√≥ sesi√≥n/rol antes de permitirte llegar ac√°.
 */

import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// -------------------------------------------------------------
// 1) Leemos la URL actual para poder obtener query params
//    y tambi√©n saber si venimos de un alta exitosa (ok=1).
// -------------------------------------------------------------
const url = new URL(Astro.request.url);

// Si ?ok=1 => se considera "alta exitosa"
const ok = url.searchParams.get('ok') === '1';

// -------------------------------------------------------------
// 2) Precarga inicial de cada campo del formulario
//    Regla: si ok=1 => limpiamos (string vac√≠o) para empezar un nuevo alta en blanco.
//          si ok!=1 => usamos lo que vino en querystring (si hay).
// -------------------------------------------------------------
const cliente     = ok ? '' : (url.searchParams.get('cliente')     || '');
const dniCuit     = ok ? '' : (url.searchParams.get('dniCuit')     || '');
const correo      = ok ? '' : (url.searchParams.get('correo')      || '');
const whatsapp    = ok ? '' : (url.searchParams.get('whatsapp')    || '');
const modelo      = ok ? '' : (url.searchParams.get('modelo')      || '');
const modeloOtro  = ok ? '' : (url.searchParams.get('modeloOtro')  || '');
const numeroSerie = ok ? '' : (url.searchParams.get('numeroSerie') || '');
const boquilla    = ok ? '' : (url.searchParams.get('boquilla')    || '');
const tecnico     = ok ? '' : (url.searchParams.get('tecnico')     || '');
const comentarios = ok ? '' : (url.searchParams.get('comentarios') || '');

// -------------------------------------------------------------
// 3) Estados v√°lidos del ticket
//    - Se usa para el <select name="estado">
//    - Tambi√©n usamos esto para la precarga de estado.
// -------------------------------------------------------------
const estados = [
  "Nuevo", "Retirar", "Presupuestar", "Enviar presupuesto", "P. Enviado",
  "Reparaci√≥n", "Prueba", "Lista", "Entregada",
  "Feedback Enviado", "Archivada", "No realizada"
];

// Si ok=1, siempre arrancamos desde "Nuevo".
// Si NO ok=1, dejamos que la URL fuerce el estado inicial (?estado=XXX) o usamos "Nuevo".
const estado = ok ? estados[0] : (url.searchParams.get('estado') || estados[0]);

// -------------------------------------------------------------
// 4) Opciones de boquilla
//    - Lista t√≠pica de tama√±os de nozzle frecuentes en impresoras 3D.
//    - Se usa para <select name="boquilla">.
// -------------------------------------------------------------
const boquillas = ["0.2mm","0.3mm","0.4mm","0.5mm","0.6mm","0.8mm","1mm"];

// -------------------------------------------------------------
// 5) Lista de modelos de impresoras m√°s comunes
//    + marcador especial "OTRA__ESPECIFICAR"
//    - Esta lista arma el <select id="select-impresora">.
//    - Si el usuario elige "OTRA__ESPECIFICAR", mostramos el input libre "modeloOtro".
// -------------------------------------------------------------
const impresoras = [
  "PK3 MK8",
  "PK3++ MK8",
  "PK3++ EXT MK8",
  "PK3 BMG",
  "PK3++ BMG",
  "PK3++ EXT BMG",
  "Artillery",
  "Bambulab",
  "Creality",
  "Hellbot",
  "OTRA__ESPECIFICAR"
];

// -------------------------------------------------------------
// 6) Obtenemos el pr√≥ximo n√∫mero sugerido de ticket desde la API
//    /api/proximoTicket:
//    - Busca el ticket existente m√°s alto y devuelve +1.
//    - Si algo falla, fallback = 1.
// -------------------------------------------------------------
let ticketSugerido = 1;
try {
  // Astro.site es la base URL del sitio. Si no est√° configurado, usamos localhost.
  let base = Astro.site?.toString() || 'http://localhost:4321';
  const res = await fetch(`${base}/api/proximoTicket`);
  if (res.ok) {
    const data = await res.json();
    ticketSugerido = data.sugerido;
  }
} catch {
  // Ante error de red / fetch interno, fallback hardcodeado.
  ticketSugerido = 1;
}

// -------------------------------------------------------------
// 7) Valor inicial del campo "ticket" en el form
//    Regla:
//      - Si ok=1 => usamos directamente el sugerido (nuevo alta limpia)
//      - Si NO ok=1 => si la URL trae ?ticket=..., usamos eso,
//        sino usamos sugerido.
// -------------------------------------------------------------
const ticket = ok
  ? ticketSugerido
  : (url.searchParams.get('ticket') || ticketSugerido);

// -------------------------------------------------------------
// 8) Campo "cobrado"
//    - Hoy el backend lo ignora, pero lo seguimos mandando
//      por compatibilidad con l√≥gica vieja.
// -------------------------------------------------------------
const cobrado = "No";
---

<BasePrivateLayout>
  <style>
    /* ==========================
       Estilos visuales espec√≠ficos de esta vista
       ========================== */

    /* Wrapper flex para las tarjetas de im√°genes */
    .image-tiles {
      display: flex;
      gap: 1.25rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    /* Tarjeta contenedora de cada imagen (principal / ticket / extra) */
    .image-tile {
      position: relative;
      width: 280px;
      height: 280px;
      border-radius: 16px;
      overflow: hidden;
      background: #f1f3f5;
      border: 1px solid rgba(0,0,0,.075);
      box-shadow: 0 2px 8px rgba(0,0,0,.06);

      display: flex;
      align-items: center;
      justify-content: center;

      transition: box-shadow .2s ease;
    }

    .image-tile:hover {
      box-shadow: 0 4px 16px rgba(0,0,0,.08);
    }

    /* Imagen dentro de la tile (preview). object-fit:cover para que llene el recuadro */
    .image-tile img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    /* Bot√≥n "Subir imagen" flotante dentro de la tile */
    .upload-btn {
      cursor: pointer;
    }

    /* Tile de "agregar otra imagen": gris con un "+" gigante
       que se habilita para abrir slots ticket/extra */
    .add-tile {
      background: #e9ecef;
      color: #6c757d;
      cursor: pointer;
      display: none;
    }

    .add-tile .plus {
      font-size: 64px;
      line-height: 1;
      user-select: none;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
    }

    /* Input file oculto, lo dispara el <label> estilo bot√≥n */
    .hidden-input {
      display: none;
    }

    /* Cuando ya hay imagen cargada en la tile:
       - ocultamos el bot√≥n de upload (queda solo la preview)
       - .has-image tambi√©n permite CSS personalizado si quer√©s
    */
    .image-tile.has-image .upload-btn {
      display: none;
    }
    .image-tile.has-image {
      cursor: pointer;
    }
  </style>

  <div class="container mt-5">
    <div class="d-flex align-items-center justify-content-between">
      <h2 class="mb-4">
        <i class="bi bi-ticket-perforated me-2"></i>
        Crear nuevo ticket
      </h2>

      {/* Si venimos de una creaci√≥n exitosa (?ok=1): badge verde a la derecha */}
      {ok && (
        <span class="badge bg-success-subtle text-success border border-success-subtle">
          Ticket creado ‚úÖ
        </span>
      )}
    </div>

    {/*
      ======================================================
      FORMULARIO PRINCIPAL
      - method="post" action="/api/crearTicket"
      - enctype="multipart/form-data" para permitir subir im√°genes
      - Cada input tiene name=... que el backend /api/crearTicket espera.
      - El form incluye todas las secciones:
          * Datos del cliente
          * Datos del equipo
          * Estado inicial
          * Comentarios
          * Im√°genes
      ======================================================
    */}
    <form
      method="post"
      action="/api/crearTicket"
      enctype="multipart/form-data"
      class="row g-3"
      id="form-crear-ticket"
    >
      {/* ===========================
         BLOQUE: Cliente + Documento
         =========================== */}
      <div class="col-md-6">
        <label class="form-label">Cliente</label>
        <input
          type="text"
          class="form-control"
          name="cliente"
          value={cliente}
          required
        />
      </div>

      <div class="col-md-6">
        <label class="form-label">DNI/CUIT</label>
        <input
          type="text"
          class="form-control"
          name="dniCuit"
          id="dniCuit"
          value={dniCuit}
        />
      </div>

      {/* ===========================
         BLOQUE: Contacto + Ticket
         =========================== */}
      <div class="col-md-6">
        <label class="form-label">Correo</label>
        <input
          type="email"
          class="form-control"
          name="correo"
          value={correo}
        />
      </div>

      <div class="col-md-6">
        <label class="form-label">Ticket</label>
        {/* Valor inicial = ticket calculado m√°s arriba */}
        <input
          type="number"
          class="form-control"
          name="ticket"
          value={ticket}
          min={1}
          required
        />
      </div>

      <div class="col-md-6">
        <label class="form-label">WhatsApp</label>
        <input
          type="text"
          class="form-control"
          name="whatsapp"
          value={whatsapp}
        />
      </div>

      {/* ======================================================
         BLOQUE: Impresora
         - <select> con modelos frecuentes.
         - Si seleccion√°s "OTRA__ESPECIFICAR", aparece
           un input de texto libre "modeloOtro".
         - El script inline de m√°s abajo se encarga de:
           - mostrar/ocultar el campo extra
           - sincronizar el select con lo que escribe el usuario
             (si escribe algo en "modeloOtro", forzamos el select a OTRA__ESPECIFICAR).
         ====================================================== */}
      <div class="col-md-6">
        <label class="form-label">Impresora / M√°quina</label>

        <select
          class="form-select"
          name="modelo"
          id="select-impresora"
        >
          {/* Opci√≥n vac√≠a "Seleccionar‚Ä¶" al inicio */}
          <option
            value=""
            selected={!modelo}
          >
            Seleccionar‚Ä¶
          </option>

          {impresoras.map((m) => (
            <option
              value={m}
              selected={m === modelo}
            >
              {m === 'OTRA__ESPECIFICAR' ? 'Otra (especificar)' : m}
            </option>
          ))}
        </select>

        {/* Campo libre que se muestra s√≥lo si:
            - Ya hab√≠a modeloOtro (precarga), o
            - El <select> est√° en OTRA__ESPECIFICAR.
           El script inline se encarga de togglear la clase d-none y del required.
        */}
        <input
          type="text"
          name="modeloOtro"
          id="input-modelo-otro"
          value={modeloOtro}
          placeholder='Escribe el modelo (p. ej. "Ender 3 V3 KE")'
          autocomplete="off"
          class:list={{
            'form-control': true,
            'mt-2': true,
            'd-none': modelo !== 'OTRA__ESPECIFICAR' && !modeloOtro
          }}
        />
      </div>

      {/* ===========================
         BLOQUE: Serie y Boquilla
         =========================== */}
      <div class="col-md-6">
        <label class="form-label">N¬∞ de Serie</label>
        <input
          type="text"
          class="form-control"
          name="numeroSerie"
          value={numeroSerie}
        />
      </div>

      <div class="col-md-6">
        <label class="form-label">Tama√±o de boquilla</label>
        <select
          class="form-select"
          name="boquilla"
        >
          <option
            value=""
            selected={!boquilla}
          >
            Seleccionar‚Ä¶
          </option>

          {boquillas.map((b) => (
            <option
              value={b}
              selected={b === boquilla}
            >
              {b}
            </option>
          ))}
        </select>
      </div>

      {/* ===========================
         BLOQUE: T√©cnico asignado
         - Campo libre de texto.
         - /api/crearTicket luego intenta resolver/crear el t√©cnico en DB.
         =========================== */}
      <div class="col-md-6">
        <label class="form-label">T√©cnico</label>
        <input
          type="text"
          class="form-control"
          name="tecnico"
          value={tecnico}
        />
      </div>

      {/* ===========================
         BLOQUE: Estado inicial
         - Combo <select> con todos los estados de tickets.
         =========================== */}
      <div class="col-md-6">
        <label class="form-label">Estado</label>
        <select
          class="form-select"
          name="estado"
          required
        >
          {estados.map((op) => (
            <option
              value={op}
              selected={op === estado}
            >
              {op}
            </option>
          ))}
        </select>
      </div>

      {/* ===========================
         Campo oculto "cobrado"
         - Hist√≥ricamente usado por backend. Lo seguimos mandando.
         =========================== */}
      <input
        type="hidden"
        name="cobrado"
        value={cobrado}
      />

      {/* ===========================
         BLOQUE: Comentarios
         - Descripci√≥n del problema, notas iniciales, etc.
         =========================== */}
      <div class="col-12">
        <label class="form-label">Comentarios</label>
        <textarea
          class="form-control"
          name="comentarios"
        >{comentarios}</textarea>
      </div>

      {/* ======================================================
         BLOQUE: Im√°genes
         - 3 tiles m√°ximas:
             1) Principal (siempre visible)
             2) Ticket (aparece cuando el user la "agrega")
             3) Extra  (aparece en una segunda etapa)
         - Cada tile contiene:
             - <img> preview (arranca oculto con class d-none)
             - label con bot√≥n "Subir imagen" que dispara <input type=file />
         - Los tiles "add-tile" (+) se usan para ir habilitando las otras
           im√°genes opcionales. La l√≥gica / preview real
           la maneja /scripts/form-crear-ticket-multi.js (abajo).
         ====================================================== */}
      <div class="col-12">
        <label class="form-label d-block text-center mb-2">Im√°genes</label>

        <div class="image-tiles">
          {/* --- Tile PRINCIPAL --- */}
          <div class="image-tile" id="tile-principal">
            <img
              id="previewPrincipal"
              src="/logo.webp"
              alt="Vista previa principal"
              class="d-none"
            />

            <label
              class="btn btn-outline-primary upload-btn position-absolute"
              style="bottom:12px; left:50%; transform:translateX(-50%);"
            >
              <i class="bi bi-upload me-2"></i> Subir imagen
              <input
                type="file"
                class="hidden-input"
                name="imagenArchivo"
                id="imagenArchivo"
                accept="image/*"
              />
            </label>
          </div>

          {/* --- Bot√≥n "+" para habilitar tile de imagen "ticket" --- */}
          <div
            class="image-tile add-tile"
            id="tile-plus-ticket"
            title="A√±adir imagen de ticket"
          >
            <div class="plus">+</div>
          </div>

          {/* --- Tile de IMAGEN TICKET (inicialmente oculto con d-none) --- */}
          <div class="image-tile d-none" id="tile-ticket">
            <img
              id="previewTicket"
              src="/logo.webp"
              alt="Vista previa ticket"
              class="d-none"
            />

            <label
              class="btn btn-outline-primary upload-btn position-absolute"
              style="bottom:12px; left:50%; transform:translateX(-50%);"
            >
              <i class="bi bi-upload me-2"></i> Subir imagen ticket
              <input
                type="file"
                class="hidden-input"
                name="imagenTicketArchivo"
                id="imagenTicketArchivo"
                accept="image/*"
              />
            </label>
          </div>

          {/* --- Bot√≥n "+" para habilitar tile de imagen "extra"
                (arranca oculto hasta que se usa la "ticket") --- */}
          <div
            class="image-tile add-tile d-none"
            id="tile-plus-extra"
            title="A√±adir imagen extra"
          >
            <div class="plus">+</div>
          </div>

          {/* --- Tile de IMAGEN EXTRA (inicialmente oculto con d-none) --- */}
          <div class="image-tile d-none" id="tile-extra">
            <img
              id="previewExtra"
              src="/logo.webp"
              alt="Vista previa extra"
              class="d-none"
            />

            <label
              class="btn btn-outline-primary upload-btn position-absolute"
              style="bottom:12px; left:50%; transform:translateX(-50%);"
            >
              <i class="bi bi-upload me-2"></i> Subir imagen extra
              <input
                type="file"
                class="hidden-input"
                name="imagenExtraArchivo"
                id="imagenExtraArchivo"
                accept="image/*"
              />
            </label>
          </div>
        </div>
      </div>

      {/* ===========================
         SUBMIT
         =========================== */}
      <div class="col-12 text-center">
        <button
          type="submit"
          class="btn btn-primary mt-3 px-5"
        >
          Crear ticket
        </button>
      </div>
    </form>
  </div>

  {/* ======================================================
     SCRIPT #1 (inline):
     - Se ejecuta cuando la p√°gina carga.
     - Si venimos con ok=1 (creaci√≥n exitosa), entonces:
       - Oculta las previews (para no mostrar im√°genes viejas)
       - Pone el foco en el campo "Cliente"
     ====================================================== */}
  <script is:inline>
    (function() {
      const usp = new URLSearchParams(location.search);
      if (usp.get('ok') === '1') {
        // Ocultamos las im√°genes previas anteriores (si las hubiera)
        const p1 = document.getElementById('previewPrincipal');
        const p2 = document.getElementById('previewTicket');
        const p3 = document.getElementById('previewExtra');
        if (p1) p1.classList.add('d-none');
        if (p2) p2.classList.add('d-none');
        if (p3) p3.classList.add('d-none');

        // Colocamos focus autom√°tico en el primer campo l√≥gico del form
        const first = document.querySelector('input[name="cliente"]');
        if (first) first.focus();
      }
    })();
  </script>

  {/* ======================================================
     SCRIPT #2 (inline):
     - Maneja la l√≥gica "OTRA__ESPECIFICAR"
       entre el <select id="select-impresora"> y el input texto #input-modelo-otro
     - Funcionalidades:
       * Mostrar/ocultar el input adicional seg√∫n la opci√≥n elegida.
       * Si el usuario empieza a tipear en el campo libre,
         forzamos el <select> a "OTRA__ESPECIFICAR".
       * En submit, garantizamos coherencia entre ambos campos.
     ====================================================== */}
  <script is:inline>
    (function(){
      var form = document.getElementById('form-crear-ticket');
      var sel  = document.getElementById('select-impresora');
      var otro = document.getElementById('input-modelo-otro');
      if (!form || !sel || !otro) return;

      // sync():
      // - Calcula si debe mostrarse el input "otro".
      // - Hace required ese input s√≥lo si se est√° usando.
      function sync(){
        var hasTyped = (otro.value || '').trim().length > 0;
        var isOtherOption = sel.value === 'OTRA__ESPECIFICAR';
        var show = isOtherOption || hasTyped;
        otro.classList.toggle('d-none', !show);
        otro.required = show;
      }

      // Si el usuario escribe en "otro",
      // pero el select NO est√° en OTRA__ESPECIFICAR,
      // lo pasamos autom√°ticamente a esa opci√≥n para que el backend lo entienda.
      otro.addEventListener('input', function(){
        var hasTyped = (otro.value || '').trim().length > 0;
        if (hasTyped && sel.value !== 'OTRA__ESPECIFICAR') {
          sel.value = 'OTRA__ESPECIFICAR';
        }
        sync();
      });

      // Cambiar la opci√≥n del select tambi√©n puede ocultar/mostrar el input libre
      sel.addEventListener('change', sync);

      // Antes de enviar el form:
      // - Si el usuario escribi√≥ un modelo libre, forzamos el select a OTRA__ESPECIFICAR.
      // - Llamamos sync() por √∫ltima vez.
      form.addEventListener('submit', function(){
        var hasTyped = (otro.value || '').trim().length > 0;
        if (hasTyped && sel.value !== 'OTRA__ESPECIFICAR') sel.value = 'OTRA__ESPECIFICAR';
        sync();
      });

      // Estado inicial al cargar la p√°gina
      sync();
    })();
  </script>

  {/* ======================================================
     SCRIPT #3 (inline):
     - Formato en vivo del DNI/CUIT.
     - blur ‚Üí normaliza el string a un formato lindo:
         * 7 d√≠gitos  => X.XXX.XXX
         * 8 d√≠gitos  => XX.XXX.XXX
         * 11 d√≠gitos => XX-XXXXXXXX-X
     - input ‚Üí limpia caracteres raros mientras tipean.
     ====================================================== */}
  <script is:inline>
    (function(){
      var el = document.getElementById('dniCuit');
      if (!el) return;

      // formatDniCuit:
      // Aplica formato "lindo" seg√∫n largo del n√∫mero detectado.
      function formatDniCuit(value){
        var digits = String(value||'').replace(/\D+/g,'');
        if (digits.length === 7)
          return digits[0] + '.' + digits.slice(1,4) + '.' + digits.slice(4);
        if (digits.length === 8)
          return digits.slice(0,2) + '.' + digits.slice(2,5) + '.' + digits.slice(5);
        if (digits.length === 11)
          return digits.slice(0,2) + '-' + digits.slice(2,10) + '-' + digits.slice(10);
        // Cualquier otro largo: lo dejamos como est√°
        return value;
      }

      // Al salir del campo, intentamos embellecerlo
      el.addEventListener('blur', function(){
        el.value = formatDniCuit(el.value);
      });

      // Mientras escribe:
      // - Permitimos solo d√≠gitos, puntos y guiones
      // - Evitamos duplicar "."
      // - Evitamos duplicar "-"
      el.addEventListener('input', function(){
        el.value = el.value
          .replace(/[^\d.\-]/g,'')
          .replace(/\.{2,}/g,'.')
          .replace(/\-{2,}/g,'-');
      });
    })();
  </script>

  {/* ======================================================
     SCRIPTS EXTERNOS
     - browser-image-compression:
         üí° Lib para comprimir im√°genes en el navegador antes de subirlas,
            evita subir JPG/PNG gigantes sin necesidad.
     - /scripts/form-crear-ticket-multi.js:
         L√≥gica que:
           * Maneja previews en cada tile.
           * Muestra/oculta los tiles "ticket" y "extra" progresivamente.
           * Se asegura que al seleccionar una imagen se actualice el preview.
     ====================================================== */}
  <script
    src="https://unpkg.com/browser-image-compression@latest/dist/browser-image-compression.js"
    defer
  ></script>
  <script
    src="/scripts/form-crear-ticket-multi.js?v=2"
    defer
  ></script>
</BasePrivateLayout>
