---
/**
 * Pantalla para crear un nuevo ticket.
 * - Lee query params para precargar campos (y los limpia si ok=1).
 * - Pide al backend el próximo número sugerido de ticket.
 * - Ofrece selector de impresora con opción "Otra (especificar)" sincronizada.
 * - Carga imágenes (principal, ticket, extra) con previews (lo maneja script externo).
 */
import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// URL actual para leer parámetros de precarga
const url = new URL(Astro.request.url);
const ok = url.searchParams.get('ok') === '1'; // si venimos de crear OK → limpiar form

// Precargas condicionadas por ok
const cliente     = ok ? '' : (url.searchParams.get('cliente')     || '');
const dniCuit     = ok ? '' : (url.searchParams.get('dniCuit')     || '');
const correo      = ok ? '' : (url.searchParams.get('correo')      || '');
const whatsapp    = ok ? '' : (url.searchParams.get('whatsapp')    || '');
const modelo      = ok ? '' : (url.searchParams.get('modelo')      || '');
const modeloOtro  = ok ? '' : (url.searchParams.get('modeloOtro')  || '');
const numeroSerie = ok ? '' : (url.searchParams.get('numeroSerie') || '');
const boquilla    = ok ? '' : (url.searchParams.get('boquilla')    || '');
const tecnico     = ok ? '' : (url.searchParams.get('tecnico')     || '');
const comentarios = ok ? '' : (url.searchParams.get('comentarios') || '');

// Estados válidos del ticket
const estados = [
  "Nuevo", "Retirar", "Presupuestar", "Enviar presupuesto", "P. Enviado",
  "Reparación", "Prueba", "Lista", "Entregada",
  "Feedback Enviado", "Archivada", "No realizada"
];
// Si ok → default a "Nuevo", si no, leemos de querystring
const estado = ok ? estados[0] : (url.searchParams.get('estado') || estados[0]);

// Opciones de boquilla predefinidas
const boquillas = ["0.2mm","0.3mm","0.4mm","0.5mm","0.6mm","0.8mm","1mm"];

// Opciones de impresoras frecuentes + "Otra (especificar)"
const impresoras = [
  "PK3 MK8",
  "PK3++ MK8",
  "PK3++ EXT MK8",
  "PK3 BMG",
  "PK3++ BMG",
  "PK3++ EXT BMG",
  "Artillery",
  "Bambulab",
  "Creality",
  "Hellbot",
  "OTRA__ESPECIFICAR"
];

// Consultamos al backend el próximo número sugerido de ticket
let ticketSugerido = 1;
try {
  let base = Astro.site?.toString() || 'http://localhost:4321';
  const res = await fetch(`${base}/api/proximoTicket`);
  if (res.ok) {
    const data = await res.json();
    ticketSugerido = data.sugerido;
  }
} catch {
  ticketSugerido = 1;
}
// Si ok → usamos el sugerido, sino respetamos querystring con fallback al sugerido
const ticket = ok ? ticketSugerido : (url.searchParams.get('ticket') || ticketSugerido);

// El backend hoy no usa este hidden, pero se envía por compatibilidad
const cobrado = "No";
---

<BasePrivateLayout>
  <style>
    /* Grilla de tiles para imágenes */
    .image-tiles { display: flex; gap: 1.25rem; justify-content: center; flex-wrap: wrap; }
    .image-tile {
      position: relative; width: 280px; height: 280px; border-radius: 16px;
      overflow: hidden; background: #f1f3f5; border: 1px solid rgba(0,0,0,.075);
      box-shadow: 0 2px 8px rgba(0,0,0,.06);
      display: flex; align-items: center; justify-content: center;
      transition: box-shadow .2s ease;
    }
    .image-tile:hover { box-shadow: 0 4px 16px rgba(0,0,0,.08); }
    .image-tile img { width: 100%; height: 100%; object-fit: cover; display: block; }

    .upload-btn { cursor: pointer; }
    .add-tile { background: #e9ecef; color: #6c757d; cursor: pointer; display: none; }
    .add-tile .plus { font-size: 64px; line-height: 1; user-select: none; display: flex; align-items: center; justify-content: center; width: 100%; height: 100%; }
    .hidden-input { display: none; }

    .image-tile.has-image .upload-btn { display: none; }
    .image-tile.has-image { cursor: pointer; }
  </style>

  <div class="container mt-5">
    <div class="d-flex align-items-center justify-content-between">
      <h2 class="mb-4"><i class="bi bi-ticket-perforated me-2"></i> Crear nuevo ticket</h2>

      {ok && (
        <span class="badge bg-success-subtle text-success border border-success-subtle">
          Ticket creado ✅
        </span>
      )}
    </div>

    <!-- Form principal: envía al endpoint /api/crearTicket -->
    <form method="post" action="/api/crearTicket" enctype="multipart/form-data" class="row g-3" id="form-crear-ticket">
      <!-- Cliente y documento -->
      <div class="col-md-6">
        <label class="form-label">Cliente</label>
        <input type="text" class="form-control" name="cliente" value={cliente} required />
      </div>
      <div class="col-md-6">
        <label class="form-label">DNI/CUIT</label>
        <input type="text" class="form-control" name="dniCuit" id="dniCuit" value={dniCuit} />
      </div>

      <!-- Contacto y ticket -->
      <div class="col-md-6">
        <label class="form-label">Correo</label>
        <input type="email" class="form-control" name="correo" value={correo} />
      </div>

      <div class="col-md-6">
        <label class="form-label">Ticket</label>
        <input type="number" class="form-control" name="ticket" value={ticket} min={1} required />
      </div>

      <div class="col-md-6">
        <label class="form-label">WhatsApp</label>
        <input type="text" class="form-control" name="whatsapp" value={whatsapp} />
      </div>

      <!-- Selector de impresora + “Otra (especificar)” con input extra sincronizado -->
      <div class="col-md-6">
        <label class="form-label">Impresora / Máquina</label>
        <select class="form-select" name="modelo" id="select-impresora">
          <option value="" selected={!modelo}>Seleccionar…</option>
          {impresoras.map((m) => (
            <option value={m} selected={m === modelo}>
              {m === 'OTRA__ESPECIFICAR' ? 'Otra (especificar)' : m}
            </option>
          ))}
        </select>
        <input
          type="text"
          name="modeloOtro"
          id="input-modelo-otro"
          value={modeloOtro}
          placeholder='Escribe el modelo (p. ej. "Ender 3 V3 KE")'
          autocomplete="off"
          class:list={{ 'form-control': true, 'mt-2': true, 'd-none': modelo !== 'OTRA__ESPECIFICAR' && !modeloOtro }}
        />
      </div>

      <!-- Serie y boquilla -->
      <div class="col-md-6">
        <label class="form-label">N° de Serie</label>
        <input type="text" class="form-control" name="numeroSerie" value={numeroSerie} />
      </div>

      <div class="col-md-6">
        <label class="form-label">Tamaño de boquilla</label>
        <select class="form-select" name="boquilla">
          <option value="" selected={!boquilla}>Seleccionar…</option>
          {boquillas.map((b) => (
            <option value={b} selected={b === boquilla}>{b}</option>
          ))}
        </select>
      </div>

      <!-- Técnico libre (el endpoint resolverá/creará técnico si no existe) -->
      <div class="col-md-6">
        <label class="form-label">Técnico</label>
        <input type="text" class="form-control" name="tecnico" value={tecnico} />
      </div>

      <!-- Estado inicial del ticket -->
      <div class="col-md-6">
        <label class="form-label">Estado</label>
        <select class="form-select" name="estado" required>
          {estados.map((op) => (
            <option value={op} selected={op === estado}>{op}</option>
          ))}
        </select>
      </div>

      <!-- Se envía por compat (el backend puede ignorarlo) -->
      <input type="hidden" name="cobrado" value={cobrado} />

      <!-- Comentarios -->
      <div class="col-12">
        <label class="form-label">Comentarios</label>
        <textarea class="form-control" name="comentarios">{comentarios}</textarea>
      </div>

      <!-- Imágenes: principal, ticket, extra (tiles con botón de upload y previews) -->
      <div class="col-12">
        <label class="form-label d-block text-center mb-2">Imágenes</label>
        <div class="image-tiles">
          <!-- Principal -->
          <div class="image-tile" id="tile-principal">
            <img id="previewPrincipal" src="/logo.webp" alt="Vista previa principal" class="d-none" />
            <label class="btn btn-outline-primary upload-btn position-absolute" style="bottom:12px; left:50%; transform:translateX(-50%);">
              <i class="bi bi-upload me-2"></i> Subir imagen
              <input type="file" class="hidden-input" name="imagenArchivo" id="imagenArchivo" accept="image/*" />
            </label>
          </div>

          <!-- Botón para sumar tile "ticket" -->
          <div class="image-tile add-tile" id="tile-plus-ticket" title="Añadir imagen de ticket">
            <div class="plus">+</div>
          </div>

          <!-- Ticket -->
          <div class="image-tile d-none" id="tile-ticket">
            <img id="previewTicket" src="/logo.webp" alt="Vista previa ticket" class="d-none" />
            <label class="btn btn-outline-primary upload-btn position-absolute" style="bottom:12px; left:50%; transform:translateX(-50%);">
              <i class="bi bi-upload me-2"></i> Subir imagen ticket
              <input type="file" class="hidden-input" name="imagenTicketArchivo" id="imagenTicketArchivo" accept="image/*" />
            </label>
          </div>

          <!-- Botón para sumar tile "extra" -->
          <div class="image-tile add-tile d-none" id="tile-plus-extra" title="Añadir imagen extra">
            <div class="plus">+</div>
          </div>

          <!-- Extra -->
          <div class="image-tile d-none" id="tile-extra">
            <img id="previewExtra" src="/logo.webp" alt="Vista previa extra" class="d-none" />
            <label class="btn btn-outline-primary upload-btn position-absolute" style="bottom:12px; left:50%; transform:translateX(-50%);">
              <i class="bi bi-upload me-2"></i> Subir imagen extra
              <input type="file" class="hidden-input" name="imagenExtraArchivo" id="imagenExtraArchivo" accept="image/*" />
            </label>
          </div>
        </div>
      </div>

      <!-- Submit -->
      <div class="col-12 text-center">
        <button type="submit" class="btn btn-primary mt-3 px-5">Crear ticket</button>
      </div>
    </form>
  </div>

  <!-- Al volver con ok=1: limpia previews y pone foco en Cliente -->
  <script is:inline>
    (function() {
      const usp = new URLSearchParams(location.search);
      if (usp.get('ok') === '1') {
        const p1 = document.getElementById('previewPrincipal');
        const p2 = document.getElementById('previewTicket');
        const p3 = document.getElementById('previewExtra');
        if (p1) p1.classList.add('d-none');
        if (p2) p2.classList.add('d-none');
        if (p3) p3.classList.add('d-none');
        const first = document.querySelector('input[name="cliente"]');
        if (first) first.focus();
      }
    })();
  </script>

  <!-- Toggle y sincronización del campo "Otra (especificar)" -->
  <script is:inline>
    (function(){
      var form = document.getElementById('form-crear-ticket');
      var sel  = document.getElementById('select-impresora');
      var otro = document.getElementById('input-modelo-otro');
      if (!form || !sel || !otro) return;

      function sync(){
        var hasTyped = (otro.value || '').trim().length > 0;
        var isOtherOption = sel.value === 'OTRA__ESPECIFICAR';
        var show = isOtherOption || hasTyped;
        otro.classList.toggle('d-none', !show);
        otro.required = show;
      }

      // Si el usuario escribe algo en "otro", forzamos el select = OTRA__ESPECIFICAR
      otro.addEventListener('input', function(){
        var hasTyped = (otro.value || '').trim().length > 0;
        if (hasTyped && sel.value !== 'OTRA__ESPECIFICAR') {
          sel.value = 'OTRA__ESPECIFICAR';
        }
        sync();
      });

      // Cambios en el select muestran/ocultan el input adicional
      sel.addEventListener('change', sync);

      // Antes de enviar, garantizamos coherencia de selección y campo otro
      form.addEventListener('submit', function(){
        var hasTyped = (otro.value || '').trim().length > 0;
        if (hasTyped && sel.value !== 'OTRA__ESPECIFICAR') sel.value = 'OTRA__ESPECIFICAR';
        sync();
      });

      // Estado inicial
      sync();
    })();
  </script>

  <!-- Autoformato DNI/CUIT (blur: aplica máscara; input: sanea caracteres) -->
  <script is:inline>
    (function(){
      var el = document.getElementById('dniCuit');
      if (!el) return;

      function formatDniCuit(value){
        var digits = String(value||'').replace(/\D+/g,'');
        if (digits.length === 7) return digits[0] + '.' + digits.slice(1,4) + '.' + digits.slice(4);
        if (digits.length === 8) return digits.slice(0,2) + '.' + digits.slice(2,5) + '.' + digits.slice(5);
        if (digits.length === 11) return digits.slice(0,2) + '-' + digits.slice(2,10) + '-' + digits.slice(10);
        return value;
      }
      el.addEventListener('blur', function(){ el.value = formatDniCuit(el.value); });
      el.addEventListener('input', function(){
        el.value = el.value.replace(/[^\d.\-]/g,'').replace(/\.{2,}/g,'.').replace(/\-{2,}/g,'-');
      });
    })();
  </script>

  <!-- Dependencias de compresión/preview y lógica de tiles (externo) -->
  <script src="https://unpkg.com/browser-image-compression@latest/dist/browser-image-compression.js" defer></script>
  <script src="/scripts/form-crear-ticket-multi.js?v=2" defer></script>
</BasePrivateLayout>
