---
/**
 * Dashboard listado de tickets con filtros (controlados desde el Topbar).
 * - Filtros por: id, ticket, estado, cliente, máquina (by + q).
 * - Paginación simple (server-side) con rango from/to.
 * - Joins “suaves” con cliente/impresoras y variantes con !inner según filtro.
 * - Renderiza tarjetas con <PrinterCard />.
 */
import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';
import PrinterCard from '../components/PrinterCard.astro';
import { supabase } from '../lib/supabase';

// =================== Filtros (provienen del Topbar via querystring) ===================
const by = Astro.url.searchParams.get('by') || 'id';     // campo por el que se filtra
const rawQ = Astro.url.searchParams.get('q') || '';      // valor crudo
const q = rawQ.trim();                                    // valor saneado

// =================== Paginación ===================
// Nota: itemsPerPage alto (500) para reducir cambios de página en catálogos medianos.
const pageParam = Astro.url.searchParams.get('page') || '1';
const currentPage = parseInt(pageParam);
const itemsPerPage = 500;
const from = (currentPage - 1) * itemsPerPage;
const to = from + itemsPerPage - 1;

// =================== SELECT base ===================
// join “aliasado” para que el objeto sea { impresora: { modelo }, cliente: { cliente, whatsapp } }
// Cuando el filtro exige presencia (by=cliente|maquina), se usa !inner en esa relación.
let selectStr = `
  id,
  ticket,
  estado,
  imagen,
  impresora:impresoras (modelo),
  cliente:cliente (cliente, whatsapp)
`;

// Si filtramos por cliente: forzamos inner join con cliente
if (by === 'cliente') {
  selectStr = `
    id,
    ticket,
    estado,
    imagen,
    impresora:impresoras (modelo),
    cliente:cliente!inner (cliente, whatsapp)
  `;
}

// Si filtramos por máquina: forzamos inner join con impresoras
if (by === 'maquina') {
  selectStr = `
    id,
    ticket,
    estado,
    imagen,
    impresora:impresoras!inner (modelo),
    cliente:cliente (cliente, whatsapp)
  `;
}

// Construcción de la query base
let query = supabase.from('tickets_mian').select(selectStr);

// =================== Aplicación de filtros ===================
if (q) {
  // Si q es numérico, lo usamos como número; sino null para “no coincide”
  const qNum = Number.isFinite(Number(q)) ? Number(q) : null;

  switch (by) {
    case 'id':
      // Búsqueda exacta por id (si no es numérico, forzamos un id imposible -1)
      query = qNum !== null ? query.eq('id', qNum) : query.eq('id', -1);
      break;

    case 'ticket':
      // Búsqueda exacta por número de ticket
      query = qNum !== null ? query.eq('ticket', qNum) : query.eq('ticket', -1);
      break;

    case 'estado':
      // Igualdad directa (se asume que la UI provee valores válidos)
      query = query.eq('estado', q);
      break;

    case 'cliente':
      // Búsqueda por “cliente.cliente” (nombre del cliente) con ilike
      // Requiere el !inner en el select para que la relación exista
      query = query.ilike('cliente.cliente', `%${q}%`);
      break;

    case 'maquina':
      // Búsqueda por “impresora.modelo”
      // Requiere el !inner en el select para que la relación exista
      query = query.ilike('impresora.modelo', `%${q}%`);
      break;

    default:
      // Sin filtro adicional
      break;
  }
}

// =================== Orden + rango (paginación) ===================
query = query.order('id', { ascending: false }).range(from, to);

// =================== Ejecución ===================
const { data, error } = await query;

// Blindaje: siempre devolver array para mapear en el template
const impresoras = Array.isArray(data) ? data : [];
if (error) console.error('Error supabase:', error, { by, q });
---

<BasePrivateLayout showFilters={true}>
  <div class="container mt-4">

    <!-- =================== Resultados =================== -->
    {Array.isArray(impresoras) && impresoras.length > 0 ? (
      <div class="row g-4">
        {impresoras.map((item: any) => (
          <div class="col-sm-6 col-md-4 col-lg-3">
            <PrinterCard
              id={item.id}
              ticket={item.ticket || 'Sin ticket'}
              cliente={item.cliente?.cliente || 'Desconocido'}
              maquina={item.impresora?.modelo || 'Desconocido'}
              estado={item.estado || 'Desconocido'}
              whatsapp={item.cliente?.whatsapp || 'No especificado'}
              imagen={item.imagen || null}
              onClickUrl={`/detalle/${item.id}`}
              onClickUrlEditar={`/editar/${item.id}`}
            />
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center">
        <p class="text-muted">{error ? 'Error al cargar resultados' : 'No hay resultados.'}</p>
      </div>
    )}

    <!-- =================== Navegación =================== -->
    <div class="d-flex justify-content-center mt-4 gap-2">
      {currentPage > 1 && (
        <a
          href={`?${new URLSearchParams({
            q,
            by,
            page: String(currentPage - 1)
          }).toString()}`}
          class="btn btn-outline-secondary"
        >
          Anterior
        </a>
      )}
      <span class="align-self-center">Página {currentPage}</span>
      {Array.isArray(impresoras) && impresoras.length === itemsPerPage && (
        <a
          href={`?${new URLSearchParams({
            q,
            by,
            page: String(currentPage + 1)
          }).toString()}`}
          class="btn btn-outline-secondary"
        >
          Siguiente
        </a>
      )}
    </div>

  </div>
</BasePrivateLayout>
