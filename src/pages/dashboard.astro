---
import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';
import PrinterCard from '../components/PrinterCard.astro';
import { supabase } from '../lib/supabase';

// Parámetros de filtro
const by = Astro.url.searchParams.get('by') || 'id'; // default algo concreto
const rawQ = Astro.url.searchParams.get('q') || '';
const q = rawQ.trim();

// Paginación
const pageParam = Astro.url.searchParams.get('page') || '1';
const currentPage = parseInt(pageParam);
const itemsPerPage = 500;
const from = (currentPage - 1) * itemsPerPage;
const to = from + itemsPerPage - 1;

// SELECT base (agregamos !inner SOLO cuando hace falta)
let selectStr = `
  id,
  ticket,
  estado,
  imagen,
  impresora:impresoras (modelo),
  cliente:cliente (cliente, whatsapp)
`;

if (by === 'cliente') {
  // inner join a cliente cuando filtramos por cliente.*
  selectStr = `
    id,
    ticket,
    estado,
    imagen,
    impresora:impresoras (modelo),
    cliente:cliente!inner (cliente, whatsapp)
  `;
}
if (by === 'maquina') {
  // inner join a impresoras cuando filtramos por impresora.*
  selectStr = `
    id,
    ticket,
    estado,
    imagen,
    impresora:impresoras!inner (modelo),
    cliente:cliente (cliente, whatsapp)
  `;
}

let query = supabase.from('tickets_mian').select(selectStr);

// Filtros
if (q) {
  const qNum = Number.isFinite(Number(q)) ? Number(q) : null;

  switch (by) {
    case 'id':
      query = qNum !== null ? query.eq('id', qNum) : query.eq('id', -1);
      break;
    case 'ticket':
      query = qNum !== null ? query.eq('ticket', qNum) : query.eq('ticket', -1);
      break;
    case 'estado':
      query = query.ilike('estado', `%${q}%`);
      break;
    case 'cliente':
      // ahora sí filtra porque tenemos !inner en el select
      query = query.ilike('cliente.cliente', `%${q}%`);
      break;
    case 'maquina':
      // idem: !inner en el select
      query = query.ilike('impresora.modelo', `%${q}%`);
      break;
    default:
      // nada
      break;
  }
}

// Orden + rango
query = query.order('id', { ascending: false }).range(from, to);

// Ejecutar
const { data: impresoras = [], error } = await query;
if (error) console.error('Error supabase:', error);
---

<BasePrivateLayout>
  <div class="container mt-4">

    <!-- Filtros -->
    <form method="get" class="d-flex flex-wrap gap-2 align-items-center mb-3">
      <input
        type="text"
        name="q"
        value={Astro.url.searchParams.get('q') || ''}
        placeholder="Buscar…"
        class="form-control"
        style="max-width: 320px;"
      />

      <select name="by" class="form-select" style="max-width: 200px;">
        <option value="id" selected={Astro.url.searchParams.get('by') === 'id' || !Astro.url.searchParams.get('by')}>ID</option>
        <option value="ticket" selected={Astro.url.searchParams.get('by') === 'ticket'}>Ticket</option>
        <option value="cliente" selected={Astro.url.searchParams.get('by') === 'cliente'}>Cliente</option>
        <option value="estado" selected={Astro.url.searchParams.get('by') === 'estado'}>Estado</option>
        <option value="maquina" selected={Astro.url.searchParams.get('by') === 'maquina'}>Máquina</option>
      </select>

      <button class="btn btn-primary" type="submit">Filtrar</button>
      <input type="hidden" name="page" value="1" />
      <a href="/dashboard" class="btn btn-outline-secondary">Limpiar</a>
    </form>

    {impresoras && impresoras.length > 0 ? (
      <div class="row g-4">
        {impresoras.map((item: any) => (
          <div class="col-sm-6 col-md-4 col-lg-3">
            <PrinterCard
              id={item.id}
              ticket={item.ticket || 'Sin ticket'}
              cliente={item.cliente?.cliente || 'Desconocido'}
              maquina={item.impresora?.modelo || 'Desconocido'}
              estado={item.estado || 'Desconocido'}
              whatsapp={item.cliente?.whatsapp || 'No especificado'}
              imagen={item.imagen || null}
              onClickUrl={`/detalle/${item.id}`}
              onClickUrlEditar={`/editar/${item.id}`}
            />
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center">
        <p class="text-muted">{error ? 'Error al cargar resultados' : 'No hay resultados.'}</p>
      </div>
    )}

    <!-- Navegación -->
    <div class="d-flex justify-content-center mt-4 gap-2">
      {currentPage > 1 && (
        <a
          href={`?${new URLSearchParams({
            q,
            by,
            page: String(currentPage - 1)
          }).toString()}`}
          class="btn btn-outline-secondary"
        >
          Anterior
        </a>
      )}
      <span class="align-self-center">Página {currentPage}</span>
      {impresoras.length === itemsPerPage && (
        <a
          href={`?${new URLSearchParams({
            q,
            by,
            page: String(currentPage + 1)
          }).toString()}`}
          class="btn btn-outline-secondary"
        >
          Siguiente
        </a>
      )}
    </div>

  </div>
</BasePrivateLayout>
