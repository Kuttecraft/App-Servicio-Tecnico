---
import Sidebar from '../components/Sidebar.astro';
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <title>Repuestos</title>
    <link rel="icon" href="/logo_icono.ico" sizes="any">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
    <style>
      /* Layout básico con sidebar */
      :root { --sidebar-w: 240px; }
      @media (min-width: 768px) { .page { margin-left: var(--sidebar-w); } }
      .page { padding: 24px; background:#f7f7f9; }
      .content { max-width: 1200px; margin: 0 auto; }

      /* Tabla con header sticky y columna ID “pegada” a la izquierda */
      .table-wrap { max-height: 520px; overflow: auto; border-top: 1px solid #dee2e6; }
      .table thead th { position: sticky; top: 0; background: #f8f9fa; z-index: 2; }
      .table tbody tr:hover td { background: #f5f7fb; }
      .table .col-id { position: sticky; left: 0; background: #fff; z-index: 3; }

      th, td { vertical-align: middle; }
      th.col-id, td.col-id { width: 90px; text-align: right; }
      th.col-acciones, td.col-acciones { width: 96px; text-align: right; }

      .th-id-toggle { cursor: pointer; user-select: none; white-space: nowrap; }
      .th-id-toggle i { opacity: .7; }

      /* Acciones por fila visibles solo al hacer hover */
      .actions { opacity: .0; transition: opacity .15s ease; white-space: nowrap; }
      tbody tr:hover .actions { opacity: 1; }
      .actions .btn { padding: .15rem .4rem; line-height: 1; }

      /* Toolbar de filtros */
      .toolbar { gap: .5rem; flex-wrap: wrap; }
      .toolbar .form-control, .toolbar .form-select { min-width: 220px; }

      /* Botonera del formulario (cambia color si está en modo edición) */
      #btnSubmit { background: #0d6efd; border-color: #0d6efd; }
      #btnCancel { display:none; }
      .editing #btnSubmit { background:#198754; border-color:#198754; }
      .editing #btnCancel { display:inline-block; }

      /* Estados de mensajes */
      #status { font-size: .9rem; }
      #status.ok { color: #198754; }
      #status.err { color: #dc3545; }
      #status.info { color: #6c757d; }
    </style>
  </head>
  <body>
    <Sidebar />
    <main class="page">
      <div class="content">
        <div class="d-flex align-items-center justify-content-between mb-3">
          <h1 class="h3 mb-0"><i class="bi bi-box-seam"></i> Repuestos</h1>
        </div>

        <!-- ====== Formulario de creación/edición ====== -->
        <div class="card mb-3" id="cardForm">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span id="formTitle">Crear repuesto</span>
            <small class="text-muted" id="formHint"></small>
          </div>
          <div class="card-body">
            <form id="repuestoForm" class="row g-3">
              <!-- Campo oculto para ID cuando se edita -->
              <input type="hidden" name="id" />
              <div class="col-12 col-md-6">
                <label class="form-label">Componente</label>
                <input required name="componente" type="text" class="form-control" />
              </div>
              <div class="col-6 col-md-3">
                <label class="form-label">Stock</label>
                <input name="stock" type="text" class="form-control" />
              </div>
              <div class="col-6 col-md-3">
                <label class="form-label">Categoría</label>
                <input name="categoria" type="text" class="form-control" />
              </div>
              <div class="col-6 col-md-3">
                <label class="form-label">Precio</label>
                <input name="precio" type="text" class="form-control" placeholder="$0" />
              </div>
              <div class="col-6 col-md-3">
                <label class="form-label">Activo</label>
                <select name="activo" class="form-select">
                  <option value="true">Sí</option>
                  <option value="false">No</option>
                </select>
              </div>
              <div class="col-12 d-flex gap-2 align-items-center">
                <button type="button" id="btnSubmit"  class="btn btn-primary">
                  <i class="bi bi-check2-circle"></i> <span id="btnSubmitText">Crear</span>
                </button>
                <button type="button" id="btnCancel" class="btn btn-outline-secondary">
                  <i class="bi bi-x-circle"></i> Cancelar edición
                </button>
                <span id="status" class="ms-2"></span>
              </div>
            </form>
          </div>
        </div>

        <!-- ====== Toolbar de búsqueda/filtros (debajo del formulario) ====== -->
        <div class="card mb-4">
          <div class="card-body toolbar">
            <div class="row g-2">
              <!-- Buscador: input + botón X propio -->
              <div class="col-12">
                <div class="input-group">
                  <span class="input-group-text" title="Buscar por nombre de componente">
                    <i class="bi bi-search"></i>
                  </span>
                  <!-- type="text" para evitar la X nativa de los inputs search -->
                  <input id="q" type="text" class="form-control" placeholder="Buscar componente..." aria-label="Buscar componente" />
                  <!-- La X propia se muestra solo si hay texto -->
                  <button id="btnClearQ" class="btn btn-outline-secondary" type="button" title="Limpiar búsqueda" style="display:none;">
                    <i class="bi bi-x-lg"></i>
                  </button>
                </div>
              </div>

              <!-- Select categoría (se llena desde la API con las categorías existentes) -->
              <div class="col-6 col-md-6">
                <select id="categoria" class="form-select" title="Filtrar por categoría">
                  <option value="">Todas las categorías</option>
                </select>
              </div>

              <!-- Select estado: Todos / Activo / No activo -->
              <div class="col-6 col-md-6">
                <select id="estado" class="form-select" title="Filtrar por estado">
                  <option value="">Todos los estados</option>
                  <option value="activo">Estado activo</option>
                  <option value="inactivo">No activo</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- ====== Tabla de resultados ====== -->
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>Listado</span>
            <span class="text-muted small" id="resumen"></span>
          </div>
          <div class="table-wrap">
            <table class="table table-sm table-striped mb-0">
              <thead class="table-light">
                <tr>
                  <th class="col-id"><span id="th-id" class="th-id-toggle">ID <i id="id-arrow" class="bi bi-arrow-up"></i></span></th>
                  <th>Componente</th>
                  <th>Stock</th>
                  <th>Categoría</th>
                  <th>Precio</th>
                  <th>Activo</th>
                  <th>Actualizado</th>
                  <th class="col-acciones"></th>
                </tr>
              </thead>
              <tbody id="tbody-repuestos">
                <!-- Estado inicial -->
                <tr><td colspan="8" class="text-center py-3">Cargando...</td></tr>
              </tbody>
            </table>
          </div>
          <div class="card-footer d-flex justify-content-between align-items-center">
            <div>
              <button class="btn btn-outline-secondary btn-sm" id="prevPage"><i class="bi bi-chevron-left"></i> Anterior</button>
              <button class="btn btn-outline-secondary btn-sm ms-2" id="nextPage">Siguiente <i class="bi bi-chevron-right"></i></button>
            </div>
            <div id="paginacionInfo" class="text-muted small"></div>
          </div>
        </div>
      </div>
    </main>

    <script type="module">
      /* ---------- Referencias a elementos del DOM ---------- */
      const q = document.getElementById('q');
      const btnClearQ = document.getElementById('btnClearQ');
      const categoria = document.getElementById('categoria');
      const estado = document.getElementById('estado');
      const tbody = document.getElementById('tbody-repuestos');
      const resumen = document.getElementById('resumen');
      const paginacionInfo = document.getElementById('paginacionInfo');
      const prevPageBtn = document.getElementById('prevPage');
      const nextPageBtn = document.getElementById('nextPage');

      const cardForm = document.getElementById('cardForm');
      const form = document.getElementById('repuestoForm');
      const statusEl = document.getElementById('status');
      const btnSubmit  = document.getElementById('btnSubmit');
      const btnSubmitText = document.getElementById('btnSubmitText');
      const btnCancel = document.getElementById('btnCancel');
      const formTitle = document.getElementById('formTitle');
      const formHint = document.getElementById('formHint');

      const thId = document.getElementById('th-id');
      const idArrow = document.getElementById('id-arrow');

      /* ---------- Estado de la paginación/orden ---------- */
      let page = 1;
      const pageSize = 30;
      let sortDir = 'asc';

      /* ---------- Mostrar/ocultar la X de limpiar búsqueda ---------- */
      function toggleClearBtn() {
        btnClearQ?.style && (btnClearQ.style.display = (q?.value ?? '').trim() ? 'block' : 'none');
      }
      q?.addEventListener('input', toggleClearBtn);
      toggleClearBtn();

      btnClearQ?.addEventListener('click', () => {
        if (!q) return;
        q.value = '';
        toggleClearBtn();
        page = 1;   // reinicia a primera página
        cargar();
      });

      /* ---------- Helpers de mensajes breves ---------- */
      let statusTimer = null;
      function setStatus(text = '', kind = 'info', ms = 2200) {
        statusEl.classList.remove('ok','err','info');
        if (!text) { statusEl.textContent = ''; return; }
        statusEl.textContent = text;
        statusEl.classList.add(kind);
        if (statusTimer) clearTimeout(statusTimer);
        statusTimer = setTimeout(() => {
          statusEl.textContent = '';
          statusEl.classList.remove('ok','err','info');
          statusTimer = null;
        }, ms);
      }

      /* ---------- Formateo visual del precio en ARS (sin redondeo) ---------- */
      const precioInput = form.elements['precio'];
      function formatPrecioVisual(raw) {
        const digits = String(raw ?? '').replace(/[^\d]/g, ''); // deja solo dígitos
        if (!digits) return '';
        const pesos = Number(digits);
        const numero = new Intl.NumberFormat('es-AR', { minimumFractionDigits: 0, maximumFractionDigits: 0 })
          .format(pesos).replace(/\s/g, '');
        return '$' + numero;
      }
      precioInput.addEventListener('blur', () => { precioInput.value = formatPrecioVisual(precioInput.value); });

      /* ---------- Modo crear/editar ---------- */
      function setCreateMode() {
        form.reset();
        cardForm.classList.remove('editing');
        btnSubmitText.textContent = 'Crear';
        formTitle.textContent = 'Crear repuesto';
        formHint.textContent = '';
        form.elements['id'].value = '';
        setStatus('');
      }

      /* Lee y normaliza el payload desde el formulario */
      function getPayloadFromForm(requireId=false) {
        const fd = new FormData(form);
        const idStr = String(fd.get('id') || '').trim();
        const id = idStr ? Number(idStr) : undefined;
        if (requireId && !id) throw new Error('Seleccioná un repuesto (clic en una fila)');
        return {
          id,
          componente: String(fd.get('componente') || '').trim(),
          stock: String(fd.get('stock') || '').trim() || null,
          categoria: String(fd.get('categoria') || '').trim() || null,
          precio: String(fd.get('precio') || '').trim() || null,
          activo: String(fd.get('activo')) === 'true',
        };
      }

      /* ---------- Lista “Cargando…” mientras se trae la data ---------- */
      function setLoadingRows() {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center py-3">Cargando...</td></tr>';
        setStatus('');
      }

      /* ---------- Cargar tabla con filtros/paginación ---------- */
      async function cargar() {
        setLoadingRows();
        try {
          // Params seguros (evita crashear por .value en null)
          const params = new URLSearchParams({
            page: String(page),
            pageSize: String(pageSize),
            q: (q?.value ?? '').trim(),
            categoria: (categoria?.value ?? '').trim(),
            estado: (estado?.value ?? '').trim(),
            sortDir,
          });

          const res = await fetch('/api/listarRepuestos?' + params.toString());
          const out = await res.json();
          if (!res.ok) throw new Error(out?.error || 'Error al listar');

          const data = out.rows || [];
          const total = out.total || 0;

          // Si estoy en una página que ya no existe (p.ej. tras borrar), salto a la última válida y reintento
          const maxPage = total ? Math.ceil(total / pageSize) : 1;
          if (total > 0 && page > maxPage) {
            page = maxPage;
            return cargar();
          }

          // Render de filas o estado “Sin resultados”
          if (!Array.isArray(data) || data.length === 0) {
            tbody.innerHTML = '<tr><td colspan="8" class="text-center py-4 text-muted">Sin resultados.</td></tr>';
          } else {
            tbody.innerHTML = data.map(r => `
              <tr data-id="${r.id}" style="cursor:pointer">
                <td class="col-id">${r.id}</td>
                <td>${r.componente ?? ''}</td>
                <td>${r.stock ?? ''}</td>
                <td>${r.categoria ?? ''}</td>
                <td>${r.precio ?? ''}</td>
                <td>${r.activo ? 'Sí' : 'No'}</td>
                <td>${r.actualizado_en ?? ''}</td>
                <td class="col-acciones">
                  <div class="actions">
                    <button class="btn btn-outline-primary btn-sm btn-row-editar" title="Editar"><i class="bi bi-pencil-square"></i></button>
                    <button class="btn btn-outline-danger  btn-sm btn-row-borrar" title="Borrar"><i class="bi bi-trash"></i></button>
                  </div>
                </td>
              </tr>
            `).join('');
          }

          // Resumen + estado de paginación
          const from = total ? (page - 1) * pageSize + 1 : 0;
          const to = total ? Math.min(page * pageSize, total) : 0;
          resumen.textContent = total ? `Total: ${total}` : '';
          paginacionInfo.textContent = total ? `Mostrando ${from}-${to} de ${total}` : '';
          prevPageBtn.disabled = page <= 1;
          nextPageBtn.disabled = (page * pageSize) >= total;

        } catch (e) {
          console.error(e);
          tbody.innerHTML = '<tr><td colspan="8" class="text-danger text-center py-3">Error al cargar.</td></tr>';
          resumen.textContent = '';
          paginacionInfo.textContent = '';
          setStatus('Error al cargar', 'err', 2500);
        }
      }

      /* ---------- Llenado dinámico del select de categorías ---------- */
      async function cargarCategorias(keepSelected = true) {
        const selectedBefore = keepSelected ? (categoria?.value ?? '') : '';
        try {
          const res = await fetch('/api/categoriasRepuestos');
          const out = await res.json();
          const cats = Array.isArray(out?.categorias) ? out.categorias : [];

          const opts = ['<option value="">Todas las categorías</option>']
            .concat(cats.map(c => `<option value="${c.replaceAll('"','&quot;')}">${c}</option>`));
          categoria.innerHTML = opts.join('');

          // Restaura la selección si sigue existiendo
          if (keepSelected && selectedBefore && cats.includes(selectedBefore)) {
            categoria.value = selectedBefore;
          }
        } catch (e) {
          console.error('No se pudieron cargar categorías', e);
          categoria.innerHTML = '<option value="">Todas las categorías</option>';
        }
      }

      /* ---------- Orden por ID (toggle asc/desc) ---------- */
      thId?.addEventListener('click', () => {
        sortDir = sortDir === 'asc' ? 'desc' : 'asc';
        if (idArrow) idArrow.className = sortDir === 'asc' ? 'bi bi-arrow-up' : 'bi bi-arrow-down';
        page = 1;
        cargar();
      });

      /* ---------- Eventos en la tabla: editar / borrar ---------- */
      tbody.addEventListener('click', async (e) => {
        const btnEdit = e.target.closest('.btn-row-editar');
        const btnDel  = e.target.closest('.btn-row-borrar');
        const tr = e.target.closest('tr[data-id]');
        if (!tr) return;

        const tds = tr.querySelectorAll('td');
        const id = tds[0].textContent.trim();

        // Cargar datos de la fila en el formulario para editar
        if (btnEdit) {
          form.elements['id'].value           = id;
          form.elements['componente'].value   = tds[1].textContent.trim();
          form.elements['stock'].value        = tds[2].textContent.trim();
          form.elements['categoria'].value    = tds[3].textContent.trim();
          form.elements['precio'].value       = tds[4].textContent.trim();
          form.elements['activo'].value       = (tds[5].textContent.includes('Sí')).toString();
          cardForm.classList.add('editing');
          btnSubmitText.textContent = 'Guardar cambios';
          formTitle.textContent = 'Editar repuesto';
          formHint.textContent = `ID #${id}`;
          document.getElementById('cardForm').scrollIntoView({ behavior: 'smooth', block: 'start' });
          form.elements['componente'].focus();
        }

        // Borrado: intenta hard delete; si RLS no deja, hace soft delete
        if (btnDel) {
          if (!confirm(`¿Borrar repuesto #${id}?`)) return;
          try {
            const res = await fetch('/api/borrarRepuesto', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: Number(id) }),
            });
            const out = await res.json();
            if (!res.ok || !out.ok) throw new Error(out?.error || 'Error al borrar');

            page = 1;           // tras borrar, volvemos a página 1
            await cargar();
            if (form.elements['id'].value === id) setCreateMode();
            await cargarCategorias();  // refresca set de categorías
            setStatus('Borrado ✔', 'ok');
          } catch (err) {
            console.error(err);
            setStatus('No se pudo borrar', 'err', 2500);
          }
        }
      });

      /* ---------- Guardar (crear/editar) ---------- */
      btnSubmit.addEventListener('click', async () => {
        const editando = !!form.elements['id'].value;
        btnSubmit.disabled = true;
        try {
          const p = getPayloadFromForm(editando);
          if (!editando) delete p.id;
          const res = await fetch('/api/actualizarRepuesto', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(p),
          });
          const out = await res.json();
          if (!res.ok) throw new Error(out?.error || 'Error');
          setCreateMode();
          await cargar();
          await cargarCategorias(); // por si se creó una categoría nueva
          setStatus(editando ? 'Guardado ✔' : 'Creado ✔', 'ok');
        } catch (e) {
          console.error(e);
          setStatus('Error al guardar', 'err', 2500);
        } finally {
          btnSubmit.disabled = false;
        }
      });

      // Cancelar edición → vuelve al modo crear
      btnCancel.addEventListener('click', () => setCreateMode());

      // Filtros + paginación: cuando cambian, recarga desde página 1
      const refetch = (() => { let t; return () => { clearTimeout(t); t=setTimeout(()=>{ page=1; cargar(); }, 250);} })();
      q?.addEventListener('input', refetch);
      q?.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); page=1; cargar(); } });
      categoria?.addEventListener('change', () => { page = 1; cargar(); });
      estado?.addEventListener('change', () => { page = 1; cargar(); });
      prevPageBtn?.addEventListener('click', () => { if (page>1) { page--; cargar(); } });
      nextPageBtn?.addEventListener('click', () => { page++; cargar(); } );

      // Init: resetea form, carga categorías y resultados
      setCreateMode();
      await cargarCategorias(false); // primera carga sin restaurar selección previa
      cargar();
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
