---
/**
 * usuarios.astro
 * ---------------
 * Pantalla de gesti√≥n de permisos por usuario.
 *
 * üîê Seguridad:
 *   - Solo accesible para administradores.
 *   - Si el usuario logueado NO es admin, se redirige a /no-autorizado.
 *
 * üìã ¬øQu√© muestra/permite?
 *   - Lista todos los registros de la tabla `usuarios_perfil` (ordenados por email).
 *   - Cada fila tiene:
 *        ‚Ä¢ Email (solo lectura)
 *        ‚Ä¢ Checkboxes de permisos por secci√≥n (dashboard, tickets, etc.)
 *        ‚Ä¢ Check "Admin"
 *        ‚Ä¢ Check "Eliminar"
 *   - Abajo hay una fila "vac√≠a" para crear un usuario nuevo.
 *
 * üíæ ¬øC√≥mo se guardan los cambios?
 *   - Todo el formulario se env√≠a por POST a `/api/actualizarPermisosUsuarios`
 *   - El backend debe:
 *        ‚Ä¢ Recorrer `usuarios[index]`:
 *             - Si viene `[eliminar]` => borrar ese usuario.
 *             - Sino actualizar sus flags de permisos y rol.
 *        ‚Ä¢ Si viene `nuevo[...]` con email => crear usuario nuevo con esos flags.
 *
 * ‚ö†Ô∏è Importante:
 *   - La columna "Admin" deriva de `rol === 'admin'` en la base.
 *   - Los permisos extra (dashboard, tickets...) se guardan como booleanos en `usuarios_perfil`.
 */

import { supabase } from '../lib/supabase';
import BasePrivateLayout from '../layouts/BasePrivateLayout.astro';

// 1) Verificamos si el usuario autenticado es admin.
//    El middleware previo ya coloc√≥ `perfil` en Astro.locals.
const perfil = (Astro.locals as any)?.perfil;
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);

// üîí Seguridad: bloquear acceso a no-admins
if (!isAdmin) {
  return Astro.redirect('/no-autorizado');
}

// 2) Traer todos los usuarios registrados en `usuarios_perfil`
//    Ordenados por email para que la tabla sea determinista.
const { data: usuarios, error } = await supabase
  .from('usuarios_perfil')
  .select('*')
  .order('email', { ascending: true });

// 3) Definimos las "columnas" de permisos que vamos a mostrar din√°micamente.
//    Cada item tiene:
//      - nombre: la key real en BD (true/false)
//      - label: texto legible en UI
const PERMISOS = [
  { nombre: 'dashboard',    label: 'Inicio' },
  { nombre: 'tickets',      label: 'Tickets' },
  { nombre: 'usuarios',     label: 'Usuarios' },
  { nombre: 'estadisticas', label: 'Estad√≠sticas' },
];
---

<BasePrivateLayout>
  <div class="container mt-5">
    <h2 class="mb-3">
      <i class="bi bi-people me-2"></i>
      Gesti√≥n de permisos de usuarios
    </h2>

    {error && (
      <div class="alert alert-danger mt-3">
        Error al cargar usuarios: {error.message}
      </div>
    )}

    {(!error) && (
      <>
        {/*
          IMPORTANTE:
          - Este formulario POSTea todo a /api/actualizarPermisosUsuarios.
          - El endpoint debe validar que quien lo invoca sigue siendo admin
            (nunca conf√≠es solo en el front).
        */}
        <form
          id="form-permisos"
          method="post"
          action="/api/actualizarPermisosUsuarios"
          class="card shadow-sm"
          style="overflow-x:auto;"
        >
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-bordered align-middle mb-0">
                <thead class="table-light">
                  <tr>
                    <th style="min-width: 260px;">Email</th>

                    {PERMISOS.map((p) => (
                      <th class="text-center" style="white-space:nowrap;">{p.label}</th>
                    ))}

                    <th class="text-center" style="white-space:nowrap;">Admin</th>
                    <th class="text-center" style="white-space:nowrap;">Eliminar</th>
                  </tr>
                </thead>

                <tbody>
                  {/* ========== Filas EXISTENTES (usuarios que ya est√°n en la BD) ========== */}
                  {usuarios?.map((usuario, idx) => (
                    <tr>
                      {/* EMAIL - solo lectura, pero lo mandamos igual en el POST
                         para que el backend sepa a qui√©n actualizar/borrar */}
                      <td>
                        <input
                          type="email"
                          name={`usuarios[${idx}][email]`}
                          value={usuario.email}
                          class="form-control"
                          readonly
                        />
                      </td>

                      {/* Permisos por secci√≥n de la app:
                         Para cada PERMISO definimos un checkbox.
                         Ejemplo:
                           usuarios[0][dashboard] = "on" si marcado.
                      */}
                      {PERMISOS.map((p) => (
                        <td class="text-center">
                          <input
                            type="checkbox"
                            class="form-check-input"
                            name={`usuarios[${idx}][${p.nombre}]`}
                            checked={Boolean((usuario as any)[p.nombre])}
                          />
                        </td>
                      ))}

                      {/* Admin:
                         - Si `usuario.rol === 'admin'`, tildamos.
                         - En el backend, si viene este checkbox ‚Üí rol='admin'.
                           Si NO viene ‚Üí rol='tecnico' o el rol base que uses.
                      */}
                      <td class="text-center">
                        <input
                          type="checkbox"
                          class="form-check-input"
                          name={`usuarios[${idx}][admin]`}
                          checked={usuario.rol === 'admin'}
                        />
                      </td>

                      {/* Eliminar:
                         - Este checkbox NO existe a√∫n en BD.
                         - Es solo se√±al: si viene `usuarios[i][eliminar] === 'on'`
                           el backend debe borrar ese usuario de la tabla.
                      */}
                      <td class="text-center">
                        <input
                          type="checkbox"
                          class="form-check-input eliminar-checkbox"
                          name={`usuarios[${idx}][eliminar]`}
                          id={`eliminar-${idx}`}
                          title="Marcar para eliminar este usuario"
                        />
                      </td>
                    </tr>
                  ))}

                  {/* ========== Fila para CREAR NUEVO USUARIO ========== */}
                  <tr class="table-success-subtle">
                    <td>
                      <input
                        type="email"
                        name="nuevo[email]"
                        placeholder="nuevo@gmail.com"
                        class="form-control"
                        autocomplete="email"
                      />
                    </td>

                    {/* Permisos iniciales del nuevo usuario */}
                    {PERMISOS.map((p) => (
                      <td class="text-center">
                        <input
                          type="checkbox"
                          class="form-check-input"
                          name={`nuevo[${p.nombre}]`}
                        />
                      </td>
                    ))}

                    {/* ¬øEs admin el nuevo? */}
                    <td class="text-center">
                      <input
                        type="checkbox"
                        class="form-check-input"
                        name="nuevo[admin]"
                      />
                    </td>

                    {/* En la fila nueva no hay "Eliminar" */}
                    <td class="text-center text-muted">‚Äî</td>
                  </tr>
                </tbody>
              </table>
            </div>

            {/* Botonera */}
            <div class="mt-4 d-flex flex-wrap gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i>
                Guardar cambios
              </button>

              {/* Bot√≥n auxiliar "Eliminar seleccionados":
                 Este NO borra directamente en el front.
                 Solo dispara un confirm() y luego hace submit del mismo form,
                 dejando los checkboxes [eliminar] marcados.
              */}
              <button
                type="button"
                class="btn btn-danger"
                id="btn-eliminar"
              >
                <i class="bi bi-trash3 me-2"></i>
                Eliminar seleccionados
              </button>
            </div>

            <div class="form-text text-muted mt-3">
              ‚Ä¢ Marcar "Eliminar" NO borra al instante: se confirma y luego se env√≠a todo.<br/>
              ‚Ä¢ "Admin" tiene acceso total, incluyendo esta misma pantalla.
            </div>
          </div>
        </form>

        {/* Script de confirmaci√≥n para eliminaci√≥n masiva.
           - Cuenta cu√°ntos usuarios est√°n marcados con [eliminar].
           - Pregunta confirmaci√≥n.
           - Si acept√°s, hace submit() del form.
        */}
        <script is:inline>
          (function(){
            const btn = document.getElementById('btn-eliminar');
            const form = document.getElementById('form-permisos');

            if (!btn || !form) return;

            btn.addEventListener('click', function(){
              // Buscamos todos los checkboxes con clase "eliminar-checkbox"
              const marcados = Array.from(
                form.querySelectorAll('.eliminar-checkbox')
              ).filter((el) => el instanceof HTMLInputElement && el.checked);

              if (!marcados.length) {
                alert('No hay usuarios marcados para eliminar.');
                return;
              }

              const ok = confirm(
                `¬øEliminar ${marcados.length} usuario(s) seleccionados? Esta acci√≥n no se puede deshacer.`
              );
              if (!ok) return;

              // Disparamos el submit del mismo form.
              // El backend ver√° cu√°les ten√≠an [eliminar] marcado.
              form.submit();
            });
          })();
        </script>
      </>
    )}
  </div>

  {/* Peque√±os estilos para pulir la lectura */}
  <style is:inline>
    h2 {
      font-weight: 600;
      color: #0d6efd;
      display: flex;
      align-items: center;
      gap: .5rem;
    }

    table.table td,
    table.table th {
      vertical-align: middle;
    }

    thead.table-light th {
      white-space: nowrap;
      font-weight: 600;
      font-size: .9rem;
    }

    tbody tr td:first-child input[readonly] {
      background-color: #f8f9fa;
      color: #495057;
      font-size: .9rem;
    }

    .table-success-subtle {
      background: rgba(25,135,84,.05);
    }

    .form-text {
      font-size: .8rem;
    }
  </style>
</BasePrivateLayout>
