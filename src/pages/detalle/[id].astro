---
/**
 * Página /detalle/:id
 *
 * 🔍 Propósito:
 * - Mostrar el detalle completo de un ticket / equipo.
 * - Dar acceso rápido a acciones internas (Presupuesto, Delivery, Comentarios, Máquina Lista).
 *
 * 📦 Qué datos carga (SSR con Supabase):
 *   - Ticket (`tickets_mian`) con joins:
 *       • cliente (dni/cuit, contacto)
 *       • técnico asignado
 *       • impresora asociada
 *       • último registro de delivery
 *       • flags de estado como `fecha_de_reparacion`, `solicitar_presupuesto`, etc.
 *   - Último presupuesto (tabla `presupuestos`)
 *   - Cantidad de comentarios
 *   - Existencia de registros Delivery / Presupuesto
 *
 * 🧼 Normalizaciones:
 *   - Fechas: se intentan llevar a YYYY-MM-DD (normDateLite) y luego formatear amigable.
 *   - DNI/CUIT: se muestra con puntos/guiones si es posible.
 *   - joins que Supabase puede devolver como objeto o como [obj] se limpian.
 *   - Selección de imagen principal + galería de miniaturas.
 *
 * 🔐 Permisos:
 *   - Determina si el usuario actual (Astro.locals.perfil) es admin o técnico.
 *   - Admin:
 *       • puede eliminar ticket
 *       • puede acceder a Delivery
 *   - Técnico:
 *       • puede marcar "Máquina Lista"
 *       • puede ir a Presupuesto / Comentarios
 *
 * 🖱 Acciones JS en la vista:
 *   - eliminarTicket(id): POST /api/eliminarTicket (solo admin)
 *   - maquinaLista(id):   POST /api/maquinaLista     (admin o técnico)
 *   - cambio de miniatura → imagen principal
 *   - overlay con zoom en la imagen principal
 */

import BasePrivateLayout from '../../layouts/BasePrivateLayout.astro';
import { supabase } from '../../lib/supabase';
import { formatearFecha, booleanATexto, formatARS } from '../../lib/utils';

// ======================================================================
// 1️⃣ Parámetro de ruta y perfil del usuario
// ======================================================================

// :id viene de la ruta dinámica /detalle/:id
const { id } = Astro.params as { id: string };

// Perfil del usuario autenticado (inyectado por middleware en Astro.locals)
type Perfil = { rol?: string; admin?: boolean; activo?: boolean };
const perfil = (Astro.locals as any).perfil as Perfil | undefined;

// Flags de permisos
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);
const isTecnico = perfil?.rol === 'tecnico';

// ======================================================================
// 2️⃣ Helpers / Normalizadores locales
// ======================================================================

/**
 * normDateLite:
 * - Intenta normalizar distintas variantes de fecha (ISO, DD/MM/YYYY, etc.)
 *   a formato "YYYY-MM-DD".
 *
 * Soporta:
 *   - "2025-10-30T12:00:00Z" → "2025-10-30"
 *   - "2025/10/30"
 *   - "30/10/2025"
 *   - "10-30-2025"
 *   - etc, con heurística para día/mes.
 *
 * Devuelve string "YYYY-MM-DD" o null si no pudo.
 */
function normDateLite(value?: string | null): string | null {
  if (!value) return null;
  const s = String(value).trim();
  if (!s) return null;

  // Cortamos hora si viene "YYYY-MM-DDTHH:mm"
  const onlyDate = s.split('T')[0].split(' ')[0];

  // Caso clásico YYYY-MM-DD
  let m = onlyDate.match(/^(\d{4})-(\d{2})-(\d{2})$/);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;

  // Caso YYYY/M/D o YYYY/MM/DD
  m = onlyDate.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2})$/);
  if (m) return `${m[1]}-${m[2].padStart(2,'0')}-${m[3].padStart(2,'0')}`;

  // Caso D/M/YYYY o M/D/YYYY con / o -
  m = onlyDate.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})$/);
  if (m) {
    const a = parseInt(m[1],10), b = parseInt(m[2],10), yyyy = m[3];
    let dd:number, mm:number;
    // Heurística de desambiguado mes/día
    if (b > 12 && a <= 12) { mm = a; dd = b; }
    else if (a > 12 && b <= 12) { dd = a; mm = b; }
    else { mm = a; dd = b; }
    return `${yyyy}-${String(mm).padStart(2,'0')}-${String(dd).padStart(2,'0')}`;
  }

  // Último intento: que JS la entienda como Date()
  const d = new Date(onlyDate);
  if (!isNaN(d.getTime())) {
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth()+1).padStart(2,'0');
    const dd = String(d.getDate()).padStart(2,'0');
    return `${yyyy}-${mm}-${dd}`;
  }

  return null;
}

/**
 * formatDniCuit:
 * - Devuelve una versión amigable/formateada de DNI o CUIT cuando se puede.
 * - Si no hay valor → '—'.
 * - Trata de poner puntos/guiones según longitud común.
 *
 * Reglas rápidas:
 *   - 11 dígitos → "##-########-#"
 *   - 8  dígitos → "##.###.###"
 *   - 7  dígitos → "#.###.###"
 *   - fallback → separador de miles con "."
 */
function formatDniCuit(raw?: string | null): string {
  if (raw == null) return '—';
  const digits = String(raw).replace(/\D+/g, '');
  if (!digits) return '—';

  if (digits.length === 11) return `${digits.slice(0, 2)}-${digits.slice(2, 10)}-${digits.slice(10)}`;
  if (digits.length === 8)  return `${digits.slice(0, 2)}.${digits.slice(2, 5)}.${digits.slice(5)}`;
  if (digits.length === 7)  return `${digits.slice(0, 1)}.${digits.slice(1, 4)}.${digits.slice(4)}`;
  return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
}

// ======================================================================
// 3️⃣ Datos principales del ticket y joins
// ======================================================================
//
// Cargamos el ticket y varios joins relacionados en una sola consulta:
//
//  - cliente:cliente_id → dni_cuit, correo, whatsapp, nombre comercial
//  - tecnico:tecnico_id → nombre/apellido del técnico asignado
//  - delivery           → datos del último envío/pago (puede venir array)
//  - impresoras:impresora_id → info física de la impresora
//
// Notar que usamos `*` para traer todas las columnas crudas del ticket
// (incluye campos como solicitar_presupuesto).
//
const { data } = await supabase
  .from('tickets_mian')
  .select(`
    *,
    cliente:cliente_id ( dni_cuit, correo_electronico, whatsapp, cliente ),
    tecnico:tecnico_id ( nombre, apellido ),
    delivery ( id, pagado, cotizar_delivery, medio_de_entrega, fecha_de_entrega, forma_de_pago, informacion_adicional_delivery ),
    impresoras:impresora_id ( modelo, maquina, numero_de_serie, tamano_de_boquilla )
  `)
  .eq('id', id)
  .single();

const equipo = data; // lo llamamos "equipo" en la UI

// ======================================================================
// 4️⃣ Último presupuesto asociado al ticket
// ======================================================================
//
// Buscamos en `presupuestos` todos los de ese ticket,
// ordenamos desc por id y tomamos el primero.
const { data: presuRows } = await supabase
  .from('presupuestos')
  .select('*')
  .eq('ticket_id', id)
  .order('id', { ascending: false })
  .limit(1);

const presupuesto = Array.isArray(presuRows) ? (presuRows[0] ?? null) : null;

// ======================================================================
// 5️⃣ Normalizaciones de joins que pueden venir en array
// ======================================================================
//
// Supabase puede devolver relaciones como:
//   { impresoras: {...} }
// o como:
//   { impresoras: [{...}] }
//
// Acá las "aplanamos" para que el render no tenga que preguntar eso.
const impresora = Array.isArray((equipo as any)?.impresoras)
  ? (equipo as any).impresoras?.[0]
  : (equipo as any)?.impresoras;

const deliveryRaw = (equipo as any)?.delivery;
const delivery = Array.isArray(deliveryRaw) ? (deliveryRaw[0] ?? null) : (deliveryRaw ?? null);

/**
 * modeloMostrado:
 * - Priorizamos modelo de la impresora del join.
 * - Si no hay, usamos `maquina_reparada` (texto libre en el ticket).
 * - Fallback genérico.
 */
const modeloMostrado =
  (impresora?.modelo && String(impresora?.modelo).trim()) ||
  (equipo?.maquina_reparada && String(equipo?.maquina_reparada).trim()) ||
  'Modelo no especificado';

/**
 * imagenPrincipal:
 * - Muestra primero `imagen_ticket` (foto del cliente o del problema).
 * - Si no hay, usa `imagen` / `imagen_extra`.
 * - Último recurso: /logo.webp.
 */
const imagenPrincipal =
  equipo?.imagen_ticket || equipo?.imagen || equipo?.imagen_extra || '/logo.webp';

/**
 * imagenes:
 * - Array con todas las imágenes únicas que tengamos del ticket,
 *   para las miniaturas bajo la imagen principal.
 */
const imagenes: string[] = Array.from(new Set(
  [equipo?.imagen_ticket, equipo?.imagen, equipo?.imagen_extra].filter(Boolean) as string[]
));

// ======================================================================
// 6️⃣ Flags para botones (Presupuesto / Delivery / etc.)
// ======================================================================

// ¿Existe un presupuesto guardado?
const hasPresupuesto = Boolean(presupuesto?.id);

// ¿Existe al menos un registro de delivery para este ticket?
const { data: deliveryExistente } = await supabase
  .from('delivery')
  .select('id')
  .eq('ticket_id', id)
  .maybeSingle();
const hasDelivery = Boolean(deliveryExistente?.id);

// ======================================================================
// 7️⃣ Fechas a mostrar
// ======================================================================
//
// - fechaFormularioNorm: cuando se cargó el ticket (marca_temporal).
// - fechaListoNorm:      cuando se marcó el equipo como "Lista".
const fechaFormularioNorm = normDateLite(equipo?.marca_temporal);
const fechaListoNorm      = normDateLite(equipo?.fecha_de_reparacion);

// ======================================================================
// 8️⃣ Contador de comentarios
// ======================================================================
//
// Leemos sólo el count total de ticket_comentarios de este ticket,
// para mostrarlo al lado del botón "Comentarios".
const { count: comentariosCount } = await supabase
  .from('ticket_comentarios')
  .select('id', { count: 'exact', head: true })
  .eq('ticket_id', id);

// ======================================================================
// 9️⃣ Tri-estado "quiere presupuesto"
// ======================================================================
//
// El campo equipo.solicitar_presupuesto puede ser "Si", "No", etc.
const quierePresupuesto =
  equipo?.solicitar_presupuesto === 'Si' ? 'Sí' :
  equipo?.solicitar_presupuesto === 'No' ? 'No' :
  'Sin seleccionar';
---

<BasePrivateLayout>
  <style>
    /* ==================================================================
       🎨 Estilos locales para la vista:
       - Miniaturas clickeables
       - Separadores visuales
       - Overlay de zoom
       ================================================================== */
    .thumbs { display: flex; gap: .5rem; justify-content: center; }
    .thumb { height: 60px; width: 60px; border-radius: 8px; object-fit: cover; cursor: pointer;
      border: 2px solid transparent; transition: transform .15s ease, border-color .15s ease; outline: none; }
    .thumb:hover { transform: scale(1.04); }
    .thumb:focus-visible { outline: 2px solid #0d6efd; outline-offset: 2px; }
    .thumb.active { border-color: #0d6efd; }

    .section-title { font-weight:700; color:#0d6efd; margin:.25rem 0 .5rem;
      display:flex; align-items:center; gap:.5rem; }

    .divider { border-top:1px solid rgba(0,0,0,.08); margin:1rem 0; }
  </style>

  <div class="container mt-4 position-relative">
    <div class="card mx-auto shadow" style="max-width: 720px;">
      {/* ------------------------------------------------------------
          Header de la tarjeta principal del detalle
          - Título
          - Botón de eliminar (solo admin)
          ------------------------------------------------------------ */}
      <div class="card-header bg-white d-flex align-items-center justify-content-between">
        <h3 class="h5 mb-0 fw-bold text-primary">Detalle del equipo</h3>

        {isAdmin && (
          <button
            class="btn btn-sm btn-outline-danger d-flex align-items-center"
            onclick={`eliminarTicket('${equipo?.id}')`}
            title="Eliminar ticket"
          >
            <i class="bi bi-trash"></i>
          </button>
        )}
      </div>

      <div class="card-body">
        {/* ============================================================
            1️⃣ Imagen principal del equipo
            ============================================================ */}
        <div class="text-center mb-3">
          <img
            id="imagen-equipo"
            src={`${imagenPrincipal}?t=${Date.now()}`}
            alt="Imagen impresora"
            class="rounded img-fluid shadow-sm"
            style="max-height: 300px; max-width: 300px; object-fit: cover; border-radius: 15px; cursor: zoom-in;"
          />
        </div>

        {/* ============================================================
            2️⃣ Miniaturas clickeables
            - Cada thumbnail actualiza la imagen principal
            - Marcamos la que está activa
            ============================================================ */}
        {imagenes.length > 0 && (
          <div class="thumbs mb-4" id="thumbs">
            {imagenes.map((src) => (
              <img
                src={`${src}?t=${Date.now()}`}
                data-src={src}
                alt="Miniatura"
                class={`thumb ${src === imagenPrincipal ? 'active' : ''}`}
                role="button"
                tabindex="0"
              />
            ))}
          </div>
        )}

        {/* ============================================================
            3️⃣ Encabezado textual: cliente + modelo
            ============================================================ */}
        <div class="text-center mb-3">
          <h4 class="fw-bold text-dark mb-1">
            {equipo?.cliente?.cliente ?? '—'}
          </h4>
          <div class="text-muted small">{modeloMostrado}</div>
        </div>

        {/* ============================================================
            4️⃣ Sección: Ticket
            ------------------------------------------------------------
            - Nº Ticket
            - Estado
            - Técnico asignado
            - Fecha en la que se cargó el form
            - Fecha en la que se marcó "Lista"
            ============================================================ */}
        <div class="section-title">
          <i class="bi bi-ticket-perforated"></i> Ticket
        </div>
        <div class="row row-cols-1 row-cols-md-2 g-3">
          <div class="col"><strong>N° Ticket:</strong> {equipo?.ticket ?? '—'}</div>
          <div class="col"><strong>Estado:</strong> {equipo?.estado ?? '—'}</div>
          <div class="col">
            <strong>Técnico:</strong>{' '}
            {equipo?.tecnico
              ? `${equipo.tecnico.nombre} ${equipo.tecnico.apellido}`
              : '—'}
          </div>
          <div class="col">
            <strong>Fecha formulario:</strong>{' '}
            {fechaFormularioNorm ? formatearFecha(fechaFormularioNorm) : '—'}
          </div>
          <div class="col">
            <strong>Fecha listo:</strong>{' '}
            {fechaListoNorm ? formatearFecha(fechaListoNorm) : '—'}
          </div>
        </div>

        <div class="divider"></div>

        {/* ============================================================
            5️⃣ Sección: Cliente
            ------------------------------------------------------------
            - DNI/CUIT formateado
            - WhatsApp
            - Correo electrónico
            ============================================================ */}
        <div class="section-title">
          <i class="bi bi-person-badge"></i> Cliente
        </div>
        <div class="row row-cols-1 row-cols-md-2 g-3">
          <div class="col">
            <strong>DNI/CUIT:</strong> {formatDniCuit(equipo?.cliente?.dni_cuit)}
          </div>
          <div class="col">
            <strong>WhatsApp:</strong> {equipo?.cliente?.whatsapp ?? '—'}
          </div>
          <div class="col">
            <strong>Correo:</strong> {equipo?.cliente?.correo_electronico ?? '—'}
          </div>
        </div>

        <div class="divider"></div>

        {/* ============================================================
            6️⃣ Sección: Presupuesto
            ------------------------------------------------------------
            - Monto total estimado
            - ¿El cliente pidió presupuesto?
            - Link al presupuesto (si existe)
            - Info de garantía, aprobación, fecha
            ============================================================ */}
        <div class="section-title">
          <i class="bi bi-receipt"></i> Presupuesto
        </div>
        <div class="row row-cols-1 row-cols-md-2 g-3">
          <div class="col">
            <strong>Monto:</strong>{' '}
            {presupuesto?.monto ? formatARS(presupuesto.monto) : '—'}
          </div>
          <div class="col">
            <strong>¿Quiere saber presupuesto?</strong> {quierePresupuesto}
          </div>
          <div class="col">
            <strong>Link:</strong>{' '}
            {presupuesto?.link_presupuesto ? (
              <a
                href={presupuesto.link_presupuesto}
                target="_blank"
                rel="noopener"
              >
                Abrir
              </a>
            ) : '—'}
          </div>
          <div class="col">
            <strong>Garantía activa:</strong> {presupuesto?.garantia_activa ?? '—'}
          </div>

          {presupuesto?.presupuesto_aprobado && (
            <div class="col">
              <strong>Aprobación:</strong> {presupuesto.presupuesto_aprobado}
            </div>
          )}

          {presupuesto?.fecha_presupuesto && (
            <div class="col">
              <strong>Fecha presupuesto:</strong>{' '}
              {formatearFecha(presupuesto.fecha_presupuesto)}
            </div>
          )}
        </div>

        <div class="divider"></div>

        {/* ============================================================
            7️⃣ Sección: Delivery
            ------------------------------------------------------------
            - Pagado / no pagado
            - Medio de entrega
            - Costo
            - Forma de pago
            - Fecha de entrega
            - Info adicional
            ============================================================ */}
        <div class="section-title">
          <i class="bi bi-truck"></i> Delivery
        </div>
        <div class="row row-cols-1 row-cols-md-2 g-3">
          <div class="col">
            <strong>¿Cobrado?:</strong>{' '}
            {delivery?.pagado == null
              ? '—'
              : booleanATexto(delivery.pagado === 'true')}
          </div>
          <div class="col">
            <strong>Medio de entrega:</strong>{' '}
            {delivery?.medio_de_entrega ?? '—'}
          </div>
          <div class="col">
            <strong>Costo delivery:</strong>{' '}
            {delivery?.cotizar_delivery
              ? formatARS(delivery.cotizar_delivery)
              : '—'}
          </div>
          {delivery?.forma_de_pago && (
            <div class="col">
              <strong>Forma de pago:</strong> {delivery.forma_de_pago}
            </div>
          )}
          {delivery?.fecha_de_entrega && (
            <div class="col">
              <strong>Fecha de entrega:</strong>{' '}
              {formatearFecha(delivery.fecha_de_entrega)}
            </div>
          )}
          {delivery?.informacion_adicional_delivery && (
            <div class="col">
              <strong>Info adicional:</strong>{' '}
              {delivery.informacion_adicional_delivery}
            </div>
          )}
        </div>

        {/* ============================================================
            8️⃣ Acciones (solo admin o técnico)
            ------------------------------------------------------------
            - Ver / añadir presupuesto
            - Ver / añadir delivery (solo admin)
            - Marcar "Máquina Lista"
            - Ir a comentarios
            ============================================================ */}
        {(isAdmin || isTecnico) && (
          <>
            <div class="divider"></div>

            {/* Botones de Presupuesto / Delivery */}
            <div class="row mt-1 g-2">
              <div class={`d-flex ${isAdmin ? 'col-6' : 'col-12'}`}>
                <a
                  href={`/presupuesto/${equipo?.id}`}
                  class="btn btn-outline-primary btn-sm w-100"
                >
                  <i class={`bi ${hasPresupuesto ? 'bi-shield-check' : 'bi-receipt'}`}></i>
                  {' '}
                  {hasPresupuesto
                    ? 'Verificar presupuesto'
                    : 'Añadir presupuesto'}
                </a>
              </div>

              {isAdmin && (
                <div class="col-6 d-flex">
                  <a
                    href={`/delivery/${equipo?.id}`}
                    class="btn btn-outline-success btn-sm w-100"
                  >
                    <i class={`bi ${hasDelivery ? 'bi-shield-check' : 'bi-receipt'}`}></i>
                    {' '}
                    {hasDelivery
                      ? 'Verificar delivery'
                      : 'Añadir delivery'}
                  </a>
                </div>
              )}
            </div>

            {/* Botón Máquina Lista */}
            <div class="mt-3">
              {equipo?.estado !== 'Lista' ? (
                <button
                  class="btn btn-warning w-100"
                  onclick={`window.maquinaLista('${equipo?.id}')`}
                >
                  <i class="bi bi-check2-square me-1"></i> Máquina Lista
                </button>
              ) : (
                <button class="btn btn-secondary w-100" disabled>
                  <i class="bi bi-check2-circle me-1"></i> Máquina ya marcada como Lista
                </button>
              )}
            </div>

            {/* Botón Comentarios */}
            <div class="mt-3">
              <a
                href={`/comentarios/${equipo?.id}`}
                class="btn btn-outline-secondary w-100"
              >
                <i class="bi bi-chat-dots"></i>
                {' '}
                Comentarios ({comentariosCount ?? 0})
              </a>
            </div>
          </>
        )}

        {/* Si por alguna razón el equipo no existe, mostramos alerta.
           (Debería ser raro porque si no existiera no habríamos llegado acá con data válida.) */}
        {!equipo && (
          <div class="alert alert-danger mt-4">
            No se encontró el equipo con ID: {id}
          </div>
        )}
      </div>
    </div>
  </div>

  {/* ==================================================================
     9️⃣ Script admin: eliminar ticket
     - Sólo renderizado si isAdmin === true
     - Llama al endpoint /api/eliminarTicket vía POST
     ================================================================== */}
  {isAdmin && (
    <script>
      // Acción admin: eliminar ticket (pide confirmación)
      (window as any).eliminarTicket = async function(id: string) {
        if (!confirm("¿Estás seguro de que querés eliminar este ticket? Esta acción no se puede deshacer.")) return;

        const res = await fetch(`/api/eliminarTicket?id=${id}`, { method: 'POST' });
        const data = await res.json();

        if (res.ok) {
          alert("Ticket eliminado correctamente.");
          window.location.href = '/dashboard';
        } else {
          alert("Error al eliminar: " + data.error);
        }
      }
    </script>
  )}

  {/* ==================================================================
     🔟 Script: marcar "Máquina Lista"
     - Disponible para admin y técnico.
     - Llama a /api/maquinaLista?id=...
     - Deshabilita temporalmente botones para evitar doble click.
     ================================================================== */}
  <script>
    (window as any).maquinaLista = async function(id: string) {
      if (!confirm("¿Marcar este equipo como LISTA? Esto actualizará el estado y la fecha de listo.")) return;

      // Deshabilitamos todos los botones/links para evitar doble envío
      const elements = document.querySelectorAll('button, a.btn');
      elements.forEach((el: Element) => {
        if (el instanceof HTMLButtonElement) {
          el.disabled = true;
        } else if (el instanceof HTMLAnchorElement) {
          el.classList.add('disabled');
          el.setAttribute('aria-disabled', 'true');
          (el as HTMLAnchorElement).style.pointerEvents = 'none';
        }
      });

      try {
        const res = await fetch(`/api/maquinaLista?id=${encodeURIComponent(id)}`, { method: 'POST' });

        // El endpoint puede devolver 303 con Location
        if (res.redirected) { window.location.href = res.url; return; }

        if (res.ok) { window.location.reload(); return; }

        const data = await res.json().catch(() => ({}));
        alert("No se pudo marcar como Lista: " + (data.error || res.statusText));
      } catch (e) {
        alert("Error de red: " + (e && (e as any).message ? (e as any).message : String(e)));
      } finally {
        // Rehabilitar la UI aunque haya fallado
        elements.forEach((el: Element) => {
          if (el instanceof HTMLButtonElement) {
            el.disabled = false;
          } else if (el instanceof HTMLAnchorElement) {
            el.classList.remove('disabled');
            el.removeAttribute('aria-disabled');
            (el as HTMLAnchorElement).style.pointerEvents = '';
          }
        });
      }
    }
  </script>

  {/* ==================================================================
     1️⃣1️⃣ Script: miniaturas → imagen principal
     - Click/Enter/Space en una thumbnail cambia la imagen grande.
     ================================================================== */}
  <script>
    const thumbs = document.querySelectorAll('#thumbs .thumb');
    const mainImg = document.getElementById('imagen-equipo');

    if (thumbs && mainImg) {
      thumbs.forEach((t: Element) => {
        // Click cambia imagen principal
        t.addEventListener('click', () => {
          thumbs.forEach((x: Element) => x.classList.remove('active'));
          t.classList.add('active');

          const src = t.getAttribute('data-src') || t.getAttribute('src');
          if (src && mainImg instanceof HTMLImageElement) {
            mainImg.src = src + `?t=${Date.now()}`;
          }
        });

        // Accesibilidad: Enter o Space también activan
        t.addEventListener('keydown', (ev: Event) => {
          if (ev instanceof KeyboardEvent && (ev.key === 'Enter' || ev.key === ' ')) {
            ev.preventDefault();
            (t as HTMLElement).click();
          }
        });
      });
    }
  </script>

  {/* ==================================================================
     1️⃣2️⃣ Overlay de zoom para la imagen principal
     - Click en la imagen abre overlay full-screen
     - Doble click / doble tap alterna zoom 1x/2x
     - Escape o click fuera cierra
     ================================================================== */}
  <style>
    .zoom-overlay{
      position:fixed; inset:0; display:none; z-index:2000;
      background:rgba(0,0,0,.9);
      align-items:center; justify-content:center;
      padding:24px;
    }
    .zoom-overlay.open{ display:flex; }
    .zoom-overlay__img{
      max-width:95vw; max-height:95vh;
      border-radius:12px;
      box-shadow:0 10px 30px rgba(0,0,0,.6);
      user-select:none;
      transition:transform .2s ease;
      transform-origin:center center;
      cursor: zoom-in;
    }
    .zoom-overlay__close{
      position:absolute; top:16px; right:16px;
      cursor:pointer;
      background:rgba(255,255,255,.15); color:#fff;
      border:1px solid rgba(255,255,255,.35);
      padding:8px 12px; border-radius:8px;
    }
    .zoom-overlay__close:hover{
      background:rgba(255,255,255,.25);
    }
  </style>

  {/* Contenedor del overlay de zoom (hidden por defecto) */}
  <div
    id="zoomOverlay"
    class="zoom-overlay"
    role="dialog"
    aria-modal="true"
    aria-label="Imagen ampliada"
  >
    <img id="zoomImg" class="zoom-overlay__img" alt="Vista ampliada" />
    <button id="zoomClose" class="zoom-overlay__close" type="button">✕ Cerrar</button>
  </div>

  <script>
    // Lógica del overlay/zoom de la imagen principal
    const mainImgZoom  = document.getElementById('imagen-equipo');
    const overlayZoom  = document.getElementById('zoomOverlay');
    const overlayImg   = document.getElementById('zoomImg');
    const btnCloseZoom = document.getElementById('zoomClose');

    if (
      mainImgZoom instanceof HTMLImageElement &&
      overlayZoom instanceof HTMLElement &&
      overlayImg instanceof HTMLImageElement &&
      btnCloseZoom instanceof HTMLElement
    ) {
      // Variables tipadas para evitar null checks repetidos
      const _overlayZoom: HTMLElement = overlayZoom;
      const _overlayImg: HTMLImageElement = overlayImg;
      const _mainImgZoom: HTMLImageElement = mainImgZoom;
      const _btnCloseZoom: HTMLElement = btnCloseZoom;

      let escala = 1;

      function aplicar() {
        _overlayImg.style.transform = `scale(${escala})`;
        _overlayImg.style.cursor = escala > 1 ? 'zoom-out' : 'zoom-in';
      }

      // Abrir overlay al clickear imagen principal
      _mainImgZoom.addEventListener('click', () => {
        _overlayImg.src = _mainImgZoom.currentSrc || _mainImgZoom.src;
        _overlayZoom.classList.add('open');
        document.body.style.overflow = 'hidden';
        escala = 1;
        aplicar();
      });

      // Cerrar overlay
      function cerrarOverlay() {
        _overlayZoom.classList.remove('open');
        document.body.style.overflow = '';
        escala = 1;
        aplicar();
      }

      _btnCloseZoom.addEventListener('click', cerrarOverlay);

      // Click "afuera" de la imagen también cierra
      _overlayZoom.addEventListener('click', (e: Event) => {
        if (e.target === _overlayZoom) cerrarOverlay();
      });

      // Escape cierra
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape' && _overlayZoom.classList.contains('open')) {
          cerrarOverlay();
        }
      });

      // Alternar zoom 1x / 2x
      function toggleZoom() {
        escala = (escala === 1) ? 2 : 1;
        aplicar();
      }

      // Doble click = toggle zoom
      _overlayImg.addEventListener('dblclick', (e: MouseEvent) => {
        e.preventDefault();
        toggleZoom();
      });

      // Doble tap móvil = toggle zoom
      let lastTap = 0;
      _overlayImg.addEventListener('click', () => {
        const now = Date.now();
        if (now - lastTap < 300) toggleZoom();
        lastTap = now;
      });
    }
  </script>
</BasePrivateLayout>
