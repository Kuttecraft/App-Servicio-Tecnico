---
import BasePrivateLayout from '../../layouts/BasePrivateLayout.astro';
import { supabase } from '../../lib/supabase';

/** Convierte varias variantes de fecha a "YYYY-MM-DD" (para inputs type="date"). */
function toISODate(v?: string | null): string {
  if (!v) return '';
  const s = String(v).trim();
  if (!s || s.toLowerCase() === 'null' || s.toLowerCase() === 'undefined') return '';
  let m = s.match(/^(\d{4})-(\d{2})-(\d{2})/);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;
  m = s.match(/^(\d{4})\/(\d{2})\/(\d{2})/);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;
  m = s.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})/);
  if (m) {
    const dd = String(m[1]).padStart(2, '0');
    const mm = String(m[2]).padStart(2, '0');
    const yyyy = m[3];
    return `${yyyy}-${mm}-${dd}`;
  }
  const d = new Date(s);
  if (!isNaN(d.getTime())) {
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
  }
  return '';
}

/** Mostrar como M/D/YYYY (mes/día/año) sin ceros a la izquierda. */
function toMDY(v?: string | null): string {
  if (!v) return '';
  const s = String(v).trim();
  if (!s || s.toLowerCase() === 'null' || s.toLowerCase() === 'undefined') return '';
  let m = s.match(/^(\d{4})-(\d{2})-(\d{2})/);
  if (m) return `${Number(m[2])}/${Number(m[3])}/${Number(m[1])}`;
  m = s.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2})/);
  if (m) return `${Number(m[2])}/${Number(m[3])}/${Number(m[1])}`;
  m = s.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})/);
  if (m) {
    const a = Number(m[1]); const b = Number(m[2]); const y = Number(m[3]);
    let mm: number, dd: number;
    if (b > 12 && a <= 12) { mm = a; dd = b; }
    else if (a > 12 && b <= 12) { dd = a; mm = b; }
    else { mm = a; dd = b; }
    return `${mm}/${dd}/${y}`;
  }
  const d = new Date(s);
  if (!isNaN(d.getTime())) return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;
  return '';
}

/** ========= Helpers de moneda ARS (FIX miles con punto) ========= */
function parseToNumberLike(s?: string | null): string {
  if (!s) return '';
  let t = String(s).trim().replace(/[^\d.,-]/g, '');

  const hasDot = t.includes('.');
  const hasCom = t.includes(',');

  // Punto y coma: el ÚLTIMO símbolo actúa como decimal
  if (hasDot && hasCom) {
    const lastDot = t.lastIndexOf('.');
    const lastCom = t.lastIndexOf(',');
    const decimalSep   = lastDot > lastCom ? '.' : ',';
    const thousandsSep = decimalSep === '.' ? ',' : '.';
    t = t.split(thousandsSep).join('');
    if (decimalSep === ',') t = t.replace(',', '.');
    return t;
  }

  // Solo coma -> decimal
  if (hasCom && !hasDot) return t.replace(',', '.');

  // Solo punto -> si parece miles (X.XXX[.XXX]...) quitar puntos
  if (hasDot && !hasCom) {
    const parts = t.split('.');
    const looksLikeThousands = parts.length > 1 && parts.slice(1).every(p => p.length === 3);
    return looksLikeThousands ? parts.join('') : t; // miles o decimal real
  }

  return t; // solo dígitos
}

function formatARS(v?: string | number | null): string {
  if (v == null || v === '') return '';
  const asStr = typeof v === 'number' ? String(v) : String(v);
  const norm = parseToNumberLike(asStr);
  const n = Number(norm);
  if (!isFinite(n)) return String(v);
  const parts = norm.split('.');
  const decimals = parts[1]?.length ? Math.min(2, parts[1].length) : 0;
  return '$' + n.toLocaleString('es-AR', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
}

/** ========= Normalizador de DNI/CUIT para *mostrar* ========= */
function prettifyDniCuit(s?: string | null): string {
  if (!s) return '';
  const digits = String(s).replace(/\D+/g, '');
  if (!digits) return '';

  // CUIT/CUIL: 11 dígitos → XX-XXXXXXXX-X
  if (digits.length === 11) {
    return `${digits.slice(0,2)}-${digits.slice(2,10)}-${digits.slice(10)}`;
  }

  // DNI: 7 u 8 dígitos → agrupado con puntos (X.XXX.XXX | XX.XXX.XXX)
  if (digits.length === 7 || digits.length === 8) {
    return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  }

  // Otros largos → dejar solo dígitos, mostrando miles con puntos como fallback
  return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
}

const { id } = Astro.params as { id: string };

// Perfil (para campos admin)
const perfil = (Astro.locals as any)?.perfil;
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);

/* ================== CARGA PRINCIPAL ================== */
const { data, error } = await supabase
  .from('tickets_mian')
  .select(`
    id, ticket, estado, marca_temporal, fecha_de_reparacion, tecnico_id, cliente_id, impresora_id,
    imagen, imagen_ticket, imagen_extra, notas_del_tecnico, notas_del_cliente,
    cliente:cliente_id ( id, dni_cuit, correo_electronico, whatsapp, comentarios ),
    tecnicos:tecnico_id ( id, nombre, apellido, email ),
    impresoras:impresora_id ( modelo, maquina, numero_de_serie, tamano_de_boquilla ),
    delivery ( pagado, cotizar_delivery, informacion_adicional_delivery, fecha_de_entrega, medio_de_entrega ),
    presupuestos ( id, monto, link_presupuesto, cubre_garantia, fecha_presupuesto )
  `)
  .eq('id', id)
  .maybeSingle();

if (error) console.error('[editar] supabase error:', error);

const row = (data ?? null) as any;

/* Normalización defensiva */
let clienteJoin = row?.cliente;
if (Array.isArray(clienteJoin)) clienteJoin = clienteJoin[0] ?? null;

let equipo: any = row ? {
  ...row,
  cliente: clienteJoin ?? null,
  tecnicos: Array.isArray(row?.tecnicos) ? row.tecnicos[0] : row?.tecnicos,
  impresoras: Array.isArray(row?.impresoras) ? row.impresoras[0] : row?.impresoras,
  delivery: Array.isArray(row?.delivery) ? row.delivery[0] : row?.delivery,
  presupuestos: Array.isArray(row?.presupuestos)
    ? (row.presupuestos.sort((a:any,b:any)=>Number(a.id)-Number(b.id))[row.presupuestos.length-1] ?? null)
    : row?.presupuestos,
} : null;

if (equipo && (!equipo.cliente || (
  equipo.cliente.dni_cuit == null &&
  equipo.cliente.whatsapp == null &&
  equipo.cliente.correo_electronico == null &&
  equipo.cliente.comentarios == null
))) {
  const { data: cliFB } = await supabase
    .from('cliente')
    .select('id, dni_cuit, correo_electronico, whatsapp, comentarios')
    .eq('id', equipo.cliente_id)
    .maybeSingle();
  if (cliFB) equipo.cliente = cliFB;
}

const estados = [
  "Nuevo","Retirar","Presupuestar","Enviar presupuesto","P. Enviado",
  "Reparación","Prueba","Lista","Entregada","Feedback Enviado","Archivada","No realizada"
];

// Fallbacks de imágenes
const urlMain   = equipo?.imagen        || supabase.storage.from('imagenes').getPublicUrl(`public/${id}.webp`).data.publicUrl;
const urlTicket = equipo?.imagen_ticket || supabase.storage.from('imagenes').getPublicUrl(`public/${id}_ticket.webp`).data.publicUrl;
const urlExtra  = equipo?.imagen_extra  || supabase.storage.from('imagenes').getPublicUrl(`public/${id}_extra.webp`).data.publicUrl;

// selects booleanos
const valorCubreGarantia = (equipo?.presupuestos?.cubre_garantia === 'true') ? 'true' : 'false';
const valorCobrado = (equipo?.delivery?.pagado === 'true') ? 'true' : 'false';
const estadoActual = (equipo?.estado || '').trim();

// Técnico actual -> label = parte antes de @
const currentTecId: number | null =
  equipo?.tecnico_id != null ? Number(equipo.tecnico_id) : null;

const currentTecLabel: string = (() => {
  const t = equipo?.tecnicos || null;
  if (!t) return '';
  const mail = String(t.email || '').trim();
  if (mail.includes('@')) return mail.split('@')[0];
  const nombre = String(t.nombre || '').trim();
  return nombre || '';
})();
---

<BasePrivateLayout>
  <style>
    .section-card { border: 1px solid rgba(0,0,0,.08); border-radius: 12px; padding: 1rem; background: #fff; }
    .section-title { font-weight: 700; font-size: .95rem; color: #0d6efd; margin-bottom: .5rem; display: flex; align-items: center; gap: .5rem; }
    .section-title.center { justify-content: center; }
    .grid-2 { display: grid; grid-template-columns: 1fr; gap: .75rem; }
    @media (min-width: 768px) { .grid-2 { grid-template-columns: 1fr 1fr; } }
    .actions { display: flex; gap: .5rem; justify-content: flex-end; }
    .img-row { display:flex; flex-direction:column; align-items:center; justify-content:center; gap:1rem; }
    @media (min-width:768px){ .img-row{ flex-direction:row; align-items:center; justify-content:center; gap:1.25rem; } }
    .img-box { border-radius:15px; overflow:hidden; border:1px solid rgba(0,0,0,.1); box-shadow:0 2px 8px rgba(0,0,0,.06); }
    .img-box img { display:block; width:auto; height:auto; max-width:300px; max-height:300px; object-fit:contain; }
    .btn-col { display:flex; flex-direction:column; align-items:center; gap:.5rem; }
  </style>

  <div class="container mt-4">
    <h1 class="h4 mb-3">Editar ticket</h1>

    {equipo ? (
      <form
        method="POST"
        action={`/api/actualizarTicket?id=${encodeURIComponent(String(equipo.id))}`}
        enctype="multipart/form-data"
        class="d-flex flex-column gap-3"
        id="form-editar-equipo"
        style="max-width: 980px; margin: 0 auto;"
      >
        <input type="hidden" name="ticketId" value={String(equipo.id)} />
        <input type="hidden" name="id"        value={String(equipo.id)} />

        <!-- 1) DATOS DEL TICKET -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-ticket-perforated"></i> Datos del ticket</div>
          <div class="grid-2">
            <div>
              <label class="form-label">N° Ticket</label>
              <input type="number" class="form-control" value={equipo.ticket} disabled />
            </div>
            <div>
              <label class="form-label">Estado</label>
              <select name="estado" class="form-select" required>
                {estados.map((op) => (
                  <option value={op} selected={estadoActual.toLowerCase() === op.toLowerCase()}>{op}</option>
                ))}
              </select>
            </div>

            <!-- Técnico dinámico: label = email antes del @ -->
            <div>
              <label class="form-label">Técnico</label>
              <select
                id="select-tecnico"
                name="tecnico_id"
                class="form-select"
                data-current-tecnicoid={String(equipo?.tecnico_id ?? '')}
              >
                <option value="">— Sin asignar —</option>
                {currentTecId && currentTecLabel && (
                  <option value={String(currentTecId)} selected>{currentTecLabel}</option>
                )}
              </select>
              <small id="tecHelp" class="form-text text-muted"></small>
            </div>

            <div>
              <label class="form-label">Fecha formulario</label>
              <input name="fechaFormulario" type="text" class="form-control" value={toMDY(equipo.marca_temporal)} />
            </div>
            <div>
              <label class="form-label">Fecha listo</label>
              <input type="date" class="form-control" value={toISODate(equipo.fecha_de_reparacion)} disabled />
            </div>
          </div>
        </div>

        <!-- 2) DATOS DEL CLIENTE -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-person-badge"></i> Datos del cliente</div>
          <div class="grid-2">
            <div>
              <label class="form-label">DNI/CUIT</label>
              <!-- Máximo recomendado: 14 (11 dígitos + guiones) -->
              <input
                name="dniCuit"
                id="input-dni-cuit"
                type="text"
                inputmode="numeric"
                autocomplete="off"
                class="form-control"
                value={prettifyDniCuit(equipo.cliente?.dni_cuit || '')}
                maxlength="14"
                placeholder="Ej: 12.345.678 o 20-12345678-3"
              />
            </div>
            <div>
              <label class="form-label">WhatsApp</label>
              <input name="whatsapp" type="text" class="form-control" value={equipo.cliente?.whatsapp || ''} />
            </div>
            <div class="col-12">
              <label class="form-label">Correo</label>
              <input name="correo" type="email" class="form-control" value={equipo.cliente?.correo_electronico || ''} />
            </div>
          </div>
        </div>

        <!-- 3) IMPRESORA -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-printer"></i> Impresora</div>
          <div class="grid-2">
            <div>
              <label class="form-label">Máquina</label>
              <input name="maquina" type="text" class="form-control" value={equipo.impresoras?.modelo || ''} />
            </div>
            <div>
              <label class="form-label">N° de serie</label>
              <input name="numeroSerie" type="text" class="form-control" value={equipo.impresoras?.numero_de_serie || ''} />
            </div>
            <div class="col-12">
              <label class="form-label">Tamaño de boquilla</label>
              <input name="boquilla" type="text" class="form-control" value={equipo.impresoras?.tamano_de_boquilla || ''} />
            </div>
          </div>
        </div>

        <!-- 4) PRESUPUESTO -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-receipt"></i> Presupuesto</div>
          <div class="grid-2">
            <div>
              <label class="form-label">Monto</label>
              <input
                name="monto"
                type="text"
                class="form-control currency-ars"
                value={formatARS(equipo.presupuestos?.monto)}
                placeholder="$10.000,00"
              />
            </div>
            <div>
              <label class="form-label">Link presupuesto</label>
              <input name="linkPresupuesto" type="url" class="form-control" value={equipo.presupuestos?.link_presupuesto || ''} />
            </div>
            <div>
              <label class="form-label">¿Cubre garantía?</label>
              <select name="cubreGarantia" class="form-select">
                <option value="true"  selected={valorCubreGarantia === 'true'}>Sí</option>
                <option value="false" selected={valorCubreGarantia === 'false'}>No</option>
              </select>
            </div>
            <div>
              <label class="form-label">Fecha presupuesto</label>
              <input type="date" class="form-control" value={toISODate(equipo.presupuestos?.fecha_presupuesto)} disabled />
            </div>
          </div>
        </div>

        <!-- 5) DELIVERY -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-truck"></i> Delivery</div>
          <div class="grid-2">
            <div>
              <label class="form-label">¿Cobrado?</label>
              <select name="cobrado" class="form-select">
                <option value="true"  selected={valorCobrado === 'true'}>Sí</option>
                <option value="false" selected={valorCobrado === 'false'}>No</option>
              </select>
            </div>
            {isAdmin && (
              <>
                <div>
                  <label class="form-label">Modo de entrega</label>
                  <input name="medioEntrega" type="text" class="form-control" value={equipo.delivery?.medio_de_entrega || ''} />
                </div>
                <div>
                  <label class="form-label">Costo delivery</label>
                  <input
                    name="costoDelivery"
                    type="text"
                    class="form-control currency-ars"
                    value={formatARS(equipo.delivery?.cotizar_delivery)}
                    placeholder="$3.500"
                  />
                </div>
                <div>
                  <label class="form-label">Info delivery</label>
                  <input name="infoDelivery" type="text" class="form-control" value={equipo.delivery?.informacion_adicional_delivery || ''} />
                </div>
              </>
            )}
            <div>
              <label class="form-label">Fecha de entrega</label>
              <input type="date" class="form-control" value={toISODate(equipo.delivery?.fecha_de_entrega)} disabled />
            </div>
          </div>
        </div>

        <!-- 6) NOTAS & COMENTARIOS -->
        <div class="section-card">
          <div class="section-title"><i class="bi bi-journal-text"></i> Notas & Comentarios</div>
          <div class="grid-2">
            <div class="col-12">
              <label class="form-label">Nota Técnico</label>
              <textarea name="notaTecnico" class="form-control" rows="3">{equipo.notas_del_tecnico || ''}</textarea>
            </div>
            <div class="col-12">
              <label class="form-label">Comentarios del cliente (detalle del problema)</label>
              <textarea name="detalleCliente" class="form-control" rows="3">{equipo.notas_del_cliente || equipo.cliente?.comentarios || ''}</textarea>
            </div>
          </div>
        </div>

        <!-- 7) IMÁGENES -->
        <div class="section-card">
          <div class="section-title center"><i class="bi bi-images"></i> Imágenes</div>

          <div class="mb-4">
            <h6 class="mb-2 text-center">Imagen principal</h6>
            <div class="img-row">
              <div class="img-box">
                <img id="img-actual-o-preview" src={urlMain} alt="Imagen actual" onerror="this.onerror=null;this.src='/logo.webp';" loading="lazy" />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen
                  <input type="file" name="imagenArchivo" accept="image/*" id="input-imagen-archivo" style="display:none;" />
                </label>
                <input type="hidden" name="borrarImagen" id="input-borrar-imagen" value="false" />
                <button type="button" class="btn btn-danger px-4" id="btn-eliminar-equipo">Eliminar imagen</button>
              </div>
            </div>
          </div>

          <div class="mb-4">
            <h6 class="mb-2 text-center">Imagen del ticket</h6>
            <div class="img-row">
              <div class="img-box">
                <img id="img-ticket-preview" src={urlTicket} alt="Imagen ticket" onerror="this.onerror=null;this.src='/logo.webp';" loading="lazy" />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen ticket
                  <input type="file" name="imagenTicketArchivo" accept="image/*" id="input-imagen-ticket" style="display:none;" />
                </label>
                <input type="hidden" name="borrarImagenTicket" id="input-borrar-imagen-ticket" value="false" />
                <button type="button" class="btn btn-danger px-4" id="btn-eliminar-imagen-ticket">Eliminar imagen ticket</button>
              </div>
            </div>
          </div>

          <div>
            <h6 class="mb-2 text-center">Imagen extra</h6>
            <div class="img-row">
              <div class="img-box">
                <img id="img-extra-preview" src={urlExtra} alt="Imagen extra" onerror="this.onerror=null;this.src='/logo.webp';" loading="lazy" />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen extra
                  <input type="file" name="imagenExtraArchivo" accept="image/*" id="input-imagen-extra" style="display:none;" />
                </label>
                <input type="hidden" name="borrarImagenExtra" id="input-borrar-imagen-extra" value="false" />
                <button type="button" class="btn btn-danger px-4" id="btn-eliminar-imagen-extra">Eliminar imagen extra</button>
              </div>
            </div>
          </div>
        </div>

        <div class="actions">
          <button type="submit" class="btn btn-success px-4">
            <i class="bi bi-check2-square me-1"></i> Guardar cambios
          </button>
        </div>
      </form>
    ) : (
      <p class="text-danger">No se encontró el equipo con ID: {id}</p>
    )}
  </div>

  <script src="https://unpkg.com/browser-image-compression@latest/dist/browser-image-compression.js" defer></script>
  <script src="/scripts/form-mas-imagenes.js?v=1" defer></script>

  <!-- Cargar técnicos dinámicamente desde /api/listarTecnicos (evita duplicados) -->
  <script>
    (async function(){
      const sel  = document.getElementById('select-tecnico');
      const help = document.getElementById('tecHelp');
      if (!(sel instanceof HTMLSelectElement)) return;
      const current = sel.dataset.currentTecnicoid ? Number(sel.dataset.currentTecnicoid) : null;

      try {
        const res  = await fetch('/api/listarTecnicos', { headers: { 'Accept': 'application/json' } });
        const data = await res.json();
        if (!res.ok || !data?.items) throw new Error(data?.error || 'No se pudo cargar técnicos');

        // Evitar duplicar el option semilla (el actual)
        const ya = new Set(Array.from(sel.options).map(o => Number(o.value) || 0));

        (data.items || []).forEach((it) => {
          const idNum = Number(it.id);
          if (ya.has(idNum)) return; // ya existe (semilla o previo)
          const opt = document.createElement('option');
          opt.value = String(it.id);
          opt.textContent = it.label; // local-part del email
          if (current && idNum === current) opt.selected = true;
          sel.appendChild(opt);
        });

        if (help) help.textContent = '';
      } catch (err) {
        if (help) help.textContent = 'No se pudo cargar la lista de técnicos.';
        console.error('[listarTecnicos]', err);
      }
    })();
  </script>

  <!-- Formateo ARS al escribir -->
    <script>
      (function(){
        function parseToNumberLike(s){
          if(!s) return '';
          let t=String(s).trim().replace(/[^\d.,-]/g,'');
          const lastDot=t.lastIndexOf('.'), lastCom=t.lastIndexOf(',');
          if(lastDot!==-1&&lastCom!==-1){
            const dec=lastDot>lastCom?'.':','; const mil=dec==='.'?',':'.';
            t=t.split(mil).join(''); if(dec===',') t=t.replace(',', '.');
          } else if(lastCom!==-1&&lastDot===-1){
            t=t.replace(',', '.');
          }
          return t;
        }
        function formatARSFromStr(s){
          const n=Number(parseToNumberLike(s));
          if(!isFinite(n)) return s||'';
          const dec=(String(s).split('.')[1]||'').length;
          const d=dec?Math.min(2,dec):0;
          return '$'+n.toLocaleString('es-AR',{minimumFractionDigits:d, maximumFractionDigits:d});
        }
        function onBlurFormat(e){
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          el.value = formatARSFromStr(el.value);
        }
        function onInputClean(e){
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          el.value = el.value.replace(/[^\d.,$-]/g,'');
        }
        document.querySelectorAll('.currency-ars').forEach((node)=>{
          const input = node instanceof HTMLInputElement ? node : null;
          if (!input) return;
          input.addEventListener('blur',  onBlurFormat);
          input.addEventListener('input', onInputClean);
        });
      })();
    </script>


  <!-- Formateo DNI/CUIT en vivo: 8 dígitos -> XX.XXX.XXX | 11 dígitos -> XX-XXXXXXXX-X -->
  <script>
    (function(){
      function formatDniCuitLive(raw){
        const digits = String(raw||'').replace(/\D+/g, '');
        if (!digits) return '';
        // CUIT/CUIL (11)
        if (digits.length === 11) {
          return digits.slice(0,2)+'-'+digits.slice(2,10)+'-'+digits.slice(10);
        }
        // DNI (7 u 8) -> miles con puntos
        if (digits.length === 7 || digits.length === 8) {
          return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        }
        // Otros -> permitir puntos/guiones ya escritos y limpiar lo demás
        return String(raw||'').replace(/[^\d\.\-]/g,'');
      }

      const input = document.getElementById('input-dni-cuit');
      if (input instanceof HTMLInputElement) {
        input.addEventListener('input', (e) => {
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          const before = el.value;
          const after  = formatDniCuitLive(before);
          if (before !== after) {
            const atEnd = el.selectionStart === before.length;
            el.value = after;
            try { if (atEnd) el.setSelectionRange(after.length, after.length); } catch {}
          }
        });
        input.addEventListener('blur', (e) => {
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          el.value = formatDniCuitLive(el.value);
        });
      }
    })();
  </script>



  <!-- Normalizador de “Tamaño de boquilla” a `X mm` (solo en editar) -->
  <script>
    (function () {
      function parseNozzle(raw) {
        if (raw == null) return '';
        let s = String(raw).toLowerCase().trim();
        s = s.replace(',', '.');
        const m = s.match(/(\d+\.?\d*|\.\d+)/);
        if (!m) return '';
        let num = m[0];
        if (num.startsWith('.')) num = '0' + num;   // .4 -> 0.4
        if (num.endsWith('.'))  num = num.slice(0,-1); // 1. -> 1
        const n = Number(num);
        if (!isFinite(n)) return '';
        let out = n.toFixed(2);
        out = out.replace(/\.?0+$/, ''); // quita ceros/punto sobrantes
        return out;
      }
      function normalizeToMm(raw) {
        const num = parseNozzle(raw);
        return num ? (num + ' mm') : '';
      }

      const input = document.querySelector('input[name="boquilla"]');
      if (!(input instanceof HTMLInputElement)) return;

      // Normaliza al cargar si ya hay valor
      if (input.value && input.value.trim()) {
        input.value = normalizeToMm(input.value);
      }

      // Limpiar caracteres raros mientras escribe
      input.addEventListener('input', (e) => {
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        const before = el.value;
        const cleaned = before.replace(/[^0-9.,a-zA-Z\s]/g, '');
        if (before !== cleaned) el.value = cleaned;
      });

      // Normaliza al salir del campo
      input.addEventListener('blur', (e) => {
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        el.value = normalizeToMm(el.value);
      });
    })();
  </script>

</BasePrivateLayout>
