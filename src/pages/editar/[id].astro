---
import BasePrivateLayout from '../../layouts/BasePrivateLayout.astro';
import { supabase } from '../../lib/supabase';

/**
 * P√°gina /editar/:id
 *
 * üõ† Prop√≥sito:
 * - Formulario para editar un ticket existente:
 *    ‚Ä¢ Estado, t√©cnico asignado, fechas
 *    ‚Ä¢ Datos del cliente (contacto, DNI/CUIT)
 *    ‚Ä¢ Datos de la impresora (modelo, serie, boquilla)
 *    ‚Ä¢ Presupuesto (monto, link, garant√≠a)
 *    ‚Ä¢ Delivery (pago, costo, info log√≠stica)
 *    ‚Ä¢ Notas internas / comentarios del cliente
 *    ‚Ä¢ Im√°genes del equipo (llegada, reparaci√≥n, final)
 *
 * üîÑ Flujo de datos:
 * - Se hace SSR con Supabase:
 *    1. Cargamos ticket + joins (cliente, t√©cnico, impresora, delivery, presupuestos).
 *    2. Normalizamos joins que a veces llegan como array.
 *    3. Seleccionamos el presupuesto m√°s reciente.
 *    4. Construimos URLs de im√°genes, con fallback al storage p√∫blico de Supabase.
 *
 * üíæ Env√≠o:
 * - El <form> hace POST multipart/form-data a /api/actualizarTicket?id=<ticketId>.
 * - Ese endpoint debe persistir cambios de texto y subir/reemplazar/borrar im√°genes.
 *
 * üîê Permisos:
 * - Se determina si el usuario es admin desde Astro.locals.perfil.
 * - Campos de delivery m√°s sensibles solo se muestran a admin.
 *
 * üß† Detalles de UX:
 * - El select de "T√©cnico" se llena din√°micamente desde /api/listarTecnicos en el cliente.
 * - El select de "Modelo / L√≠nea" tiene una opci√≥n "OTRA__ESPECIFICAR" que habilita un input libre.
 * - Inputs monetarios tienen formateo ARS en vivo.
 * - DNI/CUIT se formatea en vivo.
 * - Campo "boquilla" se normaliza a "X mm".
 * - Botones de imagen permiten previsualizar reemplazo y marcar eliminaci√≥n.
 */

// ======================================================================
// 0Ô∏è‚É£ Cat√°logo de modelos de impresoras
//    (sirve para el <select> y para la l√≥gica "OTRA__ESPECIFICAR")
// ======================================================================
/** Lista fija para el selector de impresoras */
const impresoras = [
  "PK3 MK8",
  "PK3++ MK8",
  "PK3++ EXT MK8",
  "PK3 BMG",
  "PK3++ BMG",
  "PK3++ EXT BMG",
  "Artillery",
  "Bambulab",
  "Creality",
  "Hellbot",
  "OTRA__ESPECIFICAR"
];

// ======================================================================
// 1Ô∏è‚É£ Helpers del lado servidor (Astro SSR)
// ======================================================================

/**
 * toISODate(v):
 * Devuelve una fecha en formato "YYYY-MM-DD" lista para <input type="date" />.
 * Acepta:
 *   - ISO completo "2025-10-30T12:34:56Z"
 *   - "YYYY-MM-DD"
 *   - "YYYY/MM/DD"
 *   - "DD/MM/YYYY" o "MM-DD-YYYY"
 *   - strings raras parseables por Date()
 * Si no puede parsear, devuelve ''.
 */
function toISODate(v?: string | null): string {
  if (!v) return '';
  const s = String(v).trim();
  if (!s || s.toLowerCase() === 'null' || s.toLowerCase() === 'undefined') return '';

  // Directo YYYY-MM-DD
  let m = s.match(/^(\d{4})-(\d{2})-(\d{2})/);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;

  // YYYY/MM/DD
  m = s.match(/^(\d{4})\/(\d{2})\/(\d{2})/);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;

  // DD/MM/YYYY √≥ MM-DD-YYYY (intentamos deducir orden)
  m = s.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})/);
  if (m) {
    const dd = String(m[1]).padStart(2, '0');
    const mm = String(m[2]).padStart(2, '0');
    const yyyy = m[3];
    return `${yyyy}-${mm}-${dd}`;
  }

  // √öltimo intento: Date nativo
  const d = new Date(s);
  if (!isNaN(d.getTime())) {
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
  }

  return '';
}

/**
 * toMDY(v):
 * Muestra la fecha como M/D/YYYY sin ceros a la izquierda
 * (pensado para "Fecha formulario", que es m√°s humana que editable).
 */
function toMDY(v?: string | null): string {
  if (!v) return '';
  const s = String(v).trim();
  if (!s || s.toLowerCase() === 'null' || s.toLowerCase() === 'undefined') return '';

  // YYYY-MM-DD
  let m = s.match(/^(\d{4})-((\d{2}))-(\d{2})/);
  if (m) return `${Number(m[2])}/${Number(m[3])}/${Number(m[1])}`;

  // YYYY/MM/DD
  m = s.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2})/);
  if (m) return `${Number(m[2])}/${Number(m[3])}/${Number(m[1])}`;

  // DD/MM/YYYY o MM-DD-YYYY ambiguo
  m = s.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})/);
  if (m) {
    const a = Number(m[1]);
    const b = Number(m[2]);
    const y = Number(m[3]);
    let mm: number, dd: number;
    // Heur√≠stica para decidir mes/d√≠a
    if (b > 12 && a <= 12) { mm = a; dd = b; }
    else if (a > 12 && b <= 12) { dd = a; mm = b; }
    else { mm = a; dd = b; }
    return `${mm}/${dd}/${y}`;
  }

  // Fallback con Date()
  const d = new Date(s);
  if (!isNaN(d.getTime())) return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;

  return '';
}

/**
 * parseToNumberLike(s):
 * - Intenta "limpiar" un string de precio ARS.
 * - Quita s√≠mbolos que no sean d√≠gitos, coma, punto, signo.
 * - Detecta coma y punto para ver cu√°l es decimal vs miles.
 *   ‚Ä¢ Si hay ambos, asume que el √∫ltimo en aparecer es el decimal.
 *   ‚Ä¢ Si hay s√≥lo coma, la trata de decimal.
 *   ‚Ä¢ Si hay s√≥lo punto, lo trata de decimal salvo que parezca separador de miles.
 *
 * Devuelve un string listo para pasar a Number().
 */
function parseToNumberLike(s?: string | null): string {
  if (!s) return '';
  let t = String(s).trim().replace(/[^\d.,-]/g, '');

  const hasDot = t.includes('.');
  const hasCom = t.includes(',');

  // Tiene punto y coma ‚Üí inferimos cu√°l es miles y cu√°l es decimal
  if (hasDot && hasCom) {
    const lastDot = t.lastIndexOf('.');
    const lastCom = t.lastIndexOf(',');
    const decimalSep   = lastDot > lastCom ? '.' : ',';
    const thousandsSep = decimalSep === '.' ? ',' : '.';
    t = t.split(thousandsSep).join('');
    if (decimalSep === ',') t = t.replace(',', '.');
    return t;
  }

  // Solo coma ‚Üí coma decimal
  if (hasCom && !hasDot) return t.replace(',', '.');

  // Solo punto ‚Üí si parece miles tipo "12.345.678", sacamos puntos
  if (hasDot && !hasCom) {
    const parts = t.split('.');
    const looksLikeThousands = parts.length > 1 && parts.slice(1).every(p => p.length === 3);
    return looksLikeThousands ? parts.join('') : t;
  }

  // Solo d√≠gitos
  return t;
}

/**
 * formatARS(v):
 * Muestra un valor en formato moneda argentina "$12.345,67"
 * con hasta 2 decimales.
 * - Usa parseToNumberLike() para entender strings con "." y "," mezclados.
 */
function formatARS(v?: string | number | null): string {
  if (v == null || v === '') return '';
  const asStr = typeof v === 'number' ? String(v) : String(v);
  const norm = parseToNumberLike(asStr);
  const n = Number(norm);
  if (!isFinite(n)) return String(v);
  const parts = norm.split('.');
  const decimals = parts[1]?.length ? Math.min(2, parts[1].length) : 0;
  return '$' + n.toLocaleString('es-AR', {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals
  });
}

/**
 * prettifyDniCuit(s):
 * Devuelve DNI/CUIT con formato humano:
 *   - CUIT/CUIL (11 d√≠gitos) ‚Üí "##-########-#"
 *   - DNI (7 u 8 d√≠gitos)    ‚Üí "12.345.678"
 *   - Fallback: separadores de miles.
 * Esto es s√≥lo visual en el input.
 */
function prettifyDniCuit(s?: string | null): string {
  if (!s) return '';
  const digits = String(s).replace(/\D+/g, '');
  if (!digits) return '';

  if (digits.length === 11) {
    return `${digits.slice(0,2)}-${digits.slice(2,10)}-${digits.slice(10)}`;
  }

  if (digits.length === 7 || digits.length === 8) {
    return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  }

  return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
}

// ======================================================================
// 2Ô∏è‚É£ Carga de datos desde Supabase (SSR)
// ======================================================================

// ID del ticket tomado de la URL /editar/:id
const { id } = Astro.params as { id: string };

// Perfil/rol del usuario, para condicionar campos s√≥lo-admin
const perfil = (Astro.locals as any)?.perfil;
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);

/**
 * Consulta principal:
 * - Trae ticket y campos asociados.
 * - Joins:
 *    ‚Ä¢ cliente:cliente_id
 *    ‚Ä¢ tecnicos:tecnico_id
 *    ‚Ä¢ impresoras:impresora_id
 *    ‚Ä¢ delivery (relaci√≥n directa)
 *    ‚Ä¢ presupuestos (lista hist√≥rica)
 *
 * Notar:
 * - "presupuestos" es una relaci√≥n 1:N ‚Üí despu√©s elegimos el m√°s reciente.
 * - delivery puede venir como array, igual que impresoras y tecnicos,
 *   as√≠ que m√°s abajo lo aplanamos.
 */
const { data, error } = await supabase
  .from('tickets_mian')
  .select(`
    id,
    ticket,
    estado,
    marca_temporal,
    fecha_de_reparacion,
    tecnico_id,
    cliente_id,
    impresora_id,
    imagen,
    imagen_ticket,
    imagen_extra,
    notas_del_tecnico,
    notas_del_cliente,

    cliente:cliente_id (
      id,
      dni_cuit,
      correo_electronico,
      whatsapp,
      comentarios
    ),

    tecnicos:tecnico_id (
      id,
      nombre,
      apellido,
      email
    ),

    impresoras:impresora_id (
      modelo,
      maquina,
      numero_de_serie,
      tamano_de_boquilla
    ),

    delivery (
      pagado,
      cotizar_delivery,
      informacion_adicional_delivery,
      fecha_de_entrega,
      medio_de_entrega
    ),

    presupuestos (
      id,
      monto,
      link_presupuesto,
      cubre_garantia,
      fecha_presupuesto
    )
  `)
  .eq('id', id)
  .maybeSingle();

if (error) console.error('[editar] supabase error:', error);

// `row` es el registro crudo del ticket
const row = (data ?? null) as any;

/**
 * Normalizaci√≥n defensiva:
 * - Algunos joins vienen como array, otros como objeto √∫nico.
 * - Nos aseguramos de dejar `equipo` con:
 *     equipo.cliente      = objeto cliente
 *     equipo.tecnicos     = objeto t√©cnico
 *     equipo.impresoras   = objeto impresora
 *     equipo.delivery     = objeto delivery
 *     equipo.presupuestos = √∫ltimo presupuesto (no array)
 *
 * Adem√°s:
 * - Si el cliente vino vac√≠o en el join inicial, hacemos fallback a una
 *   consulta puntual a la tabla `cliente` para recuperar contacto.
 */
let clienteJoin = row?.cliente;
if (Array.isArray(clienteJoin)) clienteJoin = clienteJoin[0] ?? null;

// Creamos "equipo", la estructura que usamos para popular el form
let equipo: any = row ? {
  ...row,
  cliente: clienteJoin ?? null,

  // tecnicos / impresoras / delivery pueden venir como array
  tecnicos: Array.isArray(row?.tecnicos)   ? row.tecnicos[0]   : row?.tecnicos,
  impresoras: Array.isArray(row?.impresoras) ? row?.impresoras[0] : row?.impresoras,
  delivery: Array.isArray(row?.delivery)   ? row.delivery[0]   : row?.delivery,

  // De varios presupuestos, nos quedamos con el √∫ltimo (ID m√°s grande)
  presupuestos: Array.isArray(row?.presupuestos)
    ? (row.presupuestos.sort((a:any,b:any)=>Number(a.id)-Number(b.id))[row.presupuestos.length-1] ?? null)
    : row?.presupuestos,
} : null;

// Si todav√≠a no tenemos info del cliente (o vino muy vac√≠a),
// intentamos refetch de cliente para completar whatsapp / correo / etc.
if (
  equipo &&
  (!equipo.cliente || (
    equipo.cliente.dni_cuit == null &&
    equipo.cliente.whatsapp == null &&
    equipo.cliente.correo_electronico == null &&
    equipo.cliente.comentarios == null
  ))
) {
  const { data: cliFB } = await supabase
    .from('cliente')
    .select('id, dni_cuit, correo_electronico, whatsapp, comentarios')
    .eq('id', equipo.cliente_id)
    .maybeSingle();
  if (cliFB) equipo.cliente = cliFB;
}

// ======================================================================
// 3Ô∏è‚É£ Constantes de UI: selects y valores actuales
// ======================================================================

// Estados posibles del ticket
const estados = [
  "Nuevo","Presupuestar","Enviar presupuesto","P. Enviado",
  "Reparaci√≥n","Prueba","Lista", "Retirar", "Entregada",
  "Feedback Enviado","Archivada","No realizada"
];

// URLs de im√°genes de fallback:
// Si el ticket ya tiene imagen_* usamos esa.
// Si no, intentamos obtener la URL p√∫blica en el bucket supabase.storage.
const urlMain   = equipo?.imagen
  || supabase.storage.from('imagenes').getPublicUrl(`public/${id}.webp`).data.publicUrl;

const urlTicket = equipo?.imagen_ticket
  || supabase.storage.from('imagenes').getPublicUrl(`public/${id}_ticket.webp`).data.publicUrl;

const urlExtra  = equipo?.imagen_extra
  || supabase.storage.from('imagenes').getPublicUrl(`public/${id}_extra.webp`).data.publicUrl;

// Select booleanos:
const valorCubreGarantia = (equipo?.presupuestos?.cubre_garantia === 'true') ? 'true' : 'false';
const valorCobrado       = (equipo?.delivery?.pagado === 'true') ? 'true' : 'false';

// Estado actual como string simple
const estadoActual = (equipo?.estado || '').trim();

// T√©cnico asignado actualmente (para marcar como selected en el combo din√°mico)
const currentTecId: number | null =
  equipo?.tecnico_id != null ? Number(equipo.tecnico_id) : null;

/**
 * currentTecLabel:
 * - Label legible para el t√©cnico actual.
 * - Preferimos la parte antes de la @ del email.
 * - Si no hay email, usamos el nombre del t√©cnico.
 */
const currentTecLabel: string = (() => {
  const t = equipo?.tecnicos || null;
  if (!t) return '';
  const mail = String(t.email || '').trim();
  if (mail.includes('@')) return mail.split('@')[0];
  const nombre = String(t.nombre || '').trim();
  return nombre || '';
})();

/**
 * L√≥gica para el selector de impresora:
 *
 * - El form tiene un <select> con lista fija (impresoras[]).
 * - Tambi√©n hay un input libre "Modelo espec√≠fico".
 * - Si el modelo actual NO est√° en la lista, marcamos la opci√≥n
 *   'OTRA__ESPECIFICAR' y mostramos el input libre con ese valor precargado.
 */
const modeloActualRaw = (equipo?.impresoras?.modelo || '').toString().trim();
const estaEnLista = impresoras.includes(modeloActualRaw);
const isOtra = !estaEnLista && modeloActualRaw !== '';
const valorOtra = isOtra ? modeloActualRaw : '';
const valorSelect = isOtra ? 'OTRA__ESPECIFICAR' : (modeloActualRaw || '');
---

<BasePrivateLayout>
  <style>
    /* ================================================================
       üé® Estilos locales de la vista de edici√≥n
       - section-card: caja blanca con borde leve
       - grid-2: responsive 2 cols en desktop / 1 col mobile
       - img-row: layout de im√°genes con su panel de botones
       ================================================================ */
    .section-card { border: 1px solid rgba(0,0,0,.08); border-radius: 12px; padding: 1rem; background: #fff; }
    .section-title { font-weight: 700; font-size: .95rem; color: #0d6efd; margin-bottom: .5rem; display: flex; align-items: center; gap: .5rem; }
    .section-title.center { justify-content: center; }

    .grid-2 { display: grid; grid-template-columns: 1fr; gap: .75rem; }
    @media (min-width: 768px) { .grid-2 { grid-template-columns: 1fr 1fr; } }

    .actions { display: flex; gap: .5rem; justify-content: flex-end; flex-wrap: wrap; }

    .img-row { display:flex; flex-direction:column; align-items:center; justify-content:center; gap:1rem; }
    @media (min-width:768px){ .img-row{ flex-direction:row; align-items:center; justify-content:center; gap:1.25rem; } }

    .img-box { border-radius:15px; overflow:hidden; border:1px solid rgba(0,0,0,.1); box-shadow:0 2px 8px rgba(0,0,0,.06); }
    .img-box img { display:block; width:auto; height:auto; max-width:300px; max-height:300px; object-fit:contain; }

    .btn-col { display:flex; flex-direction:column; align-items:center; gap:.5rem; }

    .hidden { display:none !important; }
  </style>

  <div class="container mt-4">
    <h1 class="h4 mb-3">Editar ticket</h1>

    {equipo ? (
      /* ============================================================
         FORM PRINCIPAL
         - method POST ‚Üí /api/actualizarTicket
         - enctype multipart/form-data porque subimos im√°genes
         - Se incluyen:
           * datos del ticket
           * datos cliente
           * impresora
           * presupuesto
           * delivery
           * notas
           * im√°genes (3 slots)
         ============================================================ */
      <form
        method="POST"
        action={`/api/actualizarTicket?id=${encodeURIComponent(String(equipo.id))}`}
        enctype="multipart/form-data"
        class="d-flex flex-column gap-3"
        id="form-editar-equipo"
        style="max-width: 980px; margin: 0 auto;"
      >
        {/* IDs ocultos para el backend */}
        <input type="hidden" name="ticketId" value={String(equipo.id)} />
        <input type="hidden" name="id"        value={String(equipo.id)} />

        {/* ============================================================
           1) DATOS DEL TICKET
           - Estado
           - T√©cnico asignado
           - Fechas
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-ticket-perforated"></i> Datos del ticket</div>
          <div class="grid-2">
            <div>
              <label class="form-label">N¬∞ Ticket</label>
              <input type="number" class="form-control" value={equipo.ticket} disabled />
            </div>

            <div>
              <label class="form-label">Estado</label>
              <select name="estado" class="form-select" required id="select-estado">
                {estados.map((op) => (
                  <option
                    value={op}
                    selected={estadoActual.toLowerCase() === op.toLowerCase()}
                  >
                    {op}
                  </option>
                ))}
              </select>
            </div>

            {/* T√©cnico asignado:
               - El option inicial muestra el t√©cnico actual (si hay).
               - El resto se llena v√≠a fetch(/api/listarTecnicos) en el script de abajo. */}
            <div>
              <label class="form-label">T√©cnico</label>
              <select
                id="select-tecnico"
                name="tecnico_id"
                class="form-select"
                data-current-tecnicoid={String(equipo?.tecnico_id ?? '')}
              >
                <option value="">‚Äî Sin asignar ‚Äî</option>
                {currentTecId && currentTecLabel && (
                  <option value={String(currentTecId)} selected>
                    {currentTecLabel}
                  </option>
                )}
              </select>
              <small id="tecHelp" class="form-text text-muted"></small>
            </div>

            <div>
              <label class="form-label">Fecha formulario</label>
              {/* Fecha "de carga" se muestra editable como texto libre tipo M/D/YYYY */}
              <input
                name="fechaFormulario"
                type="text"
                class="form-control"
                value={toMDY(equipo.marca_temporal)}
              />
            </div>

            <div>
              <label class="form-label">Fecha listo</label>
              {/* Fecha de reparaci√≥n se ve pero no se edita ac√° */}
              <input
                type="date"
                class="form-control"
                value={toISODate(equipo.fecha_de_reparacion)}
                disabled
              />
            </div>
          </div>
        </div>

        {/* ============================================================
           2) DATOS DEL CLIENTE
           - DNI/CUIT c/ formateo amigable
           - WhatsApp
           - Correo
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-person-badge"></i> Datos del cliente</div>
          <div class="grid-2">
            <div>
              <label class="form-label">DNI/CUIT</label>
              <input
                name="dniCuit"
                id="input-dni-cuit"
                type="text"
                inputmode="numeric"
                autocomplete="off"
                class="form-control"
                value={prettifyDniCuit(equipo.cliente?.dni_cuit || '')}
                maxlength="14"
                placeholder="Ej: 12.345.678 o 20-12345678-3"
              />
            </div>

            <div>
              <label class="form-label">WhatsApp</label>
              <input
                name="whatsapp"
                type="text"
                class="form-control"
                value={equipo.cliente?.whatsapp || ''}
              />
            </div>

            <div class="col-12">
              <label class="form-label">Correo</label>
              <input
                name="correo"
                type="email"
                class="form-control"
                value={equipo.cliente?.correo_electronico || ''}
              />
            </div>
          </div>
        </div>

        {/* ============================================================
           3) IMPRESORA
           - Selector de modelo/l√≠nea + campo "Otra"
           - N¬∞ de serie
           - Tama√±o de boquilla
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-printer"></i> Impresora</div>
          <div class="grid-2">
            <div>
              <label class="form-label">Modelo / L√≠nea</label>
              <select
                name="maquinaSelect"
                id="select-impresora-modelo"
                class="form-select"
                data-otra-value={valorOtra}
              >
                <option value="">‚Äî Seleccionar ‚Äî</option>
                {impresoras.map((opt) => (
                  <option
                    value={opt}
                    selected={valorSelect === opt}
                  >
                    {opt === 'OTRA__ESPECIFICAR' ? 'Otra (especificar)' : opt}
                  </option>
                ))}
              </select>
            </div>

            <div class="col-12">
              <label class="form-label">Modelo espec√≠fico</label>
              <input
                name="maquina"
                id="input-modelo-otra"
                type="text"
                class={`form-control ${isOtra ? '' : 'hidden'}`}
                value={isOtra ? valorOtra : (estaEnLista ? '' : modeloActualRaw)}
                placeholder="Ej: Prusa MK4, Ender 3 tuneada..."
              />
              <small class="text-muted">
                Si eleg√≠s "Otra", escrib√≠ aqu√≠ el modelo exacto.
              </small>
            </div>

            <div>
              <label class="form-label">N¬∞ de serie</label>
              <input
                name="numeroSerie"
                type="text"
                class="form-control"
                value={equipo.impresoras?.numero_de_serie || ''}
              />
            </div>

            <div class="col-12">
              <label class="form-label">Tama√±o de boquilla</label>
              <input
                name="boquilla"
                type="text"
                class="form-control"
                value={equipo.impresoras?.tamano_de_boquilla || ''}
              />
            </div>
          </div>
        </div>

        {/* ============================================================
           4) PRESUPUESTO
           - Monto en ARS
           - Link al presupuesto externo
           - ¬øCubre garant√≠a?
           - Fecha de presupuesto (s√≥lo lectura)
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-receipt"></i> Presupuesto</div>
          <div class="grid-2">
            <div>
              <label class="form-label">Monto</label>
              <input
                name="monto"
                type="text"
                class="form-control currency-ars"
                value={formatARS(equipo.presupuestos?.monto)}
                placeholder="$10.000,00"
              />
            </div>

            <div>
              <label class="form-label">Link presupuesto</label>
              <input
                name="linkPresupuesto"
                type="url"
                class="form-control"
                value={equipo.presupuestos?.link_presupuesto || ''}
              />
            </div>

            <div>
              <label class="form-label">¬øCubre garant√≠a?</label>
              <select name="cubreGarantia" class="form-select">
                <option value="true"  selected={valorCubreGarantia === 'true'}>S√≠</option>
                <option value="false" selected={valorCubreGarantia === 'false'}>No</option>
              </select>
            </div>

            <div>
              <label class="form-label">Fecha presupuesto</label>
              <input
                type="date"
                class="form-control"
                value={toISODate(equipo.presupuestos?.fecha_presupuesto)}
                disabled
              />
            </div>
          </div>
        </div>

        {/* ============================================================
           5) DELIVERY
           - Indicator "¬øCobrado?"
           - Campos extra (modo entrega, costo, info) s√≥lo visibles a admin
           - Fecha de entrega (solo lectura)
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-truck"></i> Delivery</div>
          <div class="grid-2">
            <div>
              <label class="form-label">¬øCobrado?</label>
              <select name="cobrado" class="form-select">
                <option value="true"  selected={valorCobrado === 'true'}>S√≠</option>
                <option value="false" selected={valorCobrado === 'false'}>No</option>
              </select>
            </div>

            {isAdmin && (
              <>
                <div>
                  <label class="form-label">Modo de entrega</label>
                  <input
                    name="medioEntrega"
                    type="text"
                    class="form-control"
                    value={equipo.delivery?.medio_de_entrega || ''}
                  />
                </div>

                <div>
                  <label class="form-label">Costo delivery</label>
                  <input
                    name="costoDelivery"
                    type="text"
                    class="form-control currency-ars"
                    value={formatARS(equipo.delivery?.cotizar_delivery)}
                    placeholder="$3.500"
                  />
                </div>

                <div>
                  <label class="form-label">Info delivery</label>
                  <input
                    name="infoDelivery"
                    type="text"
                    class="form-control"
                    value={equipo.delivery?.informacion_adicional_delivery || ''}
                  />
                </div>
              </>
            )}

            <div>
              <label class="form-label">Fecha de entrega</label>
              <input
                type="date"
                class="form-control"
                value={toISODate(equipo.delivery?.fecha_de_entrega)}
                disabled
              />
            </div>
          </div>
        </div>

        {/* ============================================================
           6) NOTAS & COMENTARIOS
           - Nota del t√©cnico interna
           - Comentarios / detalle del cliente
           ============================================================ */}
        <div class="section-card">
          <div class="section-title"><i class="bi bi-journal-text"></i> Notas & Comentarios</div>
          <div class="grid-2">
            <div class="col-12">
              <label class="form-label">Nota T√©cnico</label>
              <textarea
                name="notaTecnico"
                class="form-control"
                rows="3"
              >{equipo.notas_del_tecnico || ''}</textarea>
            </div>

            <div class="col-12">
              <label class="form-label">Comentarios del cliente (detalle del problema)</label>
              <textarea
                name="detalleCliente"
                class="form-control"
                rows="3"
              >{equipo.notas_del_cliente || equipo.cliente?.comentarios || ''}</textarea>
            </div>
          </div>
        </div>

        {/* ============================================================
           7) IM√ÅGENES
           - 3 slots:
             ‚Ä¢ principal (lleg√≥)
             ‚Ä¢ reparaci√≥n (en proceso)
             ‚Ä¢ final (lista)
           - Cada bloque:
             ‚Ä¢ preview actual
             ‚Ä¢ input <file> oculto con label estilado
             ‚Ä¢ bot√≥n "Eliminar imagen" que marca hidden input "borrar..."
           ============================================================ */}
        <div class="section-card">
          <div class="section-title center"><i class="bi bi-images"></i> Im√°genes</div>

          {/* Imagen principal / llegada */}
          <div class="mb-4">
            <h6 class="mb-2 text-center">Imagen principal (Cuando lleg√≥ la impresora)</h6>
            <div class="img-row">
              <div class="img-box">
                <img
                  id="img-actual-o-preview"
                  src={urlMain}
                  alt="Imagen principal (Cuando lleg√≥ la impresora)"
                  onerror="this.onerror=null;this.src='/logo.webp';"
                  loading="lazy"
                />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen
                  <input
                    type="file"
                    name="imagenArchivo"
                    accept="image/*"
                    id="input-imagen-archivo"
                    style="display:none;"
                  />
                </label>

                {/* Se√±alamos borrado con hidden input */}
                <input
                  type="hidden"
                  name="borrarImagen"
                  id="input-borrar-imagen"
                  value="false"
                />
                <button
                  type="button"
                  class="btn btn-danger px-4"
                  id="btn-eliminar-equipo"
                >
                  Eliminar imagen
                </button>
              </div>
            </div>
          </div>

          {/* Imagen reparaci√≥n */}
          <div class="mb-4">
            <h6 class="mb-2 text-center">Imagen reparaci√≥n (en proceso)</h6>
            <div class="img-row">
              <div class="img-box">
                <img
                  id="img-ticket-preview"
                  src={urlTicket}
                  alt="Imagen reparaci√≥n (en proceso)"
                  onerror="this.onerror=null;this.src='/logo.webp';"
                  loading="lazy"
                />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen reparaci√≥n
                  <input
                    type="file"
                    name="imagenTicketArchivo"
                    accept="image/*"
                    id="input-imagen-ticket"
                    style="display:none;"
                  />
                </label>

                <input
                  type="hidden"
                  name="borrarImagenTicket"
                  id="input-borrar-imagen-ticket"
                  value="false"
                />
                <button
                  type="button"
                  class="btn btn-danger px-4"
                  id="btn-eliminar-imagen-ticket"
                >
                  Eliminar imagen reparaci√≥n
                </button>
              </div>
            </div>
          </div>

          {/* Imagen final */}
          <div>
            <h6 class="mb-2 text-center">Imagen final (ya lista para entregar)</h6>
            <div class="img-row">
              <div class="img-box">
                <img
                  id="img-extra-preview"
                  src={urlExtra}
                  alt="Imagen final (ya lista para entregar)"
                  onerror="this.onerror=null;this.src='/logo.webp';"
                  loading="lazy"
                />
              </div>
              <div class="btn-col">
                <label class="btn btn-primary fw-semibold">
                  <i class="bi bi-upload me-2"></i> Cambiar imagen final
                  <input
                    type="file"
                    name="imagenExtraArchivo"
                    accept="image/*"
                    id="input-imagen-extra"
                    style="display:none;"
                  />
                </label>

                <input
                  type="hidden"
                  name="borrarImagenExtra"
                  id="input-borrar-imagen-extra"
                  value="false"
                />
                <button
                  type="button"
                  class="btn btn-danger px-4"
                  id="btn-eliminar-imagen-extra"
                >
                  Eliminar imagen final
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Bot√≥n principal Guardar cambios */}
        <div class="actions">
          <button
            type="submit"
            class="btn btn-success px-4"
            id="btn-guardar-ticket"
          >
            <i class="bi bi-check2-square me-1"></i> Guardar cambios
          </button>
        </div>
      </form>
    ) : (
      // Si no encontramos el ticket en la DB
      <p class="text-danger">No se encontr√≥ el equipo con ID: {id}</p>
    )}
  </div>

  {/* ================================================================
     Scripts frontend auxiliares
     - image compression (3rd party)
     - manejo de previews y eliminar im√°genes
     ================================================================ */}
  <script src="https://unpkg.com/browser-image-compression@latest/dist/browser-image-compression.js" defer></script>
  <script src="/scripts/form-mas-imagenes.js?v=1" defer></script>

  {/* ================================================================
     1) Cargar t√©cnicos din√°micamente
     - Hace fetch /api/listarTecnicos
     - Inserta <option> extra en el combo de t√©cnico
     - Marca como selected el t√©cnico actual
     ================================================================ */}
  <script type="module">
    // @ts-nocheck
    (async function(){
      const sel  = document.getElementById('select-tecnico');
      const help = document.getElementById('tecHelp');
      if (!(sel instanceof HTMLSelectElement)) return;
      const current = sel.dataset.currentTecnicoid ? Number(sel.dataset.currentTecnicoid) : null;

      try {
        const res  = await fetch('/api/listarTecnicos', { headers: { 'Accept': 'application/json' } });
        const data = await res.json();
        if (!res.ok || !data?.items) throw new Error(data?.error || 'No se pudo cargar t√©cnicos');

        // Evitar duplicar el option inicial (el t√©cnico ya seleccionado)
        const ya = new Set(Array.from(sel.options).map(o => Number(o.value) || 0));

        (data.items || []).forEach((it) => {
          const idNum = Number(it.id);
          if (ya.has(idNum)) return;

          const opt = document.createElement('option');
          opt.value = String(it.id);
          opt.textContent = it.label;
          if (current && idNum === current) opt.selected = true;
          sel.appendChild(opt);
        });

        if (help) help.textContent = '';
      } catch (err) {
        if (help) help.textContent = 'No se pudo cargar la lista de t√©cnicos.';
        console.error('[listarTecnicos]', err);
      }
    })();
  </script>

  {/* ================================================================
     2) Mostrar/ocultar campo "Modelo espec√≠fico"
     - Si el usuario elige "OTRA__ESPECIFICAR" ‚Üí mostramos input libre.
     - Si elige una opci√≥n conocida ‚Üí ocultamos campo libre, y copiamos valor.
     ================================================================ */}
  <script type="module">
    // @ts-nocheck
    (function(){
      const selModeloEl = document.getElementById('select-impresora-modelo');
      const inputOtraEl = document.getElementById('input-modelo-otra');

      if (
        selModeloEl instanceof HTMLSelectElement &&
        inputOtraEl instanceof HTMLInputElement
      ) {
        const _selModelo = selModeloEl;
        const _inputOtra = inputOtraEl;

        function syncOtraVisibility(){
          const v = _selModelo.value;
          if (v === 'OTRA__ESPECIFICAR') {
            // Mostrar el input libre
            _inputOtra.classList.remove('hidden');
            // Si est√° vac√≠o pero tenemos un valor inicial sugerido, cargarlo
            if (!_inputOtra.value.trim()) {
              const preset = _selModelo.getAttribute('data-otra-value') || '';
              if (preset) _inputOtra.value = preset;
            }
          } else {
            // Ocultar input libre y forzar el valor seleccionado
            _inputOtra.classList.add('hidden');
            _inputOtra.value = v || '';
          }
        }

        syncOtraVisibility();
        _selModelo.addEventListener('change', syncOtraVisibility);
      }
    })();
  </script>

  {/* ================================================================
     3) Formateo ARS en inputs de moneda
     - Al escribir: solo deja d√≠gitos, coma, punto, $, -
     - Al salir del input (blur): re-formatea como $12.345,67
     ================================================================ */}
  <script type="module">
    // @ts-nocheck
    (function(){
      function parseToNumberLikeLocal(s){
        if(!s) return '';
        let t=String(s).trim().replace(/[^\d.,-]/g,'');
        const lastDot=t.lastIndexOf('.'), lastCom=t.lastIndexOf(',');
        if(lastDot!==-1&&lastCom!==-1){
          const dec=lastDot>lastCom?'.':','; const mil=dec==='.'?',':'.';
          t=t.split(mil).join('');
          if(dec===',') t=t.replace(',', '.');
        } else if(lastCom!==-1&&lastDot===-1){
          t=t.replace(',', '.');
        }
        return t;
      }
      function formatARSFromStr(s){
        const n = Number(parseToNumberLikeLocal(s));
        if (!isFinite(n)) return String(s || '');
        const dec = (String(s).split('.')[1] || '').length;
        const d = dec ? Math.min(2, dec) : 0;
        return '$'+n.toLocaleString('es-AR',{minimumFractionDigits:d, maximumFractionDigits:d});
      }
      function onBlurFormat(e){
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        el.value = formatARSFromStr(el.value);
      }
      function onInputClean(e){
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        // Limpieza m√≠nima mientras tipe√°s
        el.value = el.value.replace(/[^\d.,$-]/g,'');
      }
      document.querySelectorAll('.currency-ars').forEach((node)=>{
        const input = node instanceof HTMLInputElement ? node : null;
        if (!input) return;
        input.addEventListener('blur',  onBlurFormat);
        input.addEventListener('input', onInputClean);
      });
    })();
  </script>

  {/* ================================================================
     4) Formateo DNI/CUIT en vivo
     - Mientras escrib√≠s, reinyecta puntos/guiones.
     - Mantiene el cursor al final cuando cambia el valor.
     ================================================================ */}
  <script type="module">
    // @ts-nocheck
    (function(){
      function formatDniCuitLive(raw){
        const digits = String(raw||'').replace(/\D+/g, '');
        if (!digits) return '';

        // CUIT/CUIL (11 d√≠gitos)
        if (digits.length === 11) {
          return digits.slice(0,2)+'-'+digits.slice(2,10)+'-'+digits.slice(10);
        }

        // DNI (7 u 8 d√≠gitos)
        if (digits.length === 7 || digits.length === 8) {
          return digits.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        }

        // Fallback: deja s√≥lo d√≠gitos, puntos y guiones
        return String(raw||'').replace(/[^\d\.\-]/g,'');
      }

      const input = document.getElementById('input-dni-cuit');
      if (input instanceof HTMLInputElement) {
        input.addEventListener('input', (e) => {
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          const before = el.value;
          const after  = formatDniCuitLive(before);
          if (before !== after) {
            const atEnd = el.selectionStart === before.length;
            el.value = after;
            // Intento mantener el cursor al final si estaba al final
            try {
              if (atEnd) el.setSelectionRange(after.length, after.length);
            } catch {}
          }
        });

        input.addEventListener('blur', (e) => {
          const el = e.target;
          if (!(el instanceof HTMLInputElement)) return;
          el.value = formatDniCuitLive(el.value);
        });
      }
    })();
  </script>

  {/* ================================================================
     5) Normalizador "Tama√±o de boquilla"
     - Limpia el input y lo deja estilo "0.4 mm"
     - Al hacer blur, fuerza el sufijo "mm".
     ================================================================ */}
  <script type="module">
    // @ts-nocheck
    (function () {
      function parseNozzle(raw) {
        if (raw == null) return '';
        let s = String(raw).toLowerCase().trim();
        s = s.replace(',', '.');

        // buscar primer n√∫mero tipo "0.4", ".6", "1"
        const m = s.match(/(\d+\.?\d*|\.\d+)/);
        if (!m) return '';

        let num = m[0];
        if (num.startsWith('.')) num = '0' + num; // ".4" ‚Üí "0.4"
        if (num.endsWith('.'))  num = num.slice(0,-1);

        const n = Number(num);
        if (!isFinite(n)) return '';

        // 2 decimales m√°ximo, y sacamos ceros innecesarios
        let out = n.toFixed(2);
        out = out.replace(/\.?0+$/, '');
        return out;
      }

      function normalizeToMm(raw) {
        const num = parseNozzle(raw);
        return num ? (num + ' mm') : '';
      }

      const input = document.querySelector('input[name="boquilla"]');
      if (!(input instanceof HTMLInputElement)) return;

      // Normalizar valor inicial que ya vino desde el servidor
      if (input.value && input.value.trim()) {
        input.value = normalizeToMm(input.value);
      }

      // Mientras escribe: limpiar caracteres raros
      input.addEventListener('input', (e) => {
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        const before = el.value;
        const cleaned = before.replace(/[^0-9.,a-zA-Z\s]/g, '');
        if (before !== cleaned) el.value = cleaned;
      });

      // Cuando sale del campo: forzar "X mm"
      input.addEventListener('blur', (e) => {
        const el = e.target;
        if (!(el instanceof HTMLInputElement)) return;
        el.value = normalizeToMm(el.value);
      });
    })();
  </script>
</BasePrivateLayout>
