---
import BasePrivateLayout from '../../../layouts/BasePrivateLayout.astro';

/**
 * P√°gina /presupuesto/:id/items  (o similar)
 *
 * üß© Objetivo:
 * - Seleccionar qu√© repuestos van a formar parte del presupuesto de un ticket.
 * - Ver stock, categor√≠a, si est√° activo o no, y (si sos admin) precios.
 * - Editar cantidades antes de guardar.
 * - Guardar en BD v√≠a /api/presupuestoItems (POST).
 *
 * üîê Permisos / precios:
 * - S√≥lo admins ven/usan los precios y totales.
 *   showPrices = isAdmin
 * - T√©cnicos ven la misma UI pero sin n√∫meros de ARS.
 *
 * üì¶ Flujo de trabajo:
 * 1. Cargamos selecci√≥n previa guardada en la BD (GET /api/presupuestoItems?ticket_id=...).
 *    Eso permite mostrar qu√© ya estaba asociado a este ticket.
 * 2. Cargamos listado paginado/filtrable de repuestos desde /api/listarRepuestos
 *    con b√∫squeda, categor√≠a, estado activo/inactivo, sort y paginaci√≥n.
 * 3. El usuario tilda checkboxes para agregar/quitar repuestos a "seleccion".
 * 4. Puede abrir el modal "Confirmar repuestos a agregar", ajustar cantidades,
 *    ver advertencias (sin stock / inactivo), y luego guardar cambios POST.
 *
 * üíæ Persistencia:
 * - Bot√≥n "Guardar" del modal hace un POST a /api/presupuestoItems con {ticket_id, items:[{repuesto_id,cantidad}]},
 *   reemplazando TODO el conjunto actual en la tabla presupuesto_repuestos.
 * - Si hay repuestos inactivos nuevos, el backend rechaza.
 *
 * üß† UX:
 * - El resumen superior (card-resumen-sel) muestra lo que est√° seleccionado ahora,
 *   con botones inline para editar cantidad (abre modal chico) o quitar.
 * - El stock puede quedar negativo m√°s adelante (al marcar M√°quina Lista),
 *   eso est√° permitido, pero avisamos en amarillo.
 * - No dejamos guardar si hay repuestos inactivos.
 */

// Perfil del usuario, inyectado en Astro.locals (middleware auth)
type Perfil = { rol?: string; admin?: boolean; activo?: boolean };
const perfil = (Astro.locals as any)?.perfil as Perfil | undefined;

// Admin => puede ver precios y totales en la UI
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);
const showPrices = isAdmin;

// ID del ticket actual (de la ruta din√°mica /presupuesto/:id/items)
const ticketId = Astro.params.id;
---

<BasePrivateLayout>
  {/* ============================================================
     Contenedor ra√≠z. Metadatos importantes via data-*:
     - data-ticket-id        ‚Üí ID num√©rico de ticket
     - data-show-prices      ‚Üí si mostramos precios o no
     ============================================================ */}
  <div
    id="repuestos-root"
    class="container mt-5"
    data-ticket-id={ticketId}
    data-show-prices={String(showPrices)}
  >
    {/* Encabezado + bot√≥n "volver" */}
    <div class="d-flex align-items-center justify-content-between mb-3">
      <h2 class="mb-0">
        <i class="bi bi-box-seam me-2"></i> Repuestos necesarios
      </h2>
      <div class="d-flex gap-2">
        <a class="btn btn-light btn-sm" href={`/presupuesto/${ticketId}`}>
          <i class="bi bi-arrow-left"></i> Volver al presupuesto
        </a>
      </div>
    </div>

    {/* ============================================================
       Filtros de b√∫squeda:
       - q: texto libre en "Componentes presupuestados"
       - categor√≠a: dropdown din√°mico (se carga desde /api/categoriasRepuestos)
       - estado: activo / inactivo / todos
       Tambi√©n hay un bot√≥n X para limpiar q.
       ============================================================ */}
    <div class="card mb-3">
      <div class="card-body">
        <div class="row g-2">
          <div class="col-12">
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-search"></i></span>
              <input id="q" type="text" class="form-control" placeholder="Buscar componente..." />
              <button id="btnClearQ" class="btn btn-outline-secondary" type="button" style="display:none;">
                <i class="bi bi-x-lg"></i>
              </button>
            </div>
          </div>
          <div class="col-6">
            <select id="categoria" class="form-select">
              <option value="">Todas las categor√≠as</option>
            </select>
          </div>
          <div class="col-6">
            <select id="estado" class="form-select">
              <option value="">Todos los estados</option>
              <option value="activo">Estado activo</option>
              <option value="inactivo">No activo</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    {/* ============================================================
       Resumen de selecci√≥n actual:
       - Se muestra s√≥lo si hay al menos 1 repuesto elegido.
       - Lista tipo "cards", cada una con:
         ‚Ä¢ ID, nombre, badge de cantidad
         ‚Ä¢ bot√≥n editar cantidad (abre modal chico)
         ‚Ä¢ bot√≥n borrar
       - A la derecha muestra count y total estimado (si showPrices)
       ============================================================ */}
    <div class="card mb-3" id="card-resumen-sel" style="display:none;">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span class="fw-semibold"><i class="bi bi-check2-square me-2"></i> Seleccionados previamente</span>
        <span class="text-muted small">
          <span id="resumenCount">0 √≠tems</span>
          {showPrices && (
            <>
              <span class="mx-2">‚Ä¢</span>
              Total estimado: <span id="resumenTotal">$0</span>
            </>
          )}
        </span>
      </div>
      <div class="card-body py-3">
        {/* Render din√°mico en JS: tarjetas/rows de selecci√≥n actual */}
        <div id="resumenLista" class="sel-grid"></div>
      </div>
    </div>

    {/* ============================================================
       Tabla principal de repuestos disponibles:
       - Scrollable con height fijo.
       - Columnas ordenables (click en header): ID / Componente / Stock / ...
       - Checkbox por fila para seleccionar.
       - Badge "Guardado √óN" si el repuesto ya formaba parte del presupuesto.
       ============================================================ */}
    <div class="card">
      <div class="card-header d-flex justify-content-between">
        <span>Seleccionar repuestos</span>
        <span class="text-muted small" id="resumen"></span>
      </div>

      <div class="table-responsive" style="max-height:520px; overflow:auto;">
        <table class="table table-sm table-striped mb-0">
          <thead class="table-light">
            <tr>
              {/* chkAll marca/desmarca todos los repuestos activos visibles en la p√°gina */}
              <th style="width:44px;"><input type="checkbox" id="chkAll" /></th>

              <th class="th-sortable" data-field="id" style="white-space:nowrap; cursor:pointer;">
                ID <span class="sort-icon text-muted">‚Üï</span>
              </th>

              <th class="th-sortable" data-field="componente" style="cursor:pointer;">
                Componente <span class="sort-icon text-muted">‚Üï</span>
              </th>

              <th class="th-sortable" data-field="stock" style="cursor:pointer;">
                Stock <span class="sort-icon text-muted">‚Üï</span>
              </th>

              <th class="th-sortable" data-field="categoria" style="cursor:pointer;">
                Categor√≠a <span class="sort-icon text-muted">‚Üï</span>
              </th>

              {/* Columna Precio s√≥lo si showPrices = true (admin) */}
              {showPrices && (
                <th class="th-sortable" data-field="precio" style="cursor:pointer;">
                  Precio <span class="sort-icon text-muted">‚Üï</span>
                </th>
              )}

              <th class="th-sortable" data-field="activo" style="cursor:pointer;">
                Activo <span class="sort-icon text-muted">‚Üï</span>
              </th>

              {/* Columna final: muestra badge "Guardado √óX" si ya estaba en presupuesto */}
              <th style="width:150px;" class="text-end">Selecci√≥n</th>
            </tr>
          </thead>
          <tbody id="tbody-repuestos">
            {/* Primera carga muestra "Cargando..." hasta que JS reemplace */}
            <tr>
              <td colspan={showPrices ? 8 : 7} class="text-center py-3">Cargando...</td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* Footer tabla: paginaci√≥n + bot√≥n Agregar al presupuesto */}
      <div class="card-footer d-flex justify-content-between align-items-center">
        <div>
          <button class="btn btn-outline-secondary btn-sm" id="prevPage">
            <i class="bi bi-chevron-left"></i> Anterior
          </button>
          <button class="btn btn-outline-secondary btn-sm ms-2" id="nextPage">
            Siguiente <i class="bi bi-chevron-right"></i>
          </button>
        </div>

        <div class="d-flex align-items-center gap-2">
          {/* Texto "Mostrando X-Y de Z" */}
          <div id="paginacionInfo" class="text-muted small me-2"></div>

          {/* Abre el modal de confirmaci√≥n con los repuestos seleccionados */}
          <button id="btnAgregar" class="btn btn-primary btn-sm">
            <i class="bi bi-plus-circle me-1"></i> Agregar al presupuesto
          </button>
        </div>
      </div>
    </div>
  </div>

  {/* ============================================================
     Modal de confirmaci√≥n final:
     - Lista editable de la selecci√≥n actual (cantidad, quitar √≠tem).
     - Valida stock bajo/negativo (solo warning amarillo).
     - Bloquea guardar si hay repuestos INACTIVOS.
     - Muestra total estimado si showPrices.
     ============================================================ */}
  <div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title"><i class="bi bi-check2-circle me-2"></i> Confirmar repuestos a agregar</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <p class="text-muted mb-2">
            Revis√° la lista. Pod√©s cambiar cantidades o quitar √≠tems antes de guardar.
          </p>

          <div class="table-responsive">
            <table class="table table-sm align-middle">
              <thead>
                <tr>
                  <th style="width:80px;">ID</th>
                  <th>Componente</th>
                  <th style="width:120px;">Cantidad</th>
                  <th style="width:100px;">Stock</th>
                  {showPrices && <th style="width:140px;">Precio unitario</th>}
                  {showPrices && <th style="width:140px;">Subtotal</th>}
                  <th style="width:160px;">Estado</th>
                  <th style="width:60px;"></th>
                </tr>
              </thead>
              <tbody id="tbody-confirm"></tbody>
            </table>
          </div>

          {/* Alerta amarilla:
             - Se muestra si alguna cantidad supera stock (pero eso NO bloquea)
             - Tambi√©n explica que inactivos s√≠ bloquean el guardado */}
          <div id="ruleAlert" class="alert alert-warning py-2 px-3" style="display:none;">
            Hay repuestos con <strong>cantidad superior al stock disponible</strong>. Pod√©s guardar igual:
            el stock quedar√° negativo al marcar <em>M√°quina Lista</em>.<br />
            <strong>Los repuestos inactivos s√≠ impiden guardar.</strong>
          </div>
        </div>

        <div class="modal-footer d-flex justify-content-end gap-3">
          {showPrices && (
            <div class="fw-semibold me-auto">
              Total estimado: <span id="totalEstimado">$0</span>
            </div>
          )}
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          {/* Bot√≥n Guardar: hace POST a /api/presupuestoItems */}
          <button id="btnGuardar" type="button" class="btn btn-primary" disabled>
            <i class="bi bi-save me-1"></i> Guardar
          </button>
        </div>
      </div>
    </div>
  </div>

  {/* ============================================================
     Modal chico para editar cantidad de un √≠tem del resumen
     (sin abrir el modal grande)
     ============================================================ */}
  <div class="modal fade" id="editQtyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="bi bi-pencil-square me-2"></i> Editar cantidad
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Cantidad</label>
            <input
              id="editQtyInput"
              type="number"
              min="1"
              step="1"
              class="form-control"
            />
            <div class="form-text">Ingres√° un entero mayor o igual a 1.</div>
          </div>
        </div>
        <div class="modal-footer">
          <button
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Cancelar
          </button>
          <button id="editQtySave" type="button" class="btn btn-primary">
            <i class="bi bi-check2 me-1"></i> Guardar cambios
          </button>
        </div>
      </div>
    </div>
  </div>

  {/* ===================================================================
     SCRIPT PRINCIPAL DE LA P√ÅGINA
     - Maneja:
       ‚Ä¢ Estado de filtros, sort, paginaci√≥n
       ‚Ä¢ Selecci√≥n persistente (Map seleccion)
       ‚Ä¢ Render de resumen
       ‚Ä¢ Apertura/modificaci√≥n de modales
       ‚Ä¢ POST final
     =================================================================== */}
  <script type="module">
    // ===================== Referencias DOM b√°sicas =====================
    const root = document.getElementById('repuestos-root');
    const ticketId = Number(root?.dataset.ticketId || 0);
    const showPrices = (root?.dataset.showPrices || 'false') === 'true';

    // colCount se usa para colspan din√°mico cuando no hay filas
    const colCount = showPrices ? 8 : 7;

    // Filtros y tabla
    const q = document.getElementById('q');
    const btnClearQ = document.getElementById('btnClearQ');
    const categoria = document.getElementById('categoria');
    const estado = document.getElementById('estado');
    const tbody = document.getElementById('tbody-repuestos');

    // Resumen/paginaci√≥n
    const resumen = document.getElementById('resumen');
    const paginacionInfo = document.getElementById('paginacionInfo');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const chkAll = document.getElementById('chkAll');
    const btnAgregar = document.getElementById('btnAgregar');

    // Headers sortables (para cambiar orden al click)
    const thSortables = Array.from(document.querySelectorAll('.th-sortable'));

    // Modales (Bootstrap)
    const confirmModalEl = document.getElementById('confirmModal');
    const ruleAlert = document.getElementById('ruleAlert');
    const tbodyConfirm = document.getElementById('tbody-confirm');
    const btnGuardar = document.getElementById('btnGuardar');
    const totalEstimadoEl = document.getElementById('totalEstimado');

    // Modal de cantidad r√°pida
    const editQtyModalEl = document.getElementById('editQtyModal');
    let bsEditModal = null;
    let editId = null;

    // Helpers para instanciar modals s√≥lo cuando haga falta
    function getEditModal() {
      if (bsEditModal) return bsEditModal;
      if (typeof window !== 'undefined' && window.bootstrap) {
        // @ts-ignore bootstrap global
        bsEditModal = new window.bootstrap.Modal(editQtyModalEl);
        return bsEditModal;
      }
      return null;
    }

    let bsModal = null;
    function getConfirmModal() {
      if (bsModal) return bsModal;
      if (typeof window !== 'undefined' && window.bootstrap) {
        // @ts-ignore bootstrap global
        bsModal = new window.bootstrap.Modal(confirmModalEl);
        return bsModal;
      }
      return null;
    }

    // ===================== Estado de selecci√≥n =====================
    /**
     * `seleccion` mantiene lo que el usuario tiene marcado actualmente
     * (incluye lo que vino de la BD y lo que agreg√≥ manualmente).
     *
     * key: repuesto_id
     * value: {
     *   id: number
     *   comp: string (nombre del repuesto)
     *   stock: number (stock num√©rico o Infinity)
     *   unitPrice: number (precio unitario "snapshot")
     *   cantidad: number
     *   activo: boolean (si el repuesto est√° activo)
     * }
     *
     * Nota: `activo === false` bloquea el guardado posterior.
     */
    const seleccion = new Map();

    // ===================== Helpers de formato =====================
    // Formatea $ARS sin decimales forzados
    const fmtARS = (n) =>
      new Intl.NumberFormat('es-AR',{
        style:'currency',
        currency:'ARS',
        minimumFractionDigits:0,
        maximumFractionDigits:2
      }).format(Number(n)||0);

    // Formatea $ARS pero redondeado sin decimales
    const fmtARS0 = (n) =>
      new Intl.NumberFormat('es-AR',{
        style:'currency',
        currency:'ARS',
        minimumFractionDigits:0,
        maximumFractionDigits:0
      }).format(Number(n)||0);

    /**
     * parsePrecioARS(v):
     * - Convierte un string tipo "$12.345" en n√∫mero entero aproximado.
     * - Se usa como snapshot del precio unitario que vamos a guardar.
     */
    function parsePrecioARS(v){
      if (v == null || v === '') return 0;
      if (typeof v === 'number') return Number.isFinite(v) ? v : 0;
      const s = String(v).trim();
      const sDigits = s.replace(/[^0-9]/g,'');
      const n = Number(sDigits);
      return Number.isFinite(n) ? n : 0;
    }

    // ===================== Carga inicial =====================
    /**
     * cargarSeleccionAnterior():
     * - Hace GET a /api/presupuestoItems?ticket_id=...
     * - Esto devuelve los repuestos YA guardados en la BD para ese ticket,
     *   con cantidad, activo, etc.
     * - Popular `seleccion` para que la UI arranque con esa info.
     */
    async function cargarSeleccionAnterior() {
      if (!ticketId) return;
      const res = await fetch(`/api/presupuestoItems?ticket_id=${ticketId}`);
      const out = await res.json();
      const rows = Array.isArray(out?.rows) ? out.rows : [];

      rows.forEach(r => {
        const id = Number(r?.repuesto_id || 0);
        const cantidad = Math.max(1, Number(r?.cantidad || 1));
        const unitPrice = Number(r?.precio_unit_num || 0);
        const stock = Number(r?.stock_num || 0);
        const activo = !!r?.activo;

        if (Number.isFinite(id) && id > 0) {
          seleccion.set(id, {
            id,
            comp: String(r?.componente || ''),
            stock,
            unitPrice: Number.isFinite(unitPrice) ? unitPrice : 0,
            cantidad,
            activo
          });
        }
      });
    }

    // ===================== Resumen superior =====================
    const cardResumen = document.getElementById('card-resumen-sel');
    const resumenLista = document.getElementById('resumenLista');
    const resumenCount = document.getElementById('resumenCount');
    const resumenTotal = document.getElementById('resumenTotal');

    /**
     * renderSeleccionResumen():
     * - Pinta las "tarjetitas" de selecci√≥n actual arriba.
     * - Cada item tiene botones:
     *    ‚Ä¢ editar cantidad ‚Üí abre modal chico (editQtyModal)
     *    ‚Ä¢ borrar ‚Üí quita del Map y destilda checkbox en la tabla
     * - Calcula y muestra total estimado (si showPrices).
     */
    function renderSeleccionResumen() {
      const items = Array.from(seleccion.values());
      const total = items.reduce(
        (acc, it) => acc + (Number(it.unitPrice||0)*Number(it.cantidad||1)),
        0
      );

      // Nada seleccionado ‚Üí ocultar card
      if (items.length === 0) {
        cardResumen.style.display = 'none';
        resumenLista.innerHTML = '';
        resumenCount.textContent = '0 √≠tems';
        if (resumenTotal) resumenTotal.textContent = fmtARS0(0);
        return;
      }

      // Hay selecci√≥n ‚Üí mostramos card
      cardResumen.style.display = 'block';
      resumenCount.textContent = `${items.length} ${items.length===1?'√≠tem':'√≠tems'}`;
      if (showPrices && resumenTotal) resumenTotal.textContent = fmtARS0(total);

      // Render HTML de cada selecci√≥n (badge Cantidad + botones editar/borrar)
      resumenLista.innerHTML = items.map(it => {
        return `
          <div class="sel-card d-flex align-items-center flex-nowrap" data-id="${it.id}" title="#${it.id} ‚Äî ${it.comp}">
            <div class="sel-card__left d-flex align-items-center gap-2 flex-grow-1 overflow-hidden">
              <span class="sel-id">#${it.id}</span>
              <span class="sel-name text-truncate">${(it.comp||'').toString()}</span>
              <span class="badge rounded-pill text-bg-primary sel-qty ms-2" title="Cantidad">
                Cantidad: ${it.cantidad}
              </span>
            </div>
            <div class="sel-card__right ms-auto d-flex align-items-center gap-2">
              <button class="btn btn-outline-secondary btn-icon btn-edit" title="Editar">
                <i class="bi bi-pencil"></i>
              </button>
              <button class="btn btn-outline-danger btn-icon btn-del" title="Borrar">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </div>
        `;
      }).join('');

      // Wire bot√≥n EDITAR cantidad (abre modal chico)
      resumenLista.querySelectorAll('.btn-edit').forEach(btn=>{
        btn.addEventListener('click', (e)=>{
          const card = e.currentTarget.closest('.sel-card');
          const id = Number(card?.getAttribute('data-id')||'0');
          if (!id || !seleccion.has(id)) return;

          editId = id;
          const curr = seleccion.get(id)?.cantidad ?? 1;
          document.getElementById('editQtyInput').value = String(curr);
          getEditModal()?.show();
        });
      });

      // Wire bot√≥n BORRAR de la selecci√≥n
      resumenLista.querySelectorAll('.btn-del').forEach(btn=>{
        btn.addEventListener('click', (e)=>{
          const card = e.currentTarget.closest('.sel-card');
          const id = Number(card?.getAttribute('data-id')||'0');
          if (!id) return;
          if (!confirm('¬øQuitar este repuesto de la selecci√≥n?')) return;

          seleccion.delete(id);

          // Tildado visual en la tabla tambi√©n se actualiza
          const chk = document.querySelector(`.chkItem[data-id="${id}"]`);
          if (chk) chk.checked = false;

          renderSeleccionResumen();
        });
      });
    }

    // Guardar cambios de cantidad desde el modal chico
    document.getElementById('editQtySave').addEventListener('click', ()=>{
      const n = Math.max(1, Number(document.getElementById('editQtyInput').value || 1));
      if (!Number.isFinite(n)) return;
      if (editId && seleccion.has(editId)) {
        const prev = seleccion.get(editId);
        seleccion.set(editId, { ...prev, cantidad: n });
        renderSeleccionResumen();
      }
      getEditModal()?.hide();
    });

    // ===================== B√∫squeda / filtros / sort =====================
    /**
     * Mostrar/ocultar bot√≥n "X" para limpiar campo q.
     * Tambi√©n dispara refetch de resultados al tipear.
     */
    function toggleClearBtn(){
      btnClearQ.style.display = (q.value ?? '').trim() ? 'block' : 'none';
    }
    q.addEventListener('input', () => { toggleClearBtn(); refetch(); });
    btnClearQ.addEventListener('click', () => {
      q.value='';
      toggleClearBtn();
      page=1;
      cargar();
    });
    toggleClearBtn();

    /**
     * cargarCategorias():
     * - GET /api/categoriasRepuestos
     * - Pobla el <select id="categoria"> con todas las categor√≠as √∫nicas.
     */
    async function cargarCategorias() {
      const res = await fetch('/api/categoriasRepuestos');
      const out = await res.json();
      const cats = Array.isArray(out?.categorias) ? out.categorias : [];

      categoria.innerHTML =
        '<option value="">Todas las categor√≠as</option>' +
        cats.map(c => `<option value="${c.replaceAll('"','&quot;')}">${c}</option>`).join('');
    }

    /**
     * setLoading():
     * - Muestra fila "Cargando..." con colspan din√°mico.
     * - Se usa antes de reemplazar <tbody> con resultados reales.
     */
    function setLoading(){
      tbody.innerHTML = `<tr><td colspan="${colCount}" class="text-center py-3">Cargando...</td></tr>`;
    }

    /**
     * wireRowCheckboxes():
     * - Conecta cada checkbox de fila con el Map `seleccion`.
     * - Al marcar: agrega/actualiza el repuesto en `seleccion`.
     * - Al desmarcar: lo quita.
     * - Respeta si el repuesto est√° inactivo ‚Üí el checkbox viene disabled.
     */
    function wireRowCheckboxes(){
      document.querySelectorAll('.chkItem').forEach((el)=>{
        if (el.disabled) return;

        const id = Number(el.getAttribute('data-id'));
        const comp = String(el.getAttribute('data-comp') || '');
        const stock = Number(el.getAttribute('data-stock') || '0');
        const unitPrice = Number(el.getAttribute('data-precio') || '0');
        const activo = el.getAttribute('data-activo') === '1';

        // Sync visual inicial basado en `seleccion`
        el.checked = seleccion.has(id);

        el.onchange = () => {
          if (el.checked) {
            // Guardamos / actualizamos selecci√≥n
            const prev = seleccion.get(id);
            const cantidad = prev?.cantidad ?? 1;
            seleccion.set(id, { id, comp, stock, unitPrice, cantidad, activo: true });

            // merge defensivo si ya hab√≠a info previa
            if (prev) {
              prev.stock = stock;
              if (Number.isFinite(unitPrice) && unitPrice>0) prev.unitPrice = unitPrice;
              prev.activo = activo;
            }
          } else {
            // Quitamos de la selecci√≥n
            seleccion.delete(id);
          }
          renderSeleccionResumen();
        };
      });
    }

    /**
     * updateSortUI():
     * - Pone ‚Üë / ‚Üì en el header activo.
     * - Deja ‚Üï en los dem√°s.
     */
    function updateSortUI() {
      thSortables.forEach(th => {
        const f = th.getAttribute('data-field');
        const icon = th.querySelector('.sort-icon');
        const active = f === sortBy;

        th.classList.toggle('fw-semibold', active);

        if (icon) icon.textContent = active ? (sortDir === 'asc' ? '‚Üë' : '‚Üì') : '‚Üï';
        if (icon) icon.classList.toggle('text-muted', !active);
      });
    }

    // Estado de la tabla
    let page = 1;
    const pageSize = 30;
    let sortBy = 'id';
    let sortDir = 'asc';

    /**
     * cargar():
     * - Llama /api/listarRepuestos con filtros, sort y paginaci√≥n.
     * - Renderiza el <tbody> con filas.
     * - Marca checkboxes seg√∫n `seleccion`.
     * - Actualiza labels de paginaci√≥n y totales.
     */
    async function cargar() {
      setLoading();

      const params = new URLSearchParams({
        page: String(page),
        pageSize: String(pageSize),
        q: (q.value ?? '').trim(),
        categoria: (categoria.value ?? '').trim(),
        estado: (estado.value ?? '').trim(),
        sortBy,
        sortDir,
      });

      const res = await fetch('/api/listarRepuestos?' + params.toString());
      const out = await res.json();

      const data = out.rows || [];
      const total = out.total || 0;
      const maxPage = total ? Math.ceil(total / pageSize) : 1;

      // Si qued√≥ una p√°gina "fuera de rango" por filtros nuevos, ajustamos y recargamos
      if (total > 0 && page > maxPage) {
        page = maxPage;
        return cargar();
      }

      // Sin resultados
      if (data.length === 0) {
        tbody.innerHTML =
          `<tr><td colspan="${colCount}" class="text-center py-3 text-muted">Sin resultados.</td></tr>`;
      } else {
        // Mapear filas -> HTML
        tbody.innerHTML = data.map(r => {
          const stockStr = String(r.stock ?? '').trim();

          // Stock infinito / servicio: ‚àû, "inf", etc.
          const isInf = stockStr === '‚àû' || /^inf/i.test(stockStr);

          // Stock num√©rico limpio
          const stockNum = isInf
            ? Infinity
            : (Number(stockStr.replace(/[^0-9.-]/g, '')) || 0);

          const unitPrice = parsePrecioARS(r.precio ?? '');
          const isActive  = !!r.activo;

          const idNum = Number(r.id);
          const ya = seleccion.get(idNum);
          const wasSelected = !!ya;
          const cantSel = ya?.cantidad ?? 1;

          // Badge para indicar si este √≠tem ya estaba guardado con X cantidad
          const savedBadge = wasSelected
            ? `<span class="badge text-bg-info" title="Ya est√° guardado en el presupuesto">Guardado √ó${cantSel}</span>`
            : '';

          // Checkbox de selecci√≥n de este repuesto
          const chk = `
            <input type="checkbox" class="chkItem"
              data-id="${r.id}"
              data-comp="${(r.componente ?? '').toString().replace(/"/g,'&quot;')}"
              data-stock="${stockNum}"
              data-precio="${unitPrice}"
              data-activo="${isActive ? '1' : '0'}"
              ${wasSelected && isActive ? 'checked' : ''}
              ${isActive ? '' : 'disabled title="Inactivo ‚Äî no se puede seleccionar"'}
            />
          `;

          // Colorear fila:
          //  - inactivo ‚Üí gris
          //  - seleccionado activo ‚Üí azul clarito
          const rowClass = isActive
            ? (wasSelected ? 'table-info' : '')
            : 'table-secondary';

          return `
            <tr class="${rowClass}">
              <td>${chk}</td>
              <td>${r.id}</td>
              <td>${r.componente ?? ''}</td>
              <td>${r.stock ?? ''}</td>
              <td>${r.categoria ?? ''}</td>
              ${showPrices ? `<td>${r.precio ?? ''}</td>` : ''}
              <td>${isActive ? 'S√≠' : '<span class="text-danger fw-semibold">No</span>'}</td>
              <td class="text-end">${savedBadge}</td>
            </tr>
          `;
        }).join('');
      }

      // Info "Mostrando X-Y de Z"
      const from = total ? (page-1)*pageSize + 1 : 0;
      const to   = total ? Math.min(page*pageSize, total) : 0;
      resumen.textContent = total ? `Total: ${total}` : '';
      paginacionInfo.textContent = total ? `Mostrando ${from}-${to} de ${total}` : '';

      // Checkbox "seleccionar todos" de la p√°gina actual.
      chkAll.checked = false;
      chkAll.onchange = () => {
        document.querySelectorAll('.chkItem:not([disabled])').forEach((el)=>{
          const id = Number(el.getAttribute('data-id'));
          const comp = String(el.getAttribute('data-comp') || '');
          const stock = Number(el.getAttribute('data-stock') || '0');
          const unitPrice = Number(el.getAttribute('data-precio') || '0');

          el.checked = chkAll.checked;
          if (chkAll.checked) {
            // A√±adir todos los visibles activos a la selecci√≥n
            const prev = seleccion.get(id);
            const cantidad = prev?.cantidad ?? 1;
            seleccion.set(id, { id, comp, stock, unitPrice, cantidad, activo: true });

            // Merge defensivo si ya exist√≠a
            if (prev) {
              prev.stock = stock;
              if (Number.isFinite(unitPrice) && unitPrice>0) prev.unitPrice = unitPrice;
              prev.activo = true;
            }
          } else {
            // Quitar todos los visibles de la selecci√≥n
            seleccion.delete(id);
          }
        });
        renderSeleccionResumen();
      };

      // Conectar checkboxes individuales
      wireRowCheckboxes();

      // Botones de paginaci√≥n habilitados/inhabilitados seg√∫n p√°gina
      prevPageBtn.disabled = page <= 1;
      nextPageBtn.disabled = (page*pageSize) >= total;

      // Actualizar √≠conos ‚Üë / ‚Üì en headers
      updateSortUI();
    }

    // Debounce tipiado en b√∫squeda:
    // refetch() espera 250ms despu√©s de dejar de escribir.
    const refetch = (()=>{ let t; return ()=>{ clearTimeout(t); t=setTimeout(()=>{ page=1; cargar(); }, 250);} })();

    // Evitar submit accidental con Enter en el campo q
    q.addEventListener('keydown', (e)=>{
      if(e.key==='Enter'){ e.preventDefault(); }
    });

    // Filtros y acciones de tabla
    categoria.addEventListener('change', ()=>{ page=1; cargar(); });
    estado.addEventListener('change', ()=>{ page=1; cargar(); });
    prevPageBtn.addEventListener('click', ()=>{ if(page>1){ page--; cargar(); }});
    nextPageBtn.addEventListener('click', ()=>{ page++; cargar(); });

    // Sorting al click en cada encabezado .th-sortable
    thSortables.forEach(th=>{
      th.addEventListener('click', ()=>{
        const f = th.getAttribute('data-field'); if (!f) return;
        if (sortBy === f) {
          sortDir = (sortDir === 'asc') ? 'desc' : 'asc';
        } else {
          sortBy = f;
          sortDir = 'asc';
        }
        page = 1;
        cargar();
      });
    });

    // ===================== Modal de confirmaci√≥n =====================
    /**
     * renderConfirmTable(items):
     * - Pinta la tabla del modal grande de confirmaci√≥n.
     * - Cada fila tiene:
     *    ‚Ä¢ input cantidad editable
     *    ‚Ä¢ stock
     *    ‚Ä¢ estado (Activo / Inactivo)
     *    ‚Ä¢ precio unitario y subtotal (si showPrices)
     *    ‚Ä¢ bot√≥n Quitar
     * - Despu√©s llama a actualizarSubtotalesYValidar() para:
     *    ‚Ä¢ recalcular subtotales
     *    ‚Ä¢ mostrar alertas
     *    ‚Ä¢ habilitar/deshabilitar Guardar
     */
    function renderConfirmTable(items){
      tbodyConfirm.innerHTML = items.map((it, idx) => {
        const estadoHtml = it.activo
          ? '<span class="badge text-bg-success">Activo</span>'
          : '<span class="badge text-bg-danger">Inactivo ‚Äî no se puede usar</span>';

        return `
          <tr data-row="${idx}" data-activo="${it.activo ? '1' : '0'}">
            <td class="fw-semibold">${it.id}</td>
            <td>${it.comp || ''}</td>

            <td>
              <input
                type="number"
                class="form-control form-control-sm inpCant"
                value="${it.cantidad}"
                min="1"
                step="1"
                style="max-width:110px;"
                ${it.activo ? '' : 'disabled'}
              />
            </td>

            <td>
              <span class="badge text-bg-light badgeStock">
                ${it.stock === Infinity ? '‚àû' : it.stock}
              </span>
            </td>

            ${showPrices
              ? `<td><span class="precioUnit" data-punit="${it.unitPrice}">${fmtARS(it.unitPrice)}</span></td>`
              : ''}

            ${showPrices
              ? `<td><span class="subtotal">${fmtARS(it.unitPrice * it.cantidad)}</span></td>`
              : ''}

            <td>${estadoHtml}</td>

            <td class="text-end">
              <button type="button" class="btn btn-outline-danger btn-sm btnQuitar">
                <i class="bi bi-x-lg"></i>
              </button>
            </td>
          </tr>
        `;
      }).join('');

      // Wire cantidad editable dentro del modal
      tbodyConfirm.querySelectorAll('.inpCant').forEach(inp =>
        inp.addEventListener('input', actualizarSubtotalesYValidar)
      );

      // Wire bot√≥n "Quitar" dentro del modal (remueve fila sin cerrar modal)
      tbodyConfirm.querySelectorAll('.btnQuitar').forEach(btn => {
        btn.addEventListener('click', (e)=>{
          e.currentTarget.closest('tr')?.remove();
          actualizarSubtotalesYValidar();
        });
      });

      actualizarSubtotalesYValidar();
    }

    /**
     * actualizarSubtotalesYValidar():
     * - Recorre las filas actuales del modal de confirmaci√≥n.
     * - Recalcula subtotales (precio * cantidad).
     * - Marca:
     *    ‚Ä¢ table-warning si se excede stock ‚Üí ‚ö† solo advertencia.
     *    ‚Ä¢ table-danger si est√° inactivo   ‚Üí ‚ùå bloquea guardado.
     * - Determina si btnGuardar se habilita.
     * - Muestra/oculta ruleAlert.
     *
     * Regla final:
     *  - SIN stock suficiente est√° permitido (stock podr√° quedar negativo al "M√°quina Lista").
     *  - √çtem INACTIVO ‚Üí bloquea guardar.
     */
    function actualizarSubtotalesYValidar(){
      let ok = true;
      let total = 0;
      let haySuperaStock = false;

      const rows = Array.from(tbodyConfirm.querySelectorAll('tr'));
      rows.forEach((tr)=>{
        const activo = tr.getAttribute('data-activo') === '1';
        const stock = Number(tr.querySelector('.badgeStock')?.textContent || '0');
        const cant  = Math.max(1, Number(tr.querySelector('.inpCant')?.value || '1'));

        // Subtotal precio * cantidad (solo admin)
        if (showPrices) {
          const unit  = Number(tr.querySelector('.precioUnit')?.getAttribute('data-punit') || '0');
          const sub = unit * cant;
          const subtotalEl = tr.querySelector('.subtotal');
          if (subtotalEl) subtotalEl.textContent = fmtARS(sub);
          total += sub;
        }

        // ¬øSupera stock? ‚Üí warning visual amarillo
        // Nota: stock === Infinity (servicio) nunca dispara warning.
        const superaStock = (stock === 0 && cant > 0) || (stock > 0 && cant > stock);
        haySuperaStock = haySuperaStock || superaStock;

        tr.classList.toggle('table-warning', superaStock); // Amarillo si cant > stock
        tr.classList.toggle('table-danger', !activo);      // Rojo si inactivo

        // Repuesto inactivo => bloquea "Guardar"
        if (!activo) ok = false;
      });

      if (showPrices && totalEstimadoEl) {
        totalEstimadoEl.textContent = fmtARS(total);
      }

      // Mostrar alerta si no hay stock suficiente o si hay inactivos
      ruleAlert.style.display = (haySuperaStock || !ok) ? 'block' : 'none';

      // Bot√≥n Guardar habilitado s√≥lo si:
      //   - hay al menos 1 fila
      //   - no hay inactivos
      btnGuardar.disabled = !ok || rows.length === 0;
    }

    // Bot√≥n "Agregar al presupuesto":
    // - Abre el modal grande con TODA la selecci√≥n actual (`seleccion`)
    btnAgregar.addEventListener('click', () => {
      const items = Array.from(seleccion.values());
      if (!items.length) {
        alert('Seleccion√° al menos un repuesto.');
        return;
      }
      renderConfirmTable(items);
      getConfirmModal()?.show();
    });

    /**
     * Guardar (POST):
     * - Toma las filas actuales del modal de confirmaci√≥n.
     * - Arma payload { ticket_id, items:[{repuesto_id,cantidad},...] }.
     * - POST /api/presupuestoItems
     *   ‚Ä¢ El backend reemplaza por completo la lista de repuestos del presupuesto.
     *   ‚Ä¢ Valida que repuestos inactivos nuevos no entren.
     * - Si OK, volvemos a la pantalla principal del presupuesto del ticket.
     */
    btnGuardar.addEventListener('click', async ()=>{
      if (!ticketId) {
        alert('ticket_id inv√°lido');
        return;
      }

      const rows = Array.from(tbodyConfirm.querySelectorAll('tr'));

      // Armamos el body para el POST
      const payloadItems = rows.map(tr=>{
        const activo = tr.getAttribute('data-activo') === '1';
        if (!activo) return null; // inactivo -> descartar
        const id = Number(tr.querySelector('td')?.textContent?.trim() || '0');
        const cantidad = Math.max(1, Number(tr.querySelector('.inpCant')?.value || '1'));
        return { repuesto_id: id, cantidad };
      }).filter(Boolean);

      if (payloadItems.length === 0) {
        alert('No hay √≠tems v√°lidos para guardar.');
        return;
      }

      try {
        const res = await fetch('/api/presupuestoItems', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({
            ticket_id: ticketId,
            items: payloadItems
          })
        });

        const out = await res.json();

        if (res.ok && out.ok) {
          // Al guardar con √©xito volvemos al detalle del presupuesto
          getConfirmModal()?.hide();
          window.location.href = `/presupuesto/${ticketId}`;
        } else {
          alert('Error al guardar: ' + (out.error || res.statusText));
        }
      } catch {
        alert('Error de red al guardar.');
      }
    });

    // ===================== Init de la p√°gina =====================
    /**
     * init():
     * - 1) Trae selecci√≥n previa desde el backend (para que el t√©cnico no pierda lo que ya estaba).
     * - 2) Carga categor√≠as para el filtro.
     * - 3) Carga la primera p√°gina de repuestos.
     * - 4) Renderiza el resumen inicial.
     */
    async function init() {
      try {
        await cargarSeleccionAnterior(); // inicializa `seleccion` con lo que ya estaba guardado
        renderSeleccionResumen();
      } catch(e){}

      try {
        await cargarCategorias(); // llena <select id="categoria">
      } catch(e){}

      try {
        await cargar(); // dibuja tabla por primera vez
      } catch(e){}
    }

    // Ejecutamos init() cuando el DOM est√© listo
    if (document.readyState === 'loading') {
      window.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>

  {/* ============================================================
     Estilos propios de la card de "seleccionados"
     (resumen superior con chips/edit/delete)
     ============================================================ */}
  <style>
    .sel-grid{
      display:flex;
      flex-direction: column;
      gap:.75rem;
    }

    .sel-card{
      width:100%;
      display:flex;
      align-items:center;
      gap:.75rem;
      padding:.65rem .8rem;

      border:1px solid var(--bs-border-color);
      border-radius:.75rem;
      background:linear-gradient(180deg, var(--bs-body-bg), rgba(0,0,0,.02));

      box-shadow: 0 1px 0 rgba(0,0,0,.04);
      transition:
        transform .08s ease,
        box-shadow .08s ease,
        border-color .08s ease;

      flex-wrap:nowrap;
    }

    .sel-card:hover{
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0,0,0,.06);
      border-color: rgba(0,0,0,.15);
    }

    .sel-card__left{
      min-width:0;
      display:flex;
      align-items:center;
      gap:.5rem;
      flex:1 1 auto;
    }

    .sel-id{
      font-variant-numeric: tabular-nums;
      color: var(--bs-secondary-color);
    }

    .sel-name{
      max-width: 40ch;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-weight: 500;
    }

    .sel-card__right{
      margin-left:auto;
      display:flex;
      align-items:center;
      gap:.6rem;
      flex:0 0 auto;
    }

    .btn-icon{
      --bs-btn-padding-y: .25rem;
      --bs-btn-padding-x: .45rem;
      --bs-btn-font-size: .85rem;
      line-height: 1;
      display:inline-flex;
      align-items:center;
      justify-content:center;
    }
  </style>
</BasePrivateLayout>
