---
import BasePrivateLayout from '../../../layouts/BasePrivateLayout.astro';
const ticketId = Astro.params.id;
---

<BasePrivateLayout>
  <div id="repuestos-root" class="container mt-5" data-ticket-id={ticketId}>
    <div class="d-flex align-items-center justify-content-between mb-3">
      <h2 class="mb-0">
        <i class="bi bi-box-seam me-2"></i> Repuestos necesarios
      </h2>
      <div class="d-flex gap-2">
        <a class="btn btn-light btn-sm" href={`/presupuesto/${ticketId}`}>
          <i class="bi bi-arrow-left"></i> Volver al presupuesto
        </a>
      </div>
    </div>

    <div class="card mb-3">
      <div class="card-body">
        <div class="row g-2">
          <div class="col-12">
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-search"></i></span>
              <input id="q" type="text" class="form-control" placeholder="Buscar componente..." />
              <button id="btnClearQ" class="btn btn-outline-secondary" type="button" style="display:none;">
                <i class="bi bi-x-lg"></i>
              </button>
            </div>
          </div>
          <div class="col-6">
            <select id="categoria" class="form-select">
              <option value="">Todas las categorías</option>
            </select>
          </div>
          <div class="col-6">
            <select id="estado" class="form-select">
              <option value="">Todos los estados</option>
              <option value="activo">Estado activo</option>
              <option value="inactivo">No activo</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-header d-flex justify-content-between">
        <span>Seleccionar repuestos</span>
        <span class="text-muted small" id="resumen"></span>
      </div>
      <div class="table-responsive" style="max-height:520px; overflow:auto;">
        <table class="table table-sm table-striped mb-0">
          <thead class="table-light">
            <tr>
              <th style="width:44px;"><input type="checkbox" id="chkAll" /></th>

              <!-- Cabeceras sortables -->
              <th class="th-sortable" data-field="id" style="white-space:nowrap; cursor:pointer;">
                ID <span class="sort-icon text-muted">↕</span>
              </th>
              <th class="th-sortable" data-field="componente" style="cursor:pointer;">
                Componente <span class="sort-icon text-muted">↕</span>
              </th>
              <th class="th-sortable" data-field="stock" style="cursor:pointer;">
                Stock <span class="sort-icon text-muted">↕</span>
              </th>
              <th class="th-sortable" data-field="categoria" style="cursor:pointer;">
                Categoría <span class="sort-icon text-muted">↕</span>
              </th>
              <th class="th-sortable" data-field="precio" style="cursor:pointer;">
                Precio <span class="sort-icon text-muted">↕</span>
              </th>
              <th class="th-sortable" data-field="activo" style="cursor:pointer;">
                Activo <span class="sort-icon text-muted">↕</span>
              </th>
            </tr>
          </thead>
          <tbody id="tbody-repuestos">
            <tr><td colspan="7" class="text-center py-3">Cargando...</td></tr>
          </tbody>
        </table>
      </div>
      <div class="card-footer d-flex justify-content-between align-items-center">
        <div>
          <button class="btn btn-outline-secondary btn-sm" id="prevPage"><i class="bi bi-chevron-left"></i> Anterior</button>
          <button class="btn btn-outline-secondary btn-sm ms-2" id="nextPage">Siguiente <i class="bi bi-chevron-right"></i></button>
        </div>
        <div class="d-flex align-items-center gap-2">
          <div id="paginacionInfo" class="text-muted small me-2"></div>
          <button id="btnAgregar" class="btn btn-primary btn-sm">
            <i class="bi bi-plus-circle me-1"></i> Agregar al presupuesto
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal confirmación -->
  <div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title"><i class="bi bi-check2-circle me-2"></i> Confirmar repuestos a agregar</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <p class="text-muted mb-2">Revisá la lista. Podés cambiar cantidades o quitar ítems antes de guardar.</p>
          <div class="table-responsive">
            <table class="table table-sm align-middle">
              <thead>
                <tr>
                  <th style="width:80px;">ID</th>
                  <th>Componente</th>
                  <th style="width:120px;">Cantidad</th>
                  <th style="width:100px;">Stock</th>
                  <th style="width:140px;">Precio unitario</th>
                  <th style="width:140px;">Subtotal</th>
                  <th style="width:160px;">Estado</th>
                  <th style="width:60px;"></th>
                </tr>
              </thead>
              <tbody id="tbody-confirm"></tbody>
            </table>
          </div>
          <div id="ruleAlert" class="alert alert-warning py-2 px-3" style="display:none;">
            Hay repuestos <strong>inactivos</strong> o cantidades que superan el stock. Corregí para poder guardar.
          </div>
        </div>
        <div class="modal-footer d-flex justify-content-end gap-3">
          <div class="fw-semibold me-auto">Total estimado: <span id="totalEstimado">$0</span></div>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button id="btnGuardar" type="button" class="btn btn-primary" disabled>
            <i class="bi bi-save me-1"></i> Guardar
          </button>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    const root = document.getElementById('repuestos-root');
    const ticketId = Number(root?.dataset.ticketId || 0);

    const q = document.getElementById('q');
    const btnClearQ = document.getElementById('btnClearQ');
    const categoria = document.getElementById('categoria');
    const estado = document.getElementById('estado');
    const tbody = document.getElementById('tbody-repuestos');
    const resumen = document.getElementById('resumen');
    const paginacionInfo = document.getElementById('paginacionInfo');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const chkAll = document.getElementById('chkAll');
    const btnAgregar = document.getElementById('btnAgregar');

    const thSortables = Array.from(document.querySelectorAll('.th-sortable'));

    const confirmModalEl = document.getElementById('confirmModal');
    const ruleAlert = document.getElementById('ruleAlert');
    const tbodyConfirm = document.getElementById('tbody-confirm');
    const btnGuardar = document.getElementById('btnGuardar');
    const totalEstimadoEl = document.getElementById('totalEstimado');
    let bsModal = null;

    let page = 1;
    const pageSize = 30;
    let sortBy = 'id';
    let sortDir = 'asc';

    // === selección global persistente
    const seleccion = new Map(); // id -> { id, comp, stock, unitPrice, cantidad, activo }

    // ====== utilidades ======
    const fmtARS = (n) =>
      new Intl.NumberFormat('es-AR', { style:'currency', currency:'ARS', minimumFractionDigits: 0, maximumFractionDigits: 2 }).format(Number(n)||0);

    function parsePrecioARS(v){
      if (v == null || v === '') return 0;
      if (typeof v === 'number') return Number.isFinite(v) ? v : 0;
      const s = String(v).trim();
      const sDigits = s.replace(/[^0-9]/g,'');
      const n = Number(sDigits);
      return Number.isFinite(n) ? n : 0;
    }

    function toggleClearBtn(){ btnClearQ.style.display = (q.value ?? '').trim() ? 'block' : 'none'; }
    q.addEventListener('input', () => { toggleClearBtn(); refetch(); });
    btnClearQ.addEventListener('click', () => { q.value=''; toggleClearBtn(); page=1; cargar(); });
    toggleClearBtn();

    async function cargarCategorias() {
      try {
        const res = await fetch('/api/categoriasRepuestos');
        const out = await res.json();
        const cats = Array.isArray(out?.categorias) ? out.categorias : [];
        categoria.innerHTML = '<option value="">Todas las categorías</option>' +
          cats.map(c => `<option value="${c.replaceAll('"','&quot;')}">${c}</option>`).join('');
      } catch {}
    }

    function setLoading(){ tbody.innerHTML = '<tr><td colspan="7" class="text-center py-3">Cargando...</td></tr>'; }

    function wireRowCheckboxes(){
      document.querySelectorAll('.chkItem').forEach((el)=>{
        if (el.disabled) return; // inactivos no son seleccionables
        const id = Number(el.getAttribute('data-id'));
        const comp = String(el.getAttribute('data-comp') || '');
        const stock = Number(el.getAttribute('data-stock') || '0');
        const unitPrice = Number(el.getAttribute('data-precio') || '0');
        const activo = el.getAttribute('data-activo') === '1';

        el.checked = seleccion.has(id);
        el.onchange = () => {
          if (el.checked) {
            const prev = seleccion.get(id);
            const cantidad = prev?.cantidad ?? 1;
            seleccion.set(id, { id, comp, stock, unitPrice, cantidad, activo: true });
          } else {
            seleccion.delete(id);
          }
        };
      });
    }

    function updateSortUI() {
      thSortables.forEach(th => {
        const f = th.getAttribute('data-field');
        const icon = th.querySelector('.sort-icon');
        const active = f === sortBy;
        th.classList.toggle('fw-semibold', active);
        if (icon) icon.textContent = active ? (sortDir === 'asc' ? '↑' : '↓') : '↕';
        if (icon) icon.classList.toggle('text-muted', !active);
      });
    }

    async function cargar() {
      setLoading();
      try {
        const params = new URLSearchParams({
          page: String(page),
          pageSize: String(pageSize),
          q: (q.value ?? '').trim(),
          categoria: (categoria.value ?? '').trim(),
          estado: (estado.value ?? '').trim(),
          sortBy,
          sortDir,
        });
        const res = await fetch('/api/listarRepuestos?' + params.toString());
        const out = await res.json();
        const data = out.rows || [];
        const total = out.total || 0;
        const maxPage = total ? Math.ceil(total / pageSize) : 1;
        if (total > 0 && page > maxPage) { page = maxPage; return cargar(); }

        if (data.length === 0) {
          tbody.innerHTML = '<tr><td colspan="7" class="text-center py-3 text-muted">Sin resultados.</td></tr>';
        } else {
          tbody.innerHTML = data.map(r => {
            const stockNum  = Number(String(r.stock ?? '0').replace(/[^0-9.-]/g,'')) || 0;
            const unitPrice = parsePrecioARS(r.precio ?? '');
            const isActive  = !!r.activo;

            // checkbox disabled si está inactivo
            const chk = `
              <input type="checkbox" class="chkItem"
                data-id="${r.id}"
                data-comp="${(r.componente ?? '').toString().replace(/"/g,'&quot;')}"
                data-stock="${stockNum}"
                data-precio="${unitPrice}"
                data-activo="${isActive ? '1' : '0'}"
                ${isActive ? '' : 'disabled title="Inactivo — no se puede seleccionar"'}
              />
            `;

            return `
              <tr class="${isActive ? '' : 'table-secondary'}">
                <td>${chk}</td>
                <td>${r.id}</td>
                <td>${r.componente ?? ''}</td>
                <td>${r.stock ?? ''}</td>
                <td>${r.categoria ?? ''}</td>
                <td>${r.precio ?? ''}</td>
                <td>${isActive ? 'Sí' : '<span class="text-danger fw-semibold">No</span>'}</td>
              </tr>
            `;
          }).join('');
        }

        const from = total ? (page-1)*pageSize + 1 : 0;
        const to   = total ? Math.min(page*pageSize, total) : 0;
        resumen.textContent = total ? `Total: ${total}` : '';
        paginacionInfo.textContent = total ? `Mostrando ${from}-${to} de ${total}` : '';

        chkAll.checked = false;
        chkAll.onchange = () => {
          // solo checkboxes habilitados (activos)
          document.querySelectorAll('.chkItem:not([disabled])').forEach((el)=>{
            const id = Number(el.getAttribute('data-id'));
            const comp = String(el.getAttribute('data-comp') || '');
            const stock = Number(el.getAttribute('data-stock') || '0');
            const unitPrice = Number(el.getAttribute('data-precio') || '0');

            el.checked = chkAll.checked;
            if (chkAll.checked) {
              const prev = seleccion.get(id);
              const cantidad = prev?.cantidad ?? 1;
              seleccion.set(id, { id, comp, stock, unitPrice, cantidad, activo: true });
            } else {
              seleccion.delete(id);
            }
          });
        };

        wireRowCheckboxes();

        prevPageBtn.disabled = page <= 1;
        nextPageBtn.disabled = (page*pageSize) >= total;

        updateSortUI();
      } catch (e) {
        tbody.innerHTML = '<tr><td colspan="7" class="text-danger text-center py-3">Error al cargar.</td></tr>';
        resumen.textContent = '';
        paginacionInfo.textContent = '';
      }
    }

    // Debounce de búsqueda
    const refetch = (()=>{ let t; return ()=>{ clearTimeout(t); t=setTimeout(()=>{ page=1; cargar(); }, 250);} })();
    q.addEventListener('keydown', (e)=>{ if(e.key==='Enter'){ e.preventDefault(); }});
    categoria.addEventListener('change', ()=>{ page=1; cargar(); });
    estado.addEventListener('change', ()=>{ page=1; cargar(); });
    prevPageBtn.addEventListener('click', ()=>{ if(page>1){ page--; cargar(); }});
    nextPageBtn.addEventListener('click', ()=>{ page++; cargar(); });

    // Click en cabeceras para ordenar
    thSortables.forEach(th=>{
      th.addEventListener('click', ()=>{
        const f = th.getAttribute('data-field');
        if (!f) return;
        if (sortBy === f) {
          sortDir = (sortDir === 'asc') ? 'desc' : 'asc';
        } else {
          sortBy = f;
          sortDir = 'asc';
        }
        page = 1;
        cargar();
      });
    });

    // ===== Modal =====
    function renderConfirmTable(items){
      tbodyConfirm.innerHTML = items.map((it, idx) => {
        const estadoHtml = it.activo
          ? '<span class="badge text-bg-success">Activo</span>'
          : '<span class="badge text-bg-danger">Inactivo — no se puede usar</span>';
        return `
          <tr data-row="${idx}" data-activo="${it.activo ? '1' : '0'}">
            <td class="fw-semibold">${it.id}</td>
            <td>${it.comp || ''}</td>
            <td><input type="number" class="form-control form-control-sm inpCant" value="${it.cantidad}" min="1" step="1" style="max-width:110px;" ${it.activo ? '' : 'disabled'} /></td>
            <td><span class="badge text-bg-light badgeStock">${it.stock}</span></td>
            <td><span class="precioUnit" data-punit="${it.unitPrice}">${fmtARS(it.unitPrice)}</span></td>
            <td><span class="subtotal">${fmtARS(it.unitPrice * it.cantidad)}</span></td>
            <td>${estadoHtml}</td>
            <td class="text-end"><button type="button" class="btn btn-outline-danger btn-sm btnQuitar"><i class="bi bi-x-lg"></i></button></td>
          </tr>
        `;
      }).join('');

      tbodyConfirm.querySelectorAll('.inpCant').forEach(inp => inp.addEventListener('input', actualizarSubtotalesYValidar));
      tbodyConfirm.querySelectorAll('.btnQuitar').forEach(btn => {
        btn.addEventListener('click', (e)=>{
          e.currentTarget.closest('tr')?.remove();
          actualizarSubtotalesYValidar();
        });
      });

      actualizarSubtotalesYValidar();
    }

    function actualizarSubtotalesYValidar(){
      let ok = true, total = 0;
      const rows = Array.from(tbodyConfirm.querySelectorAll('tr'));
      rows.forEach((tr)=>{
        const activo = tr.getAttribute('data-activo') === '1';
        const stock = Number(tr.querySelector('.badgeStock')?.textContent || '0');
        const cant  = Math.max(1, Number(tr.querySelector('.inpCant')?.value || '1'));
        const unit  = Number(tr.querySelector('.precioUnit')?.getAttribute('data-punit') || '0');
        const sub = unit * cant;
        const subtotalEl = tr.querySelector('.subtotal');
        if (subtotalEl) subtotalEl.textContent = fmtARS(sub);
        total += sub;

        const superaStock = (stock === 0 && cant > 0) || (stock > 0 && cant > stock);
        const invalido = !activo || superaStock;
        tr.classList.toggle('table-warning', invalido);
        if (invalido) ok = false;
      });
      totalEstimadoEl.textContent = fmtARS(total);
      ruleAlert.style.display = ok ? 'none' : 'block';
      btnGuardar.disabled = !ok || rows.length === 0;
    }

    btnAgregar.addEventListener('click', () => {
      const items = Array.from(document.querySelectorAll('.chkItem'))
        .filter(el => el.checked)
        .map(el => ({
          id: Number(el.getAttribute('data-id')),
          comp: String(el.getAttribute('data-comp')||''),
          stock: Number(el.getAttribute('data-stock')||'0'),
          unitPrice: Number(el.getAttribute('data-precio')||'0'),
          activo: el.getAttribute('data-activo') === '1',
          cantidad: (seleccion.get(Number(el.getAttribute('data-id')))?.cantidad) ?? 1,
        }));

      if (!items.length) { alert('Seleccioná al menos un repuesto.'); return; }

      // Blindar por si algo quedó cacheado: si hay inactivos, igual los mostramos como "no se puede usar"
      items.forEach(it => seleccion.set(it.id, it));
      renderConfirmTable(items);

      // @ts-ignore
      bsModal = new bootstrap.Modal(confirmModalEl);
      bsModal.show();
    });

    btnGuardar.addEventListener('click', async ()=>{
      if (!ticketId) { alert('ticket_id inválido'); return; }

      // Validación final: no permitir inactivos
      const rows = Array.from(tbodyConfirm.querySelectorAll('tr'));
      const payloadItems = rows.map(tr=>{
        const activo = tr.getAttribute('data-activo') === '1';
        if (!activo) return null;
        const id = Number(tr.querySelector('td')?.textContent?.trim() || '0');
        const cantidad = Math.max(1, Number(tr.querySelector('.inpCant')?.value || '1'));
        return { repuesto_id: id, cantidad };
      }).filter(Boolean);

      if (payloadItems.length === 0) {
        alert('No hay ítems válidos para guardar (hay inactivos o cantidades inválidas).');
        return;
      }

      try {
        const res = await fetch('/api/presupuestoItems', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ ticket_id: ticketId, items: payloadItems })
        });
        const out = await res.json();
        if (res.ok && out.ok) {
          bsModal?.hide();
          window.location.href = `/presupuesto/${ticketId}`;
        } else {
          alert('Error al guardar: ' + (out.error || res.statusText));
        }
      } catch (err) { alert('Error de red al guardar.'); }
    });

    await cargarCategorias();
    cargar();
  </script>
</BasePrivateLayout>
