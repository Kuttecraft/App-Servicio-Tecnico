---
/**
 * P√°gina de Presupuesto de un ticket.
 */
import BasePrivateLayout from '../../layouts/BasePrivateLayout.astro';
import PresupuestoForm from '../../components/PresupuestoForm.astro';
import { supabase } from '../../lib/supabase';
import { formatearFecha } from '../../lib/utils';

// Roles del usuario autenticado
type Perfil = { rol?: string; admin?: boolean; activo?: boolean };
const perfil = (Astro.locals as any).perfil as Perfil | undefined;
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);
const isTecnico = perfil?.rol === 'tecnico';

// ID del ticket desde la ruta din√°mica (/presupuesto/:id)
const { id } = Astro.params as { id: string };

// ===== 1) Ticket (traemos solicitar_presupuesto) =====
const { data: ticket } = await supabase
  .from('tickets_mian')
  .select('id, ticket, solicitar_presupuesto')
  .eq('id', id)
  .single();

// ===== 2) Presupuesto: siempre la √∫ltima fila =====
const { data: presuRows } = await supabase
  .from('presupuestos')
  .select('*')
  .eq('ticket_id', id)
  .order('id', { ascending: false })
  .limit(1);

const presupuesto = Array.isArray(presuRows) ? (presuRows[0] ?? null) : null;
const isVerificar = Boolean(presupuesto?.id);

// ===== 3) Mezcla para el form/vista =====
const equipo = {
  ticketId: ticket?.id,
  ticketNumero: ticket?.ticket,
  solicitar_presupuesto: ticket?.solicitar_presupuesto ?? null,
  ...presupuesto
};

// ===== 4) Fecha visible =====
const fechaPresupuesto = presupuesto?.fecha_presupuesto || null;
const fechaPresupuestoVista = fechaPresupuesto
  ? formatearFecha(fechaPresupuesto)
  : formatearFecha(new Date().toISOString());

// ===== 5) Helpers =====
const v = (x: any) => (x ?? '') || '‚Äî';

function parseToNumberLike(s?: string | null): string {
  if (!s) return '';
  let t = String(s).trim().replace(/[^\d.,-]/g,'');
  const lastDot=t.lastIndexOf('.'), lastCom=t.lastIndexOf(',');
  if(lastDot!==-1 && lastCom!==-1){
    const dec = lastDot>lastCom?'.':','; const mil = dec==='.'?',':'.';
    t = t.split(mil).join('');
    if(dec===',') t = t.replace(',', '.');
  } else if(lastCom!==-1 && lastDot===-1){
    t = t.replace(',', '.');
  }
  return t;
}
function formatARS(v?: string | number | null): string {
  if (v == null || v === '') return '';
  const asStr = typeof v === 'number' ? String(v) : String(v);
  const norm = parseToNumberLike(asStr);
  const n = Number(norm);
  if (!isFinite(n)) return String(v);
  const parts = norm.split('.');
  const decimals = parts[1]?.length ? Math.min(2, parts[1].length) : 0;
  return '$' + n.toLocaleString('es-AR', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
}

// ===== 6) Path centralizado a la p√°gina real =====
const repsPath = `/presupuesto/${id}/repuestosItems`;
---

<BasePrivateLayout>
  <!-- data-ticket-id expone el id al script sin interpolarlo en c√≥digo -->
  <div id="presupuesto-root" class="container mt-5" data-ticket-id={id}>
    <!-- Encabezado -->
    <div class="d-flex align-items-center justify-content-between mb-3">
      <h2 class="mb-0">
        <i class="bi bi-receipt me-2"></i>
        {isVerificar ? 'Verificar presupuesto' : 'A√±adir presupuesto'} del ticket #{equipo.ticketNumero ?? id}
      </h2>
      <div class="d-flex gap-2">
        <!-- üîµ Solo queda Volver en la cabecera -->
        <a class="btn btn-light btn-sm" href={`/detalle/${id}`}>
          <i class="bi bi-arrow-left"></i> Volver
        </a>
      </div>
    </div>

    {equipo?.ticketId ? (
      <>
        <!-- Bloque de fecha + bot√≥n integrado con badge -->
        <div class="card mb-3">
          <div class="card-body">
            <div class="row g-3 align-items-end">
              <div class="col-md-6">
                <label class="form-label">Fecha presupuesto</label>
                <input type="text" class="form-control" value={fechaPresupuestoVista} readonly />
              </div>

              <div class="col-md-6">
                <label class="form-label d-flex align-items-center justify-content-between">
                  <span>Repuestos necesarios</span>
                  <span class="small text-muted" id="rep-sum-help" style="display:none;"></span>
                </label>
                <div class="d-flex align-items-center gap-2">
                  <!-- üîµ √öNICO bot√≥n funcional para administrar repuestos -->
                  <a id="btnRepuestos" class="btn btn-outline-primary" href={repsPath}>
                    <i class="bi bi-box-seam me-1"></i>
                    Administrar repuestos
                    <span id="badgeRepuestosCount" class="badge text-bg-secondary ms-2" style="display:none;">0</span>
                  </a>
                  <span id="repResumen" class="text-muted small"></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {isAdmin ? (
          <PresupuestoForm equipo={equipo} />
        ) : isTecnico ? (
          <>
            <div class="alert alert-info d-flex align-items-center" role="alert">
              <i class="bi bi-info-circle me-2"></i>
              Vista de solo lectura. Si necesit√°s cambios, contact√° a un administrador.
            </div>

            <div class="card shadow-sm">
              <div class="card-body">
                <div class="row g-3">
                  <div class="col-md-6">
                    <label class="form-label fw-semibold">Monto</label>
                    <input type="text" class="form-control" value={formatARS(equipo.monto)} readonly />
                  </div>
                  <div class="col-md-6">
                    <label class="form-label fw-semibold">¬øGarant√≠a activa?</label>
                    <input type="text" class="form-control" value={v(equipo.garantia_activa)} readonly />
                  </div>
                  <div class="col-md-6">
                    <label class="form-label fw-semibold">Link presupuesto</label>
                    <input type="text" class="form-control" value={v(equipo.link_presupuesto)} readonly />
                  </div>
                  {isVerificar && (
                    <div class="col-md-6">
                      <label class="form-label fw-semibold">Aprobaci√≥n del presupuesto</label>
                      <input type="text" class="form-control" value={v(equipo.presupuesto_aprobado)} readonly />
                    </div>
                  )}
                  <div class="col-md-6">
                    <label class="form-label fw-semibold">¬øQuiere saber presupuesto?</label>
                    <input
                      type="text"
                      class="form-control"
                      value={
                        equipo?.solicitar_presupuesto === 'Si' ? 'S√≠' :
                        equipo?.solicitar_presupuesto === 'No' ? 'No' :
                        'Sin seleccionar'
                      }
                      readonly
                    />
                  </div>

                  <div class="col-12">
                    <label class="form-label fw-semibold">Notas de administraci√≥n</label>
                    <textarea class="form-control" rows={4} readonly>{v(equipo.notas_administracion)}</textarea>
                  </div>
                </div>
              </div>
            </div>
          </>
        ) : (
          <div class="alert alert-warning">No ten√©s permisos para ver esta secci√≥n.</div>
        )}
      </>
    ) : (
      <div class="alert alert-danger">No se encontr√≥ el ticket con ID: {id}</div>
    )}
  </div>

  <!-- Script: toma ticketId desde data-* y carga el resumen -->
  <script type="module">
    const root = document.getElementById('presupuesto-root');
    const ticketId = Number(root?.dataset.ticketId || 0);

    const badge = document.getElementById('badgeRepuestosCount');
    const resumen = document.getElementById('repResumen');
    const help = document.getElementById('rep-sum-help');

    function fmt(n){ return new Intl.NumberFormat('es-AR').format(n); }

    async function cargarResumen() {
      if (!ticketId) return;
      try {
        const res = await fetch(`/api/presupuestoItems?ticket_id=${ticketId}`);
        const out = await res.json();
        const rows = Array.isArray(out?.rows) ? out.rows : [];

        // cantidad de filas distintas + sumatoria de cantidades * precio
        let totalCant = 0;
        let totalPrecio = 0;
        for (const r of rows) {
          const cantidad = Number(r?.cantidad || 0);
          totalCant += cantidad;
          const pn = Number(String(r?.precio || '').replace(/[^\d]/g,'') || '0');
          totalPrecio += pn * cantidad;
        }

        if (badge) {
          if (rows.length > 0) {
            badge.style.display = 'inline-block';
            badge.textContent = String(rows.length);
          } else {
            badge.style.display = 'none';
          }
        }

        if (resumen) {
          if (rows.length > 0) {
            const itemsTxt = rows.length === 1 ? '√≠tem' : '√≠tems';
            const totalTxt = '$' + fmt(totalPrecio);
            resumen.textContent = `${rows.length} ${itemsTxt} ¬∑ ${totalTxt}`;
          } else {
            resumen.textContent = 'Sin repuestos seleccionados';
          }
        }

        if (help) {
          help.style.display = rows.length > 0 ? 'inline' : 'none';
          help.textContent = rows.length > 0 ? 'Seleccionados para este presupuesto' : '';
        }
      } catch(e) {
        console.warn('No se pudo cargar el resumen de repuestos', e);
      }
    }

    cargarResumen();
  </script>
</BasePrivateLayout>
