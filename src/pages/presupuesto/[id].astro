---
/**
 * P√°gina de Presupuesto de un ticket.
 *
 * üëÄ ¬øQu√© muestra?
 * - Datos principales del presupuesto asociado a un ticket.
 * - Listado de repuestos ya seleccionados para ese presupuesto.
 * - Bot√≥n para administrar esos repuestos.
 * - Bot√≥n para descargar el PDF del presupuesto.
 *
 * üîê Permisos / visibilidad:
 * - T√©cnicos:
 *   - Ven el presupuesto en modo "solo lectura".
 *   - NO ven precios unitarios, subtotales ni total estimado.
 *   - NO pueden editar campos del presupuesto desde ac√°.
 *
 * - Admin:
 *   - Ve precios unitarios, subtotales por √≠tem y total estimado.
 *   - Puede editar presupuesto usando <PresupuestoForm />.
 *   - Puede precargar autom√°ticamente el campo "Monto" con la suma
 *     de los repuestos seleccionados (auto-fill inteligente).
 *
 * üíæ Datos cargados en el servidor (en el bloque frontmatter):
 * - ticket: id, n√∫mero de ticket y si pidi√≥ presupuesto.
 * - presupuesto m√°s reciente (√∫ltimo registro de la tabla presupuestos).
 * - Se construye `equipo`, que viaja al form.
 *
 * üß† Terminolog√≠a:
 * - "Verificar presupuesto": ya existe un presupuesto para este ticket.
 * - "A√±adir presupuesto": todav√≠a no hay presupuesto guardado.
 */

import BasePrivateLayout from '../../layouts/BasePrivateLayout.astro';
import PresupuestoForm from '../../components/PresupuestoForm.astro';
import { supabase } from '../../lib/supabase';
import { formatearFecha } from '../../lib/utils';

// Perfil/rol del usuario autenticado (inyectado por middleware en Astro.locals)
type Perfil = { rol?: string; admin?: boolean; activo?: boolean };
const perfil = (Astro.locals as any).perfil as Perfil | undefined;

// Reglas de visibilidad:
// - Admin -> showPrices = true
// - T√©cnico -> showPrices = false
const isAdmin = (perfil?.rol === 'admin') || (perfil?.admin === true);
const isTecnico = perfil?.rol === 'tecnico';
const showPrices = isAdmin; // <<< √öNICA FUENTE DE VERDAD: si no sos admin, no hay precios

// ID del ticket tomado de la ruta din√°mica /presupuesto/:id
const { id } = Astro.params as { id: string };

/** ==========================
 * 1) Cargamos datos del ticket
 *    - id interno
 *    - nro p√∫blico "ticket"
 *    - solicitar_presupuesto: "Si" | "No" | null
 * =========================== */
const { data: ticket } = await supabase
  .from('tickets_mian')
  .select('id, ticket, solicitar_presupuesto')
  .eq('id', id)
  .single();

/** ==========================
 * 2) Traemos el presupuesto m√°s reciente del ticket
 *    - Obtenemos todos los presupuestos del ticket ordenados desc por id
 *    - Nos quedamos con el primero (√∫ltimo generado)
 * =========================== */
const { data: presuRows } = await supabase
  .from('presupuestos')
  .select('*')
  .eq('ticket_id', id)
  .order('id', { ascending: false })
  .limit(1);

const presupuesto = Array.isArray(presuRows) ? (presuRows[0] ?? null) : null;

// Si hay presupuesto previo -> "Verificar presupuesto", sino "A√±adir presupuesto"
const isVerificar = Boolean(presupuesto?.id);

/**
 * `equipo`:
 * - Objeto que se le pasa a <PresupuestoForm />
 * - Combina datos del ticket (ticketId, ticketNumero, solicitar_presupuesto)
 *   con los campos del presupuesto m√°s reciente (monto, link_presupuesto, etc.)
 */
const equipo = {
  ticketId: ticket?.id,
  ticketNumero: ticket?.ticket,
  solicitar_presupuesto: ticket?.solicitar_presupuesto ?? null,
  ...presupuesto
};

/** Fecha mostrada en el campo "Fecha presupuesto" */
const fechaPresupuesto = presupuesto?.fecha_presupuesto || null;
const fechaPresupuestoVista = fechaPresupuesto
  ? formatearFecha(fechaPresupuesto)
  : formatearFecha(new Date().toISOString()); // fallback: hoy

/** ============== Helpers de moneda para mostrar ARS ============== */
/**
 * parseToNumberLike:
 * - Limpia un string tipo "$12.345,50" ‚Üí "12345.50"
 * - Convierte coma o punto como separador decimal seg√∫n el contexto.
 * - Es el mismo criterio que usamos en edici√≥n de presupuesto.
 */
function parseToNumberLike(s?: string | null): string {
  if (!s) return '';
  let t = String(s).trim().replace(/[^\d.,-]/g,'');

  // Buscar √∫ltimo separador decimal real entre . y ,
  const lastDot=t.lastIndexOf('.'), lastCom=t.lastIndexOf(',');
  if(lastDot!==-1 && lastCom!==-1){
    // Si hay ambos, el que aparece √∫ltimo en el string se considera decimal,
    // el otro se considera separador de miles y se elimina.
    const dec = lastDot>lastCom?'.':',';    // cu√°l es decimal
    const mil = dec==='.'?',':'.';          // cu√°l es miles
    t = t.split(mil).join('');              // saco "miles"
    if(dec===',') t = t.replace(',', '.');  // unifico decimal a '.'
  } else if(lastCom!==-1 && lastDot===-1){
    // S√≥lo coma -> decimal
    t = t.replace(',', '.');
  }
  return t;
}

/**
 * formatARS:
 * - Devuelve "$12.345,67" o "$12.345" seg√∫n la cantidad de decimales detectados.
 * - Se usa m√°s abajo para el campo Monto en vista t√©cnico.
 */
function formatARS(v?: string | number | null): string {
  if (v == null || v === '') return '';
  const norm = parseToNumberLike(String(v));
  const n = Number(norm);
  if (!isFinite(n)) return String(v);
  const parts = norm.split('.');
  const decimals = parts[1]?.length ? Math.min(2, parts[1].length) : 0;
  return '$' + n.toLocaleString('es-AR', {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals
  });
}

/**
 * Path al subpantalla de selecci√≥n de repuestos
 * (/presupuesto/:id/repuestosItems):
 * - Ah√≠ el admin/t√©cnico administra (agrega/quita) los repuestos para este ticket.
 * - Ese subpantalla pega a /api/listarRepuestos y /api/presupuestoItems.
 */
const repsPath = `/presupuesto/${id}/repuestosItems`;
---

<BasePrivateLayout>
  {/* ============================================================
     CONTENEDOR RA√çZ:
     - data-ticket-id      ‚Üí usado por el <script> para fetch de √≠tems.
     - data-show-prices    ‚Üí true/false, controla visibilidad de totales.
     ============================================================ */}
  <div
    id="presupuesto-root"
    class="container mt-5"
    data-ticket-id={id}
    data-show-prices={String(showPrices)}
  >
    {/* ============================================================
       HEADER PRINCIPAL DE LA P√ÅGINA
       - T√≠tulo din√°mico ("Verificar" vs "A√±adir")
       - Bot√≥n Volver al detalle del equipo
       ============================================================ */}
    <div class="d-flex align-items-center justify-content-between mb-3">
      <h2 class="mb-0">
        <i class="bi bi-receipt me-2"></i>
        {isVerificar ? 'Verificar presupuesto' : 'A√±adir presupuesto'} del ticket #{equipo.ticketNumero ?? id}
      </h2>

      <a class="btn btn-light btn-sm" href={`/detalle/${id}`}>
        <i class="bi bi-arrow-left"></i> Volver
      </a>
    </div>

    {/* ============================================================
       Chequeo: si encontramos el ticket (equipo.ticketId),
       renderizamos todo. Caso contrario mostramos alerta de error.
       ============================================================ */}
    {equipo?.ticketId ? (
      <>
        {/* ========================================================
           BLOQUE: Fecha de presupuesto
           - S√≥lo lectura, siempre visible.
           - Usa formatearFecha() (dd/mm/aaaa).
           ======================================================== */}
        <div class="card mb-3">
          <div class="card-body">
            <div class="row g-3 align-items-end">
              <div class="col-md-6">
                <label class="form-label">Fecha presupuesto</label>
                <input
                  type="text"
                  class="form-control"
                  value={fechaPresupuestoVista}
                  readonly
                />
              </div>
            </div>
          </div>
        </div>

        {/* ========================================================
           BLOQUE: Formulario o vista de s√≥lo lectura
           - Admin ‚Üí <PresupuestoForm equipo={equipo} />
                    (puede editar monto, link, notas, etc.)
           - T√©cnico ‚Üí versi√≥n read-only con los campos clave
                       (sin editar y con aviso arriba).
           - Otro rol ‚Üí "No ten√©s permisos".
           ======================================================== */}
        {isAdmin ? (
          // üßë‚Äçüíº ADMIN: formulario editable completo
          <PresupuestoForm equipo={equipo} />
        ) : isTecnico ? (
          // üîß T√âCNICO: s√≥lo lectura, sin poder editar desde ac√°
          <>
            <div class="alert alert-info d-flex align-items-center" role="alert">
              <i class="bi bi-info-circle me-2"></i>
              Vista de solo lectura. Si necesit√°s cambios, contact√° a un administrador.
            </div>

            <div class="card shadow-sm">
              <div class="card-body">
                <div class="row g-3">
                  <div class="col-md-6">
                    <label class="form-label fw-semibold">Monto</label>
                    <input
                      type="text"
                      class="form-control"
                      value={formatARS(equipo.monto)}
                      readonly
                    />
                  </div>

                  <div class="col-md-6">
                    <label class="form-label fw-semibold">¬øGarant√≠a activa?</label>
                    <input
                      type="text"
                      class="form-control"
                      value={(equipo.garantia_activa ?? '') || '‚Äî'}
                      readonly
                    />
                  </div>

                  <div class="col-md-6">
                    <label class="form-label fw-semibold">Link presupuesto</label>
                    <input
                      type="text"
                      class="form-control"
                      value={(equipo.link_presupuesto ?? '') || '‚Äî'}
                      readonly
                    />
                  </div>

                  {isVerificar && (
                    <div class="col-md-6">
                      <label class="form-label fw-semibold">Aprobaci√≥n del presupuesto</label>
                      <input
                        type="text"
                        class="form-control"
                        value={(equipo.presupuesto_aprobado ?? '') || '‚Äî'}
                        readonly
                      />
                    </div>
                  )}

                  <div class="col-md-6">
                    <label class="form-label fw-semibold">¬øQuiere saber presupuesto?</label>
                    <input
                      type="text"
                      class="form-control"
                      value={
                        equipo?.solicitar_presupuesto === 'Si' ? 'S√≠' :
                        equipo?.solicitar_presupuesto === 'No' ? 'No' :
                        'Sin seleccionar'
                      }
                      readonly
                    />
                  </div>

                  <div class="col-12">
                    <label class="form-label fw-semibold">Notas de administraci√≥n</label>
                    <textarea
                      class="form-control"
                      rows={4}
                      readonly
                    >{(equipo.notas_administracion ?? '') || '‚Äî'}</textarea>
                  </div>
                </div>
              </div>
            </div>
          </>
        ) : (
          // üö´ Rol sin permisos suficientes
          <div class="alert alert_warning">
            No ten√©s permisos para ver esta secci√≥n.
          </div>
        )}

        {/* ========================================================
           BLOQUE: Lista de repuestos seleccionados para ESTE ticket
           - Tabla din√°mica (JS la rellena).
           - Muestra ID, componente y cantidad siempre.
           - Muestra precio unitario / subtotal / Total solo si showPrices=true.
           - Bot√≥n "Administrar repuestos" ‚Üí va a /presupuesto/:id/repuestosItems
             donde se puede agregar/quitar √≠tems.
           - Bot√≥n "Descargar Presupuesto" ‚Üí /api/presupuestoPdf?ticket_id=...
             genera un PDF con o sin precios seg√∫n isAdmin (lo controla el backend).
           ======================================================== */}
        <div class="card mt-4">
          <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
            <div class="fw-semibold">Repuestos seleccionados</div>

            <div class="d-flex align-items-center gap-3 ms-auto">
              {/* Resumen de cantidad total de √≠tems y, si sos admin, total en $ARS */}
              <div class="small text-muted">
                <span id="repCount">0 √≠tems</span>
                {showPrices && (
                  <>
                    <span class="mx-2">‚Ä¢</span>
                    <span id="totalWrap">
                      Total: <span id="repTotal">$0</span>
                    </span>
                  </>
                )}
              </div>

              {/* Descargar presupuesto (genera PDF en server) */}
              <a
                class="btn btn-success btn-sm"
                href={`/api/presupuestoPdf?ticket_id=${id}`}
                target="_blank"
                rel="noopener"
              >
                <i class="bi bi-file-earmark-pdf me-1"></i> Descargar Presupuesto
              </a>

              {/* Ir a gestionar repuestos (pantalla con buscador, stock, etc.) */}
              <a
                id="btnRepuestos"
                class="btn btn-primary btn-sm"
                href={repsPath}
              >
                <i class="bi bi-box-seam me-1"></i> Administrar repuestos
              </a>
            </div>
          </div>

          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-sm mb-0 align-middle">
                <thead class="table-light">
                  <tr>
                    <th style="width:90px;" class="text-start">ID</th>
                    <th class="text-start">Componente</th>
                    <th style="width:120px;" class="text-end">Cantidad</th>

                    {/* Admin ve columnas de precio unitario y subtotal */}
                    {showPrices && (
                      <th
                        style="width:160px;"
                        class="text-end"
                      >
                        Precio unitario
                      </th>
                    )}
                    {showPrices && (
                      <th
                        style="width:160px;"
                        class="text-end"
                      >
                        Subtotal
                      </th>
                    )}

                    {/* √öltima col: bot√≥n Eliminar √≠tem */}
                    <th
                      style="width:70px;"
                      class="text-center"
                    ></th>
                  </tr>
                </thead>

                <tbody id="tbody-sel">
                  {/* Mientras se carga por fetch(), mostramos un placeholder */}
                  <tr>
                    <td
                      colspan={showPrices ? 6 : 4}
                      class="text-center py-3 text-muted"
                    >
                      Cargando‚Ä¶
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </>
    ) : (
      // Si no encontramos el ticketId armamos alerta roja
      <div class="alert alert-danger">
        No se encontr√≥ el ticket con ID: {id}
      </div>
    )}
  </div>

  {/* ============================================================
     SCRIPT CLIENT-SIDE
     - Se ejecuta en el navegador.
     - Usa data-ticket-id y data-show-prices para cargar/mostrar info.
     - Hace GET /api/presupuestoItems?ticket_id=... para traer
       los repuestos guardados actualmente en este presupuesto.
     - Renderiza filas en la tabla + total estimado (solo admin).
     - Permite eliminar un repuesto del presupuesto SIN recargar,
       haciendo POST con la lista resultante.
     - Para admin:
         Tambi√©n intenta "autofill" del campo Monto del <PresupuestoForm>
         en base a la suma de los repuestos.
       (Si el admin ya toc√≥ manualmente el monto, no lo pisa.)
     ============================================================ */}
  <script type="module">
    // Referencias clave del DOM
    const root = document.getElementById('presupuesto-root');
    const ticketId = Number(root?.dataset.ticketId || 0);
    const showPrices = (root?.dataset.showPrices || 'false') === 'true';

    const tbody = document.getElementById('tbody-sel');
    const repCount = document.getElementById('repCount');
    const repTotal = document.getElementById('repTotal');
    const totalWrap = document.getElementById('totalWrap');

    /**
     * fmtARS0:
     * - Formatea un n√∫mero entero/monto en ARS estilo "$12.345".
     * - Se usa para precio unitario, subtotal y total.
     */
    const fmtARS0 = (n) =>
      new Intl.NumberFormat('es-AR', {
        style: 'currency',
        currency: 'ARS',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(Number(n) || 0);

    /**
     * setMontoFromRepuestos(totalEnteroARS):
     * - Solo para admin (showPrices = true).
     * - Intenta autocompletar el campo "Monto" del <PresupuestoForm />
     *   con la suma de los repuestos (totalEnteroARS).
     * - Respeta una edici√≥n manual previa:
     *   si el admin ya cambi√≥ el monto a mano, no lo vuelve a pisar.
     *
     * C√≥mo lo detecta:
     * - Lee el input[name="monto"] dentro de #presupuesto-form
     * - Compara el valor actual con un dataset.autofillTotal recordado.
     */
    function setMontoFromRepuestos(totalEnteroARS) {
      if (!showPrices) return; // T√©cnicos no tienen ni precios ni form editable

      const inp = document.querySelector('#presupuesto-form input[name="monto"]');
      if (!inp) return;

      const lastAuto = Number(inp.dataset.autofillTotal || '0');

      // Sacamos los d√≠gitos actuales del input para compararlos
      const digits = String(inp.value || '').replace(/\D/g, '');
      const currNum = Number(digits || '0');

      // userEdited = el admin ya toc√≥ el valor y no queremos pisarlo
      const userEdited = (currNum !== 0 && currNum !== lastAuto);
      if (userEdited) return;

      // Autorellenar el campo con el total calculado
      inp.value = fmtARS0(totalEnteroARS);
      inp.dataset.autofillTotal = String(totalEnteroARS);
    }

    /**
     * parseEnteroARS(s):
     * - Convierte un string de precio "humano" a un entero num√©rico aproximado.
     * - Ej: "$12.345" -> 12345
     * - o "123,45" -> 123000 (si parece ser miles/decimales raros).
     * - Se usa como fallback si no hay precio_unit_num ya guardado.
     */
    const parseEnteroARS = (s) => {
      if (!s) return 0;
      const raw = String(s).trim();

      const hasDot = raw.includes('.');
      const hasCom = raw.includes(',');

      // Caso con '.' y ',' mezclados ‚Üí detectar cu√°l es decimal
      if (hasDot && hasCom) {
        const lastDot = raw.lastIndexOf('.');
        const lastCom = raw.lastIndexOf(',');
        const dec = lastDot > lastCom ? '.' : ',';
        const mil = dec === '.' ? ',' : '.';

        let t = raw.split(mil).join('');
        if (dec === ',') t = t.replace(',', '.');

        const n = Number(t.replace(/[^\d.-]/g, ''));
        if (!Number.isFinite(n)) return 0;
        // Si parece un valor tipo "123,45" => interpretamos como 123.450
        return Math.round(n < 1000 ? n * 1000 : n);
      }

      // S√≥lo coma -> podr√≠a ser "123,45"
      if (hasCom && !hasDot) {
        const only = raw.replace(/[^\d,]/g, '');
        if (/^\d{1,3},\d{1,2}$/.test(only)) {
          const n = Number(only.replace(',', '.'));
          return Number.isFinite(n) ? Math.round(n * 1000) : 0;
        }
        // Si no matchea decimales cortos, sacamos todo menos d√≠gitos
        const d = raw.replace(/[^\d]/g, '');
        const n = Number(d);
        return Number.isFinite(n) ? n : 0;
      }

      // S√≥lo punto -> puede ser "123.45" (decimal) o "12.345" (miles)
      if (hasDot && !hasCom) {
        const only = raw.replace(/[^\d.]/g, '');
        if (/^\d{1,3}\.\d{1,2}$/.test(only)) {
          const n = Number(only);
          return Number.isFinite(n) ? Math.round(n * 1000) : 0;
        }
        const d = raw.replace(/[^\d]/g, '');
        const n = Number(d);
        return Number.isFinite(n) ? n : 0;
      }

      // Sin separadores raros -> le sacamos todo menos d√≠gitos
      const d = raw.replace(/[^\d]/g, '');
      const n = Number(d);
      return Number.isFinite(n) ? n : 0;
    };

    // cacheRows guarda la √∫ltima versi√≥n de los √≠tems tra√≠dos del backend.
    // Lo usamos para poder "eliminar uno" y luego re-postear el resto
    // sin hacer otra consulta.
    let cacheRows = [];

    /**
     * cargarSeleccion():
     * - GET /api/presupuestoItems?ticket_id=...
     * - Pinta la tabla de repuestos seleccionados actualmente.
     * - Calcula el total estimado (solo admin).
     * - Tambi√©n engancha el bot√≥n "Eliminar" de cada fila.
     */
    async function cargarSeleccion() {
      if (!ticketId) return;
      try {
        const res = await fetch(`/api/presupuestoItems?ticket_id=${ticketId}`);
        const out = await res.json();
        const rows = Array.isArray(out?.rows) ? out.rows : [];
        cacheRows = rows;

        // Caso sin repuestos guardados
        if (rows.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="${showPrices ? 6 : 4}" class="text-center py-3 text-muted">
                Sin repuestos seleccionados. Us√° ‚ÄúAdministrar repuestos‚Äù.
              </td>
            </tr>`;
          repCount.textContent = '0 √≠tems';
          if (showPrices && repTotal) repTotal.textContent = fmtARS0(0);
          setMontoFromRepuestos(0); // tambi√©n limpia el monto auto si sos admin
          return;
        }

        // Hay repuestos:
        let total = 0;

        // Construimos cada fila:
        //  - Admin ve ID, nombre, cantidad, unitPrice, subtotal, eliminar
        //  - T√©cnico ve ID, nombre, cantidad, eliminar (sin $)
        const html = rows.map(r => {
          const cant = Number(r?.cantidad || 0);

          if (showPrices) {
            // Admin:
            // unit = precio referencia. Si no hay precio_unit_num usamos parseEnteroARS() del texto.
            let unit = Number(r?.precio_unit_num);
            if (!Number.isFinite(unit) || unit <= 0) {
              unit = parseEnteroARS(r?.precio ?? r?.precio_unit_al_momento ?? '');
            } else {
              // Heur√≠stica defensiva: si hay un string con precio m√°s grande y el unit era muy chico (<1000),
              // nos quedamos con el m√°s cre√≠ble
              const fromStr = parseEnteroARS(r?.precio ?? r?.precio_unit_al_momento ?? '');
              if (fromStr > unit && unit < 1000) unit = fromStr;
            }

            const sub = unit * cant;
            total += sub;

            return `
              <tr data-id="${r.repuesto_id}">
                <td class="fw-semibold text-start">${r.repuesto_id}</td>
                <td class="text-start">${r.componente || ''}</td>
                <td class="text-end">${cant}</td>
                <td class="text-end">${fmtARS0(unit)}</td>
                <td class="text-end">${fmtARS0(sub)}</td>
                <td class="text-center" style="width:70px;">
                  <button
                    type="button"
                    class="btn btn-outline-danger btn-sm btnEliminar"
                    title="Eliminar"
                  >
                    <i class="bi bi-trash"></i>
                  </button>
                </td>
              </tr>
            `;
          } else {
            // T√©cnico (sin ver precios)
            return `
              <tr data-id="${r.repuesto_id}">
                <td class="fw-semibold text-start">${r.repuesto_id}</td>
                <td class="text-start">${r.componente || ''}</td>
                <td class="text-end">${cant}</td>
                <td class="text-center" style="width:70px;">
                  <button
                    type="button"
                    class="btn btn-outline-danger btn-sm btnEliminar"
                    title="Eliminar"
                  >
                    <i class="bi bi-trash"></i>
                  </button>
                </td>
              </tr>
            `;
          }
        }).join('');

        // Metemos las filas en el <tbody>
        tbody.innerHTML = html;

        // Contador de √≠tems y total
        repCount.textContent = `${rows.length} ${rows.length === 1 ? '√≠tem' : '√≠tems'}`;
        if (showPrices && repTotal) repTotal.textContent = fmtARS0(total);

        // Autorelleno del campo "Monto" del form de admin con la suma
        setMontoFromRepuestos(total);

        // Enlazamos los botones "Eliminar" de cada fila
        tbody.querySelectorAll('.btnEliminar').forEach(btn =>
          btn.addEventListener('click', onEliminarClick)
        );
      } catch(e) {
        // Error de fetch: mostramos mensaje rojo en la tabla y
        // limpiamos totales
        tbody.innerHTML = `
          <tr>
            <td colspan="${showPrices ? 6 : 4}" class="text-center py-3 text-danger">
              Error al cargar los repuestos seleccionados.
            </td>
          </tr>`;
        repCount.textContent = '‚Äî';
        if (showPrices && repTotal) repTotal.textContent = '‚Äî';
      }
    }

    /**
     * onEliminarClick(e):
     * - Handler para bot√≥n "Eliminar" de cada fila en la tabla.
     * - Confirma con el usuario.
     * - Reenv√≠a la lista de repuestos RESTANTES a /api/presupuestoItems (POST).
     *   Esto es consistente con la l√≥gica del backend que hace un replace total.
     * - Si el POST responde ok => recargamos la tabla.
     */
    async function onEliminarClick(e) {
      const tr = e.currentTarget.closest('tr');
      const repuestoId = Number(tr?.getAttribute('data-id') || '0');
      if (!repuestoId) return;

      if (!confirm('¬øEliminar este repuesto del presupuesto?')) return;

      // Filtramos cacheRows para sacar el √≠tem borrado
      const restantes = cacheRows
        .filter(r => Number(r?.repuesto_id) !== repuestoId)
        .map(r => ({
          repuesto_id: Number(r.repuesto_id),
          cantidad: Number(r.cantidad || 1)
        }));

      try {
        const res = await fetch('/api/presupuestoItems', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ticket_id: ticketId,
            items: restantes
          })
        });
        const out = await res.json();

        if (res.ok && out.ok) {
          // Re-fetch para refrescar la UI y totales
          await cargarSeleccion();
        } else {
          alert('No se pudo eliminar: ' + (out.error || res.statusText));
        }
      } catch (err) {
        alert('Error de red al eliminar.');
      }
    }

    // Primera carga de la tabla al entrar a la p√°gina
    cargarSeleccion();
  </script>
</BasePrivateLayout>
