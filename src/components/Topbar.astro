---
import { UserButton } from '@clerk/astro/components';

/**
 * Topbar fijo con:
 * - Botón hamburguesa (abre sidebar mobile/offcanvas).
 * - Formulario de filtros (opcional).
 * - Botón de usuario (Clerk).
 *
 * Props:
 *   showFilters?: boolean
 *     - true  => renderiza el formulario de búsqueda/filtrado en el topbar
 *     - false => sólo muestra el UserButton alineado a la derecha
 */
const { showFilters = false } = Astro.props as { showFilters?: boolean };

// Lista de estados disponibles para filtrar. Tipada explícitamente para TS.
const ESTADOS: string[] = [
  "Nuevo",
  "Retirar",
  "Presupuestar",
  "P. Enviado",
  "Reparación",
  "Prueba",
  "Lista",
  "Entregada",
  "Feedback Enviado",
  "Archivada",
  "No realizada"
];

// Mapa estado → color pastel (para puntito indicador y fondo en algunos casos)
const COLOR_POR_ESTADO: Record<string, string> = {
  "Nuevo": "#E2FFF6",
  "Retirar": "#FFE9CC",
  "Presupuestar": "#FFD9D9",
  "Enviar presupuesto": "#E9FCEC",
  "P. Enviado": "#D9EBFF",
  "Reparación": "#FFFDE1",
  "Prueba": "#E3DBFF",
  "Lista": "#FFE3DC",
  "Entregada": "#E6F6FF",
  "Feedback Enviado": "#FAE4F6",
  "Archivada": "#EDEDED",
  "No realizada": "#FFF1D9"
};

// Parámetros actuales del querystring (para SSR del filtro)
// Tipamos explícitamente como string para que TS no acuse any.
const by: string = Astro.url.searchParams.get('by') || 'id';
const rawQ: string = Astro.url.searchParams.get('q') || '';
const q: string = rawQ.trim();
---

<!-- Navbar fija superior -->
<nav class="navbar bg-white border-bottom px-3 py-2 shadow-sm sticky-top">
  <div class="d-flex w-100 align-items-center justify-content-between">
    <!-- Botón hamburguesa (abre offcanvas en mobile) -->
    <button
      class="btn d-md-none me-2"
      type="button"
      data-bs-toggle="offcanvas"
      data-bs-target="#mobileSidebar"
      aria-controls="mobileSidebar"
      aria-label="Abrir menú"
    >
      ☰
    </button>

    {showFilters ? (
      <!-- Form de filtros (SSR) con cambio dinámico de campo (texto/estado) -->
      <form
        id="filterForm"
        class="row g-2 justify-content-center w-100 mx-2"
        method="get"
        action="/dashboard"
      >
        <!-- Campo de búsqueda dinámico:
             - Si by=estado → dropdown con puntito de color
             - Si no → input text -->
        <div
          id="q-container"
          class="col-12 col-md-6"
          data-estados={encodeURIComponent(JSON.stringify(ESTADOS))}
          data-colores={encodeURIComponent(JSON.stringify(COLOR_POR_ESTADO))}
        >
          {by === 'estado' ? (
            <!-- Dropdown SSR con puntitos de color -->
            <div class="dropdown w-100" id="estado-dropdown">
              <!-- El valor real va en un hidden para enviar con el form -->
              <input type="hidden" name="q" value={q} id="estado-hidden" />

              <button
                class="btn btn-outline-secondary w-100 d-flex justify-content-between align-items-center"
                type="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
                id="estado-toggle"
              >
                <span id="estado-label">{q || 'Seleccioná estado…'}</span>
                <span
                  class="estado-dot ms-2"
                  style={`--dot-color: ${COLOR_POR_ESTADO[q] || '#ccc'}`}
                />
              </button>

              <!-- Lista de estados + opción “(Sin filtro)” -->
              <ul class="dropdown-menu w-100 shadow-sm">
                <li>
                  <button
                    type="button"
                    class="dropdown-item d-flex justify-content-between align-items-center"
                    data-value=""
                  >
                    <span>(Sin filtro)</span>
                    <span class="estado-dot" style="--dot-color:#ccc;"></span>
                  </button>
                </li>
                {ESTADOS.map((e: string) => (
                  <li>
                    <button
                      type="button"
                      class="dropdown-item d-flex justify-content-between align-items-center"
                      data-value={e}
                    >
                      <span>{e}</span>
                      <span
                        class="estado-dot"
                        style={`--dot-color: ${COLOR_POR_ESTADO[e] || '#007bff'}`}
                      />
                    </button>
                  </li>
                ))}
              </ul>

              <!-- Fallback si no hay JS -->
              <noscript>
                <select name="q" class="form-select w-100 mt-2">
                  <option value="">Seleccioná estado…</option>
                  {ESTADOS.map((e: string) => (
                    <option value={e} selected={q === e}>{e}</option>
                  ))}
                </select>
              </noscript>
            </div>
          ) : (
            <!-- Input de texto (cuando el filtro no es por estado) -->
            <input
              type="text"
              name="q"
              value={q}
              placeholder="Buscar…"
              class="form-control w-100"
            />
          )}
        </div>

        <!-- Selector de columna por la que se filtra -->
        <div class="col-12 col-md-3">
          <select name="by" class="form-select w-100" id="by-select">
            <option value="id" selected={by === 'id'}>ID</option>
            <option value="ticket" selected={by === 'ticket'}>Ticket</option>
            <option value="cliente" selected={by === 'cliente'}>Cliente</option>
            <option value="estado" selected={by === 'estado'}>Estado</option>
            <option value="maquina" selected={by === 'maquina'}>Modelo</option>
          </select>
        </div>

        <!-- Botones de acción del filtro -->
        <div class="col-12">
          <div class="row g-2 justify-content-center">
            <div class="col-6 col-md-3">
              <button class="btn btn-primary w-100" type="submit">Filtrar</button>
            </div>
            <div class="col-6 col-md-3">
              <a href="/dashboard" class="btn btn-outline-secondary w-100">Limpiar</a>
            </div>
          </div>
        </div>

        <!-- Reinicia a página 1 al aplicar filtros -->
        <input type="hidden" name="page" value="1" />
      </form>
    ) : (
      <!-- Si no hay filtros, empujo el UserButton a la derecha -->
      <div class="flex-grow-1"></div>
    )}

    <!-- Área de usuario (Clerk) -->
    <div class="ms-auto">
      <UserButton />
    </div>
  </div>

  {showFilters && (
    <>
      <!-- Datos embebidos para posibles lecturas desde JS -->
      <script type="application/json" id="estados-data">{JSON.stringify(ESTADOS)}</script>
      <script type="application/json" id="colores-data">{JSON.stringify(COLOR_POR_ESTADO)}</script>

      <!-- Script que transforma el campo según “by” y pinta los puntitos -->
      <script defer src="/scripts/form-actualizar-filtro.js"></script>
    </>
  )}
</nav>

<style>
  /* Puntito de color reutilizable (estado actual / color pastel) */
  .estado-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--dot-color, #007bff);
    border: 1px solid rgba(0,0,0,.15);
    display: inline-block;
    flex: 0 0 auto;
  }

  /* Dropdown active override para que no pinte azul bootstrap fuerte */
  .dropdown-menu .dropdown-item.active,
  .dropdown-menu .dropdown-item:active {
    background-color: rgba(0,0,0,.05);
    color: inherit;
  }
</style>
