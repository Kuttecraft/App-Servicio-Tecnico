---
/**
 * PrinterCard.astro
 *
 * Muestra una tarjeta/resumen de un ticket/equipo.
 *
 * FUNCIONALIDAD CLAVE:
 * - Muestra foto del equipo (con prioridad de im√°genes configurable).
 * - Muestra datos principales del ticket (cliente, ticket, estado, etc.).
 * - Usa un fondo pastel distinto seg√∫n el estado (estadoColores).
 * - Botones "Ver" y "Editar" que llevan al detalle / edici√≥n.
 *
 * DETALLES IMPORTANTES:
 * - El label visible dice "M√°quina", pero el valor real lo saca de `modelo`.
 *   Si `modelo` no viene, intenta usar `maquina` (compatibilidad hist√≥rica).
 * - Las im√°genes usan un cache-buster (?t=Date.now()) para evitar que el navegador
 *   muestre una versi√≥n vieja de la foto si se actualiz√≥ con el mismo nombre.
 * - colorEstado viene de una paleta estadoColores; si no hay match, usa blanco.
 * - Se cuidan textos largos con .truncate para que no rompan el layout responsive.
 */

export interface Props {
  id?: number | string;
  ticket?: number | string;
  cliente?: string;

  // `modelo` es la propiedad "nueva" que queremos mostrar como "M√°quina".
  // `maquina` es legacy/back-compat.
  modelo?: string | null;
  maquina?: string | null;

  estado?: string;
  whatsapp?: string | null;

  // Links de acci√≥n
  onClickUrl?: string;          // link al detalle de la orden/equipo
  onClickUrlEditar?: string;    // link para editar el equipo/ticket

  // Im√°genes:
  // - imagen_ticket tiene prioridad m√°s alta (por ej. foto de ticket/boleta)
  // - imagen com√∫n del equipo
  // - imagen_extra como √∫ltima opci√≥n
  // - fallback absoluto "/logo.webp"
  imagen?: string | null;
  imagen_ticket?: string | null;
  imagen_extra?: string | null;
}

const {
  id,
  ticket = "Sin ticket",
  cliente = "Desconocido",

  // Preferimos 'modelo'; mantenemos 'maquina' como fallback por compatibilidad
  modelo: modeloProp = undefined,
  maquina: maquinaProp = undefined,

  estado = "Sin estado",
  whatsapp = "No especificado",

  onClickUrl = "#",
  onClickUrlEditar = "#",

  // Im√°genes (pueden venir null)
  imagen = null,
  imagen_ticket = null,
  imagen_extra = null,
} = Astro.props as Props;

// üëâ Texto mostrado para "M√°quina":
// Orden de prioridad:
//   1. modeloProp (nuevo campo preferido)
//   2. maquinaProp (campo legado / viejo naming)
//   3. "Desconocido" si no hay nada
//
// trim() para limpiar espacios en blanco redundantes.
const modelo =
  (modeloProp && String(modeloProp).trim()) ||
  (maquinaProp && String(maquinaProp).trim()) ||
  "Desconocido";

// Prioridad de im√°genes para la card:
// 1) imagen_ticket
// 2) imagen
// 3) imagen_extra
// 4) fallback "/logo.webp"
//
// Cada una se forcea a String(...) por si viene como algo tipo undefined/null,
// y al final usamos "/logo.webp" si todas faltan.
const imagenFinal =
  (imagen_ticket && String(imagen_ticket)) ||
  (imagen && String(imagen)) ||
  (imagen_extra && String(imagen_extra)) ||
  "/logo.webp";

// üé® Paleta pastel por estado (solo fondo de card).
// La idea es dar un hint visual r√°pido del estado del ticket.
//
// Esta tabla se puede ir actualizando si agreg√°s estados nuevos.
// Para estados no listados, se usa colorEstado = "#FFFFFF" (blanco).
const estadoColores: Record<string, string> = {
  "Nuevo": "#E2FFF6",
  "Retirar": "#FFE9CC",
  "Presupuestar": "#FFD9D9",
  "Enviar presupuesto": "#E9FCEC",
  "P. Enviado": "#D9EBFF",
  "Reparaci√≥n": "#FFFDE1",
  "Prueba": "#E3DBFF",
  "Lista": "#FFE3DC",
  "Entregada": "#E6F6FF",
  "Feedback Enviado": "#FAE4F6",
  "Archivada": "#EDEDED",
  "No realizada": "#FFF1D9"
};

// Color de fondo efectivo seg√∫n estado.
// Si `estado` no matchea ninguna key del mapa, usamos blanco puro (#FFFFFF).
const colorEstado = estadoColores[estado] || "#FFFFFF";

// Texto alternativo accesible (alt) para la imagen principal.
// Idealmente describe qu√© se est√° mostrando. Esto es √∫til para lector de pantalla.
const altImagen = `Imagen del equipo de ${cliente}`;
---

<style>
  /* ======== ESTILOS DE TARJETA ========

     Esta card NO depende de Bootstrap para la disposici√≥n interna,
     salvo por las clases que le damos en el markup.
     Los estilos de abajo definen:
     - Layout vertical con imagen arriba y datos abajo.
     - Bordes redondeados suaves.
     - Sombra liviana + hover lift.
     - Contenci√≥n de textos muy largos con .truncate.

     Nota: Usamos unidades chicas (.25rem/.5rem) para mantener la card compacta.
  */

  /* Contenedor ra√≠z de la card */
  .pcard {
    display: flex;
    flex-direction: column;

    border-radius: 15px;
    min-width: 220px;

    transition: transform 0.15s ease;
    border: 1px solid rgba(0,0,0,.06); /* contorno sutil */
  }

  /* Efecto hover sutil para dar sensaci√≥n de "clickeable" */
  .pcard:hover {
    transform: translateY(-3px);
  }

  /* Wrapper cuadrado para la imagen principal (1:1) */
  .pcard__imgwrap {
    width: 200px;
    aspect-ratio: 1 / 1; /* fuerza cuadro */
    border-radius: 15px;
    overflow: hidden;
    margin: .25rem auto .5rem auto; /* centrado horizontal */

    box-shadow: 0 2px 8px rgba(0,0,0,.08);
    border: 1px solid rgba(0,0,0,.06);

    background: #f5f6f8; /* color de fondo mientras la imagen carga */
  }

  /* Imagen dentro del wrapper:
     - object-fit: cover recorta para llenar sin deformar.
     - width/height 100% para ocupar todo el cuadro. */
  .pcard__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Cuerpo de texto (cliente, lista de props) */
  .pcard__body {
    padding: .25rem .5rem 0 .5rem;
  }

  /* Footer con botones "Ver" / "Editar".
     margin-top: auto empuja el footer al fondo, haciendo que
     la card mantenga altura consistente incluso si el body
     tiene m√°s o menos texto. */
  .pcard__footer {
    margin-top: auto;
    padding-top: .5rem;
  }

  .btn-ver-card,
  .btn-editar-card {
    border: 1px solid rgba(0,0,0,.12);
    border-radius: 8px;
    text-decoration: none;
    font-size: .9rem;
  }

  /* Trunca textos largos en una sola l√≠nea
     y agrega "..." visual con text-overflow: ellipsis */
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>

<!--
  MARCUP DE LA CARD
  -----------------
  class="card shadow-sm p-3 mb-4 text-center pcard h-100"
  - 'card shadow-sm p-3 mb-4 text-center h-100' ‚Üí viene de Bootstrap.
  - 'pcard' ‚Üí estilo personalizado de arriba.
  - inline style con background-color din√°mico seg√∫n estado.

  Notas:
  - La imagen usa `${imagenFinal}?t=${Date.now()}` como cache-buster simple.
    Eso ayuda a ver la √∫ltima versi√≥n subida sin esperar a que el browser
    invalide cach√©.
  - T√≠tulos usan .truncate + title={...} para que al hacer hover se vea el
    texto completo en tooltip nativo.
-->

<div
  class="card shadow-sm p-3 mb-4 text-center pcard h-100"
  style={`background-color: ${colorEstado}`}
>
  <div class="pcard__imgwrap">
    <img
      class="pcard__img"
      src={`${imagenFinal}?t=${Date.now()}`}  
      loading="lazy"                          
      alt={altImagen}                         
    />
  </div>

  <div class="pcard__body">
    <!-- Cliente / due√±o del equipo -->
    <h6
      class="fw-bold text-dark mt-1 mb-1 truncate"
      title={cliente}
      style="font-size:1.12rem;"
    >
      {cliente}
    </h6>

    <!-- Lista de atributos importantes -->
    <ul class="list-unstyled mb-2 small text-secondary">
      <li><strong>ID:</strong> {id}</li>
      <li><strong>Ticket:</strong> {ticket}</li>

      <!--
        "M√°quina" etiqueta fija. Valor mostrado viene de `modelo` priorizado.
        Si no hay ni modelo ni maquina, mostramos "Desconocido".
      -->
      <li class="truncate" title={modelo}>
        <strong>M√°quina:</strong> {modelo}
      </li>

      <li><strong>Estado:</strong> {estado}</li>

      <!-- WhatsApp puede venir null; en ese caso mostramos "No especificado".
           Tambi√©n aplicamos truncate + title para n√∫meros largos -->
      <li
        class="truncate"
        title={whatsapp || 'No especificado'}
      >
        <strong>WhatsApp:</strong> {whatsapp || 'No especificado'}
      </li>
    </ul>
  </div>

  <!-- Acciones -->
  <div class="pcard__footer d-flex gap-2 justify-content-center">
    <a href={onClickUrl} class="btn-ver-card px-3 py-1">Ver</a>
    <a href={onClickUrlEditar} class="btn-editar-card px-3 py-1">Editar</a>
  </div>
</div>
